[{"title":"如何阅读一本书","url":"http://jocolorful.com/2022/11/20/如何阅读一本书/","content":"<h1 id=\"一、3W1H-法则\"><a href=\"#一、3W1H-法则\" class=\"headerlink\" title=\"一、3W1H 法则\"></a>一、3W1H 法则</h1><p>Why?<br>唯有明确阅读的目的，才有利于更加高效地阅读。</p>\n<p>What？</p>\n<ol>\n<li>第一类书如同主食，包括「职业、生活、生理、心理」等方面的现实问题及其直接解决之道；</li>\n<li>第二类书如同美食，不求针对人生的现实问题，却可以「满足思想需求」；</li>\n<li>第三类书如同蔬菜、水果，可以帮助我们更好地阅读，即「工具书」；</li>\n<li>第四类书如同甜点、零食，用于娱乐、消遣，满足休闲需求。</li>\n</ol>\n<p>Where：阅读的场所</p>\n<ol>\n<li>在安静的场所享用「主食」与「美食」</li>\n<li>把「三上」（枕上、车上、厕上）空间交给「零食」图书</li>\n</ol>\n<p>How：如何阅读一本书？</p>\n<table style=\"width:100%\">\n  <tr>\n    <th>问题</th>\n    <th>方法</th>\n  </tr>\n  <tr>\n    <td>我通常只阅读与工作或学习相关的书，没有时间读其他自己喜欢的书。</td>\n    <td>以缺乏时间为借口拒绝读书的人，需要更强烈的阅读动机和更有效的阅读方法。</td>\n  </tr>\n  <tr>\n    <td>我通常只阅读与工作或学习相关的书，没有时间读其他自己喜欢的书。</td>\n    <td>因旁人的眼光而拒绝读书的人，需要更强的专注力。</td>\n  </tr>\n  <tr>\n    <td>我珍惜每一本书，从不在书上涂画。</td>\n    <td>只买书来读的人，需要警惕「藏而不读」。</td>\n  </tr>\n  <tr>\n    <td>我当我开始读一本书后，无论喜欢与否，我都会读完它。</td>\n    <td>书非读完不可的人可以试着学会略读，用来处理分明不喜欢、心中却放不下的书。</td>\n  </tr>\n  <tr>\n    <td>我珍惜每一本书，从不在书上涂画。</td>\n    <td>从不在书上涂画的人可以尝试边读边写，从现在起，拿起笔来阅读。</td>\n  </tr>\n  <tr>\n    <td>我只读书，从来不敢评论一本书，无论认同还是不认同。</td>\n    <td>只读不评，阅读的效果会减少一半。阅读虽是个人行为，本质却是交流。</td>\n  </tr>\n  <tr>\n    <td>我读书很认真，从来不跳过书中任何一部分内容。</td>\n    <td>书可以多次阅读，但在不懂之处不断回读，并不是最好的解决办法。</td>\n  </tr>\n  <tr>\n    <td>我读书时很清楚书中的内容，可是放下书后什么都不记得了。</td>\n    <td>读过就忘，说明阅读的效果还不佳，需要加强记忆与理解。</td>\n  </tr>\n  <tr>\n    <td>同样主题的书我只读最经典的一本，其他的书都没什么用</td>\n    <td>只读经典或许会使人陷入误区，也容易让人产生阅读上的优越感。对于关注的主题，还是广泛阅读更好。</td>\n  </tr>\n</table>\n\n<h1 id=\"二、阅读的层次\"><a href=\"#二、阅读的层次\" class=\"headerlink\" title=\"二、阅读的层次\"></a>二、阅读的层次</h1><blockquote>\n<p>深处种菱浅种稻 不深不浅种荷花</p>\n</blockquote>\n<p>艾德勒：基础阅读、检视阅读、分析阅读、主题阅读；<br>邹韬奋：分层次阅读 - 泛读、略读、精读；<br>王国维：《人间词话》中的三重境界；</p>\n<p><strong>个人理解</strong>：</p>\n<ol>\n<li>泛读：对于阅读而言，我们首先应该明确这本书我们是否还需要继续读下去；</li>\n<li>阅读：就是读。勾划出重点、难点、疑点、打动人心的点；</li>\n<li>精读：反复读上述的点，形成自己的知识体系，同时多看看别人的评论。</li>\n</ol>\n<h2 id=\"阅读层次与读书四问\"><a href=\"#阅读层次与读书四问\" class=\"headerlink\" title=\"阅读层次与读书四问\"></a>阅读层次与读书四问</h2><ol>\n<li><font color=\"red\">这本书究竟讲了什么？</font></li>\n<li><font color=\"red\"> 作者通过这本书解决了什么问题？</font></li>\n<li><font color=\"red\"> 这本书说得有道理吗？</font></li>\n<li><font color=\"red\">这本书与我有什么关系？</font></li>\n</ol>\n<h1 id=\"三、速读\"><a href=\"#三、速读\" class=\"headerlink\" title=\"三、速读\"></a>三、速读</h1><ol>\n<li>基本要求：视读不声读<br>阅读时，不可全篇声读或者默读，要尽力控制自己的视线从左向右、自上而下地移动，最好逐句阅读，视线的焦点落在每一行的关键词语或短语上。</li>\n<li>阅读时，手和身体做什么？<br>千万不要认为速读就不需要做笔记，读一本较深奥的书，做笔记反而使阅读更高效。</li>\n<li>阅读的正确姿势</li>\n<li>拓宽视野的练习</li>\n<li>跳跃视线，摆脱逐字阅读的弊端</li>\n<li>视野垂直扩展：尝试一目数行</li>\n<li><font color=\"red\">永远不要回读</font><br>事实上，一篇文章、一本书自成逻辑，一般不会存在一个孤立的概念。一本书中若首次出现一个难以理解的概念，通常都会在后面的内容中详述或者举例说明，此时中断阅读而苦思冥想，或者放下书本去查阅工具书，反而错失了得到解答的时机。</li>\n<li>提高专注度的方法<br>告诉自己：我的注意力除了放在书本上之外，其余的全部放在后脑勺上了，已经没有多余的精力去想别的事情了。<br>处于这种忘我的状态，周围的一切都不会对自己产生干扰，不仅不会感到疲惫，从而把剩余的精力都用在阅读和思考上，还能产生身心愉快、精力充沛的感觉。此时我们的心情会不知不觉地放松下来，头脑却始终保持清醒，思维的活跃程度会明显提高。</li>\n<li>警惕阅读的负面情绪<ol>\n<li>克服畏惧之心</li>\n<li>别对书籍及作者产生情绪</li>\n<li>负罪感从何而来</li>\n<li>放松心情，克服焦虑</li>\n</ol>\n</li>\n<li>快速理解更重要</li>\n<li>速读提问技巧</li>\n<li>阅读「思维导图」</li>\n<li>快速记忆的条件反射</li>\n</ol>\n<h1 id=\"四、四到五用、提要钩玄\"><a href=\"#四、四到五用、提要钩玄\" class=\"headerlink\" title=\"四、四到五用、提要钩玄\"></a>四、四到五用、提要钩玄</h1><blockquote>\n<p>宋代理学家朱熹曾言：读书有三到，谓「心到，眼到，口到」。到了近代，著名学者胡适在「三到」的基础上加了一个「手到」成为四到，于是形成「眼到、口到、手到、心到」的读书方法。鲁迅又在「四到」的基础上加上一个「脑到」」，总结为「五用」。</p>\n</blockquote>\n<p>按照「提要钩玄」的方法，读书时首先要将书分门别类，然后按其不同性质采取不同的阅读方法。</p>\n<p>其实，「提要」和「钩玄」可以同时运用在一本书的阅读中，</p>\n<p>「提要」对应前文「读书四问」中的第一问，要知道这本书讲了什么；<br>「钩玄」对应第二问，即知道作者的观点。<br>「提要钩玄」重在强调知识的获取，在此之后提出并回答后两个问题，才能学以致用，得到提高。</p>\n<p>可以认为，「提要钩玄」是精读一本书最基本也最通用的方法。</p>\n<h2 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h2><ol>\n<li><p>摘抄型读书笔记<br>理论型的读书笔记，除摘录文字内容外，还要注明详细的出处，以备日后有需要时再查阅相关资料。这类读书笔记有时甚至不抄录具体内容，只记下要点，建立索引，主要包括文章的题目、编著者、出版年月日、书籍来源，更详细一些的还包括具体章、节，以备日后查找。写这类读书笔记需要更为严谨的态度。</p>\n</li>\n<li><p>感悟型读书笔记<br>札记的形式比较灵活，可以针对一个要点，也可以针对多个，篇幅也无限制。札记积少成多，对理解全书和明确自己的心路历程有很大帮助，既有原文又有感悟，更适宜日后回顾。</p>\n</li>\n<li><p>评注型读书笔记<br>批注的内容通常直接写在书上，阅读过程中读到重要的地方或者自己有深刻体会时，就用笔在字句上做记号，然后在书页空白处写下批注，或者是夹纸条、贴便签。</p>\n</li>\n<li><p>综合型读书笔记<br>综合型读书笔记兼有以上三类读书笔记的特点，通常既有原文，又有感想，还有评注，一般独立成册，即写在专属的笔记本上。这类笔记便于保存，可以反复阅读，是最长效的笔记类型。</p>\n</li>\n</ol>\n<h2 id=\"精读的要求\"><a href=\"#精读的要求\" class=\"headerlink\" title=\"精读的要求\"></a>精读的要求</h2><p>精读一本书，最基本也最直接的要求就是识文解义。<br>识文：是指知道书中说的是什么意思，对应「这本书究竟讲了什么」；<br>解义：是指知道作者想要表达什么观点，对应「作者通过这本书解决了什么问题」。</p>\n<p>在实际阅读过程中适当选择一些自己不太熟悉的题材，</p>\n<ol>\n<li>一来可以增加知识的广度</li>\n<li>二来可以提升精读的基本技能。</li>\n</ol>\n<h2 id=\"反复阅读的方法\"><a href=\"#反复阅读的方法\" class=\"headerlink\" title=\"反复阅读的方法\"></a>反复阅读的方法</h2><p>阅读一本「主食」型书，通常都需要经过「阅读——实践——反思——再阅读——再实践」的过程，才能真正学以致用；<br>阅读一本「美食」型书，更需要反复思考和钻研才能领悟其中的深意。</p>\n<ol>\n<li>障碍一：已经读过，再无新意<br>重复重点，不是因为不懂而重复，而是因为理解并且觉得重要才反复阅读。</li>\n<li>障碍二：已经吃透，随手翻阅</li>\n<li>障碍三：重读未尽，半途而废<ol>\n<li>不做无目的的重复；</li>\n<li>不做无新意的重复；</li>\n<li>不做无效用的重复。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"精读一本书，像织一张网\"><a href=\"#精读一本书，像织一张网\" class=\"headerlink\" title=\"精读一本书，像织一张网\"></a>精读一本书，像织一张网</h2><p>读一本书，要层层剖析，深入理解，这就需要在书中的每一个章节乃至全书的<font color=\"red\">结构</font>上下功夫。</p>\n<h2 id=\"用自己的话把内容讲出来\"><a href=\"#用自己的话把内容讲出来\" class=\"headerlink\" title=\"用自己的话把内容讲出来\"></a>用自己的话把内容讲出来</h2><p>复述时不必要求一字不漏，却要保证准确、完整，不能偷换概念，也不能遗漏重要观点。</p>\n<h2 id=\"也有「形式」重于「内容」时\"><a href=\"#也有「形式」重于「内容」时\" class=\"headerlink\" title=\"也有「形式」重于「内容」时\"></a>也有「形式」重于「内容」时</h2><ol>\n<li>不迷信权威，也不迷信自己</li>\n<li>不钻牛角尖，换角度思考</li>\n<li>不要忘记对自己提问</li>\n</ol>\n<h2 id=\"不要忘记对自己提问\"><a href=\"#不要忘记对自己提问\" class=\"headerlink\" title=\"不要忘记对自己提问\"></a>不要忘记对自己提问</h2><h2 id=\"如何评论一本书\"><a href=\"#如何评论一本书\" class=\"headerlink\" title=\"如何评论一本书\"></a>如何评论一本书</h2><ol>\n<li><p>不读懂，不妄评<br>就像和人对话时忽然打断对方的话一样不礼貌，而且会影响对话、沟通的效果。<br>如果只是走马观花看过一遍，尚不能讲出书中大意，也不宜对书籍进行评论。</p>\n</li>\n<li><p>有理有据，求同存异<br>如果存在争议，应该求同存异，化解争议。因为我们需要通过评论来强化阅读的效果，而不是证明自己的见解完全正确。</p>\n</li>\n<li><p>说出来或写下来</p>\n</li>\n</ol>\n<h2 id=\"无疑不读书，读书必有疑\"><a href=\"#无疑不读书，读书必有疑\" class=\"headerlink\" title=\"无疑不读书，读书必有疑\"></a>无疑不读书，读书必有疑</h2><p>阅读一本书的经过可以视为「疑问——解答——验证——再疑问——再解答——再验证」这一「螺旋提升」的过程，而「疑问」正处在开启和结束一个循环的位置。因此，读书贵疑，不仅是方法，也是基本的态度。</p>\n<h1 id=\"五、八面受敌、一意求之\"><a href=\"#五、八面受敌、一意求之\" class=\"headerlink\" title=\"五、八面受敌、一意求之\"></a>五、八面受敌、一意求之</h1><blockquote>\n<p>将一个主题研究透彻之后，再次阅读时关注另一个主题，这样阅读多遍。</p>\n</blockquote>\n<h2 id=\"做好主题阅读的准备\"><a href=\"#做好主题阅读的准备\" class=\"headerlink\" title=\"做好主题阅读的准备\"></a>做好主题阅读的准备</h2><ol>\n<li>思想上的准备：首先我是否对选定的“主题”有强烈的阅读意愿？</li>\n<li>其次，我是否明白主题阅读的含义？</li>\n</ol>\n<h2 id=\"行为上的准备\"><a href=\"#行为上的准备\" class=\"headerlink\" title=\"行为上的准备\"></a>行为上的准备</h2><ol>\n<li>首先根据主题列出一份试验性的书目；</li>\n<li>然后检视书目上所有的书，筛选出与主题相关的书。</li>\n</ol>\n<h2 id=\"始终把主题排在第一位\"><a href=\"#始终把主题排在第一位\" class=\"headerlink\" title=\"始终把主题排在第一位\"></a>始终把主题排在第一位</h2><ol>\n<li>第一条是：凡是我没有明确地认识到的东西，我决不把它当成真的接受。</li>\n<li>第二条是：把我所审查的每一个难题按照可能和必要的程度分成若干部分，以便一一妥为解决。</li>\n<li>第三条是：按次序进行我的思考，从最简单、最容易认识的对象开始，一点一点逐步上升，直到认识最复杂的对象；就连那些本来没有先后关系的东西，也给它们设定一个次序。</li>\n<li>第四条是：在任何情况下，都要尽量全面地考察，尽量普遍地复查，做到确信毫无遗漏。</li>\n</ol>\n<h2 id=\"检视出需要的内容\"><a href=\"#检视出需要的内容\" class=\"headerlink\" title=\"检视出需要的内容\"></a>检视出需要的内容</h2><ol>\n<li>先筛选与主题相关的书籍</li>\n<li>再从每本书中筛选出与主题联系紧密的内容并确定它与主题的联系，</li>\n</ol>\n<p>前者是后者实施的前提，分两进行走符合正常的阅读思路。</p>\n<h2 id=\"创设主题阅读的语言体系\"><a href=\"#创设主题阅读的语言体系\" class=\"headerlink\" title=\"创设主题阅读的语言体系\"></a>创设主题阅读的语言体系</h2><p>用自己的话表达出来，创设自己的语言体系，如果不能完美地创设自己的语言体系，至少要做到：</p>\n<p>第一，使用有助于理解所有书籍的语言，而不是其中一两本书的；<br>第二，使用有助于我们自己建立主旨、表达观点的语言。</p>\n<h2 id=\"界定论点的主次\"><a href=\"#界定论点的主次\" class=\"headerlink\" title=\"界定论点的主次\"></a>界定论点的主次</h2><p>界定论点主次可使接下来的分析讨论更有条理。？不太理解哦</p>\n<h2 id=\"论点的分析讨论\"><a href=\"#论点的分析讨论\" class=\"headerlink\" title=\"论点的分析讨论\"></a>论点的分析讨论</h2><ol>\n<li><p>由浅入深分析：“结果”导向的分析方式，由结果到原因，由可见到不可见，由熟悉到陌生，更容易让人接受。同时，这样分析问题有助于培养自己的主动性，这正是主题阅读所需要的。</p>\n</li>\n<li><p>由深至浅分析：由深至浅分析问题，一般情况下是由主要到次要，从中心扩展到四周。</p>\n</li>\n</ol>\n<h2 id=\"完成“研究性”阅读\"><a href=\"#完成“研究性”阅读\" class=\"headerlink\" title=\"完成“研究性”阅读\"></a>完成“研究性”阅读</h2><p>客观公正地评价一个阅读的主题，有助于强化我们的认识，完善自己的知识体系，更好地解决相关问题。</p>\n<h1 id=\"六、举一反三\"><a href=\"#六、举一反三\" class=\"headerlink\" title=\"六、举一反三\"></a>六、举一反三</h1><ol>\n<li>以“写”促“读”</li>\n</ol>\n<h2 id=\"怎样写一个故事\"><a href=\"#怎样写一个故事\" class=\"headerlink\" title=\"怎样写一个故事\"></a>怎样写一个故事</h2><h2 id=\"阅读论说性作品的方法\"><a href=\"#阅读论说性作品的方法\" class=\"headerlink\" title=\"阅读论说性作品的方法\"></a>阅读论说性作品的方法</h2><ol>\n<li><p>侧重理论，作者进行论证的主要目的是传播某种知识；我们除了关注知识外，更应关注它是怎样被发现、被证实的，这才是书籍的精髓，也是作者真正要表达的东西。</p>\n</li>\n<li><p>侧重实践的论说性作品，比如本书，我们应该重点阅读它所介绍的方法和技巧，而不是关注作者是怎样试图说服我们的</p>\n</li>\n</ol>\n<h2 id=\"阅读说明性文字的方法\"><a href=\"#阅读说明性文字的方法\" class=\"headerlink\" title=\"阅读说明性文字的方法\"></a>阅读说明性文字的方法</h2><p>说物与说理的方法：概括法、分类法、数字说明法、引用说明法、比喻说明法</p>\n<p>阅读说明性作品，宜边阅读边实践，比如阅读说明书，一般会边看边操作；若阅读的对象不针对实践，宜采用复述的方法确认自己“知道”了。</p>\n<h2 id=\"阅读抒情类作品的方法\"><a href=\"#阅读抒情类作品的方法\" class=\"headerlink\" title=\"阅读抒情类作品的方法\"></a>阅读抒情类作品的方法</h2><p>情类作品的篇幅通常不会太长，即使集结成书，往往也是由短篇的文字组合而成的。这样的话，对每一篇文章或同一个系列的数篇文章，宜一次性读完，这样可避免因中断造成情感上的停顿。</p>\n<h2 id=\"一本书的布局谋篇\"><a href=\"#一本书的布局谋篇\" class=\"headerlink\" title=\"一本书的布局谋篇\"></a>一本书的布局谋篇</h2><ol>\n<li>开篇和结尾</li>\n<li>章节、层次、过渡、照应</li>\n<li>主次和详略</li>\n</ol>\n<h2 id=\"网络、写作和阅读\"><a href=\"#网络、写作和阅读\" class=\"headerlink\" title=\"网络、写作和阅读\"></a>网络、写作和阅读</h2><h2 id=\"选书还是选人\"><a href=\"#选书还是选人\" class=\"headerlink\" title=\"选书还是选人\"></a>选书还是选人</h2><p>答案是都不选，要选自己需要的。明确自己的需求，就容易进行选择，这时“选书”或“选人”的问题已不再重要了。</p>\n<h2 id=\"跳出书本外，学以致用\"><a href=\"#跳出书本外，学以致用\" class=\"headerlink\" title=\"跳出书本外，学以致用\"></a>跳出书本外，学以致用</h2><ol>\n<li>写有定式，读无套路。如果说写作是把本无拘束的内容放到书籍的方寸之间，那么阅读就是把有限的方寸之间的内容释放回无限的现实中去。</li>\n</ol>\n<p>始终按已有的方法进行阅读，不加入自己的思考，是不能超越前人的。</p>\n<ol start=\"2\">\n<li>书中之言，皆为人言</li>\n</ol>\n<p>书里的话并非金科玉律，不是任何情况下都能照搬无误的。</p>\n<ol start=\"3\">\n<li>学以致用，方为正道</li>\n</ol>\n<p>跳出书本外，最重要的理由就是：书不能真正教给我们什么，除非我们把它用在现实生活中。</p>\n<h1 id=\"七、纸上得来终觉浅\"><a href=\"#七、纸上得来终觉浅\" class=\"headerlink\" title=\"七、纸上得来终觉浅\"></a>七、纸上得来终觉浅</h1><h2 id=\"阅读不是目的，只是工具\"><a href=\"#阅读不是目的，只是工具\" class=\"headerlink\" title=\"阅读不是目的，只是工具\"></a>阅读不是目的，只是工具</h2><ol>\n<li><p>求知的工具</p>\n</li>\n<li><p>提升的阶梯</p>\n<p> “井蛙不可语海，夏虫不可语冰”，很多时候，并不是事物本身是什么样，而是我们的眼界决定了自己可以看到什么。</p>\n</li>\n<li><p>联系的纽带</p>\n</li>\n</ol>\n<h2 id=\"为知：绝知此事要躬行\"><a href=\"#为知：绝知此事要躬行\" class=\"headerlink\" title=\"为知：绝知此事要躬行\"></a>为知：绝知此事要躬行</h2><p>阅读的效用也不能仅限于最浅层的实用性需求，而要深入到塑造人格的层次上去。</p>\n<h2 id=\"为己：书籍是全世界的营养品\"><a href=\"#为己：书籍是全世界的营养品\" class=\"headerlink\" title=\"为己：书籍是全世界的营养品\"></a>为己：书籍是全世界的营养品</h2><p>具有这一效用的书籍多为“美食”类图书，宜精读、深思。阅读这类图书不能只注重精神上的享受，也要深入思考书中内容与自己的联系，可以满足什么精神需求。</p>\n<h2 id=\"为人：分享与影响\"><a href=\"#为人：分享与影响\" class=\"headerlink\" title=\"为人：分享与影响\"></a>为人：分享与影响</h2><h2 id=\"延续：创新与传承\"><a href=\"#延续：创新与传承\" class=\"headerlink\" title=\"延续：创新与传承\"></a>延续：创新与传承</h2><h2 id=\"浅析“杠杆阅读术”\"><a href=\"#浅析“杠杆阅读术”\" class=\"headerlink\" title=\"浅析“杠杆阅读术”\"></a>浅析“杠杆阅读术”</h2><ol>\n<li><p>“杠杆阅读术”的通用方法</p>\n</li>\n<li><p>首先，“杠杆”理论可以借鉴，如以自己需求为导向，忽略影响不大的内容，关注重要的内容。</p>\n</li>\n<li><p>其次，“一天一本书”的方法值得借鉴。</p>\n</li>\n<li><p>再次，“80/20法则”也可以应用到重点阅读中去</p>\n</li>\n<li><p>最后，“杠杆阅读笔记”这种类似小抄的笔记也有值得借鉴之处，它最大的特点就是可以随身携带，随时复习，是阅读专业书籍必备的利器。</p>\n</li>\n</ol>\n<h2 id=\"浅析“RIA拆书阅读法”\"><a href=\"#浅析“RIA拆书阅读法”\" class=\"headerlink\" title=\"浅析“RIA拆书阅读法”\"></a>浅析“RIA拆书阅读法”</h2><p>I、A1、A2三类笔记。</p>\n<ol>\n<li>I类笔记对应第一类拆解，即用自己的语言重述知识；</li>\n<li>A1类笔记对应第二类拆解，即描述自己的相关经验；</li>\n<li>A2类笔记对应第三类拆解，即写下自己以后怎样应用。</li>\n</ol>\n<h1 id=\"八、众里寻她千百度-鱼-与-渔\"><a href=\"#八、众里寻她千百度-鱼-与-渔\" class=\"headerlink\" title=\"八、众里寻她千百度 - 鱼 与 渔\"></a>八、众里寻她千百度 - 鱼 与 渔</h1><ol>\n<li><p>“鱼”不如“渔”, “藏”不如“读”</p>\n<ol>\n<li>一，“多少天读完一本书”的计划。</li>\n<li>“每天阅读多长时间”的计划，一般来说最好每天阅读时间在半小时以上，而且时间不要过于分散。</li>\n<li>“多少天读完一个主题”的计划</li>\n<li>“一年阅读多少本书”的计划。</li>\n</ol>\n<p>从以下四个方面拓展自己的阅读兴趣：</p>\n<ol>\n<li>发掘自己感兴趣的话题并投入阅读。</li>\n<li>积极发现和创造需求</li>\n<li>关注热点话题和热门图书</li>\n<li>保持对前沿信息的关注</li>\n</ol>\n</li>\n<li><p>眼见大厦倾，又见高楼起<br>实体书店/网络电商的</p>\n</li>\n<li><p>书非借不能读也</p>\n</li>\n<li><p>整理自己的书架</p>\n<ol>\n<li>整理的过程就是一个接触、回顾或想象的过程，可以拉近人与书的距离，令人产生阅读的欲望。</li>\n<li>将书籍按一定的顺序排列在书架上，使自己对书籍一目了然，可以随时开始阅读。</li>\n</ol>\n</li>\n<li><p>书山寻路，结伴同行<br> 古人云：“与善人居，如入兰芷之室，久而不闻其香，则与之化矣；与恶人居，如入鲍鱼之肆，久而不闻其臭，亦与之化矣。”</p>\n<p> 要跳出自己的见解，就要先放空自己的见解，只有这样才能身处高位，全面理解一个事物</p>\n</li>\n<li><p>三条阅读之路</p>\n<ol>\n<li>信马由缰、「兴尽而返」的漫步之路。</li>\n<li>成岭成峰、「月迷津渡」的求索之路</li>\n<li>山登绝顶、千仞振衣的摩天之路</li>\n</ol>\n</li>\n</ol>\n<p>欢喜时，读书如同拈花微笑，然后从云端跌入尘下。<br>悲伤时，读书恰似长歌当哭，然后从伤口长出新芽。<br>早起读书如清风拂面，获得一天的活力。<br>睡前读书如温水浸沐，洗去满心的浮躁。<br>读一本好书，如遇故人，三生有幸。</p>\n<p>在喧闹而寂静的旅途上不期而遇，结伴同行。<br>不必将它变成自己的影子，也不必让它融入自己的呼吸。<br>一起经风沐雨、穿林过涧，一起遇山开路、遇水搭桥。<br>也许在某一个路口悄然离别，也许一直不离不弃。<br>不断加入，也不断告别。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["阅读"],"tags":[]},{"title":"基于 Docker 的练习","url":"http://jocolorful.com/2022/10/30/运维-基于Docker的练习/","content":"<h1 id=\"Docker-是什么？\"><a href=\"#Docker-是什么？\" class=\"headerlink\" title=\"Docker 是什么？\"></a>Docker 是什么？</h1><h1 id=\"Docker-的一些基本命令\"><a href=\"#Docker-的一些基本命令\" class=\"headerlink\" title=\"Docker 的一些基本命令\"></a>Docker 的一些基本命令</h1><h1 id=\"Docker-的进阶操作\"><a href=\"#Docker-的进阶操作\" class=\"headerlink\" title=\"Docker 的进阶操作\"></a>Docker 的进阶操作</h1><h1 id=\"Docker-实践\"><a href=\"#Docker-实践\" class=\"headerlink\" title=\"Docker 实践\"></a>Docker 实践</h1><h1 id=\"Docker-的进阶操作-1\"><a href=\"#Docker-的进阶操作-1\" class=\"headerlink\" title=\"Docker 的进阶操作\"></a>Docker 的进阶操作</h1><h2 id=\"1-Etcd-高可用的键值存储仓库\"><a href=\"#1-Etcd-高可用的键值存储仓库\" class=\"headerlink\" title=\"1. Etcd - 高可用的键值存储仓库\"></a>1. Etcd - 高可用的键值存储仓库</h2><blockquote>\n<p>CoreOS 团队发起的开源的<font color=\"red\">分布式键值存储仓库</font>，主要的功能包含信息管理和服务发现。</p>\n</blockquote>\n<ol>\n<li>支持 RESTful API和 gRPC API；</li>\n<li>安全：基于TLS方式实现安全连接访问；</li>\n<li>快速：支持每秒一万次的并发写操作，超时控制在毫秒量级；</li>\n<li>可靠：支持分布式结构，基于Raft算法实现一致性。</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["运维"],"tags":[]},{"title":"回渝初体验","url":"http://jocolorful.com/2022/10/24/生活-回渝初体验/","content":"<p>回家整整一个月了，今天是 1024 程序员节。公司也有一些小活动，和刘俭玩你画我猜。我们两个大大怨种抽奖品不是「谢谢惠顾」、「五个俯卧撑」就是「抽奖小助手」，可能抽奖盒子里都是些整人的玩意。</p>\n<h1 id=\"回家工作篇\"><a href=\"#回家工作篇\" class=\"headerlink\" title=\"回家工作篇\"></a>回家工作篇</h1><p>在广域工作，初体验并不是特别好，但我相信只是暂时的。一入职就被借调，这边的 leader 刷新了我的认知「doge」，也许是不应该在 blog 里碎碎念。好在这周过了就走了。</p>\n<p>这里的外包同学很多，大多都不太愿意加班，也许是拿得很低就不太想额外付出太多，虽然我也有五年没写 Vue 了，但是一些编程的思想是通用的，所以某种程度上，我觉得这个月表现还行。学习的步履还是不能停止。这个月里我虽然是新人，但除了本职的业务工作以外也做了许多其他的技术输出、文档沉淀，其中包括：</p>\n<ul>\n<li>重拾 uni-app，总结出两篇关于 uni-app 打包的文章；同时我写了一键打包的脚本，优化了打包流程。</li>\n<li>修复了 ESLint 问题；</li>\n<li>制定了 Git 的流程规范 &amp; 文档规范；</li>\n<li>梳理了关于 CICD 的构建流程；</li>\n<li>没有完成的是新人的一些入职指南。</li>\n</ul>\n<p>同时我还发现工业应用还存在的一些问题：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 管理混乱（doge）；</li>\n<li><input disabled=\"\" type=\"checkbox\"> 代码质量参差不齐；</li>\n<li><input disabled=\"\" type=\"checkbox\"> 没有文档沉淀、组件沉淀，各个小组间缺乏沟通；各系统也没有使用说明；</li>\n<li><input disabled=\"\" type=\"checkbox\"> 流程混乱、没有接口评审，很多时候都是后端在主导；无效开发（业务不熟悉、一些不需要的模块二开、没有意义的开发，熟悉业务模块的后端在需求会上也没有提前指出）；</li>\n<li><input disabled=\"\" type=\"checkbox\"> 产品的原型图也给的不及时，到了需求会才知道原型是什么样;</li>\n<li><input disabled=\"\" type=\"checkbox\"> 前后端没有监控;</li>\n<li><input disabled=\"\" type=\"checkbox\"> 研发没有学习时间，需求倒排；</li>\n<li><input disabled=\"\" type=\"checkbox\"> 新人在做需求的时候，过于追求速度，缺少一些抽象逻辑。</li>\n</ul>\n<p>我还有一些遗留的问题包括：</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> GUC 的权限梳理和 kcloack 的关系；</li>\n</ul>\n<h1 id=\"回家生活篇\"><a href=\"#回家生活篇\" class=\"headerlink\" title=\"回家生活篇\"></a>回家生活篇</h1><p>我租了一个一居室，买了花瓶/电视/小桌子，养了小金鱼。基本上每两周会换一次花，每两周会回老家一次。我还一个人去了「九曲河湿地公园」。</p>\n<p>基本上我会每天 7:40 左右起床，8:10 出门，然后步行出门上班。在重庆步行是有一点点痛苦的。日行万步基本不是问题。下班的早的话我就会去吃烧烤，嘿嘿嘿。</p>\n<p>这个月里我还见了九年没有见面的同学（他从西宁回来）、我们三小趴菜一起玩了电玩，吃了烧烤、抓了两只娃娃。</p>\n<p>而金百万呢？被我爸妈养得很好，早晚都会有喵条吃。她似乎越来越脱离野喵属性，开始变得亲人了（做过飞机的喵喵，就是见过世面哦）</p>\n<p>二爷爷生了很严重的病，也许不能祝他早日康复了，希望他能少一点痛苦。</p>\n<p>All is going on，未完待续…</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"uni-app 打包 - Android 篇","url":"http://jocolorful.com/2022/10/19/前端 - uni-app 打包 Andriod 篇/","content":"<p>安卓打包相较于 iOS 更为简单</p>\n<h1 id=\"Mac-打包-apk\"><a href=\"#Mac-打包-apk\" class=\"headerlink\" title=\"Mac 打包 apk\"></a>Mac 打包 apk</h1><h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>JRE 下载地址：<a href=\"https://www.java.com/en/download/\" target=\"_blank\" rel=\"noopener\">https://www.java.com/en/download/</a></p>\n<h2 id=\"密钥生成\"><a href=\"#密钥生成\" class=\"headerlink\" title=\"密钥生成\"></a>密钥生成</h2><p>keytool -genkey -alias 【密钥名称】 -keyalg RSA -keysize 2048 -validity 36500 -keystore mismould.keystore<br><img src=\"https://tce-1304962210.cos.ap-chongqing.myqcloud.com/tce-kbms/kbms-prod/8be27b74ddf44506be2bd2933dcae947_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_bb782fb4-5105-4a30-aadc-f1e82742f01b.png\" alt=\"tcekbmskbmsprod8be27b74ddf44506be2bd2933dcae947__bb782fb451054a30aadcf1e82742f01b.png\"></p>\n<h2 id=\"查看-SHA1-信息\"><a href=\"#查看-SHA1-信息\" class=\"headerlink\" title=\"查看 SHA1 信息\"></a>查看 SHA1 信息</h2><p>keytool -list -v -keystore 【密钥名称.keystore】<br><img src=\"https://tce-1304962210.cos.ap-chongqing.myqcloud.com/tce-kbms/kbms-prod/bc64fee3fdda4ae89554ca09d19c46e3_image.png\" alt=\"tcekbmskbmsprodbc64fee3fdda4ae89554ca09d19c46e3_image.png\"></p>\n<h2 id=\"获取-keystore\"><a href=\"#获取-keystore\" class=\"headerlink\" title=\"获取 keystore\"></a>获取 keystore</h2><p>执行命令生成是，keystore 的位置位于执行命令的当前路径，ls 即可看见。</p>\n<h2 id=\"将-key-配置在-dev-cloud\"><a href=\"#将-key-配置在-dev-cloud\" class=\"headerlink\" title=\"将 key 配置在 dev.cloud\"></a>将 key 配置在 dev.cloud</h2><p>将 SHA1 配置在【应用中心】-&gt; 【离线打包Key管理】</p>\n<p><img src=\"https://tce-1304962210.cos.ap-chongqing.myqcloud.com/tce-kbms/kbms-prod/cd2256358c5d4986adcd146ae0dd0366_image.png\" alt=\"tcekbmskbmsprodcd2256358c5d4986adcd146ae0dd0366_image.png\"></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"uni-app 打包 - iOS 篇","url":"http://jocolorful.com/2022/10/14/前端 - uni-app 打包 - iOS 篇/","content":"<h1 id=\"uni-app-打包-iOS-篇\"><a href=\"#uni-app-打包-iOS-篇\" class=\"headerlink\" title=\"uni-app 打包 - iOS 篇\"></a>uni-app 打包 - iOS 篇</h1><p><strong>证书</strong> ：对 App 的认证（类似于 Https 的证书）<br><strong>标识符</strong>：应用的唯一 ID<br><strong>描述文件</strong>：内含证书 + 调试设备信息</p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><ol>\n<li>Hbuilder 下载</li>\n<li>苹果开发者账号，并且加入 iOS Developer Program，我们的团队是 <strong>Wide Area Mingdao Digital Technology</strong>。告知后，Apple 会像你的邮箱发送一封邀请邮件（需要等一下 or 在垃圾邮箱、广告里多看看）。</li>\n</ol>\n<h1 id=\"Step1：应用-ID-的申请\"><a href=\"#Step1：应用-ID-的申请\" class=\"headerlink\" title=\"Step1：应用 ID 的申请\"></a>Step1：应用 ID 的申请</h1><p><font color=\"red\">App ID = 应用 ID =  Identifier = Bundle ID </font></p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/ae9c05f4b59605cecf83cfd3b3aea5c5.png\">\n\n<p><strong>下一步 👇</strong></p>\n<img src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/e23230bc7d2db789ca656c042c584dd5.png\" width=\"400px\">\n\n<p><strong>下一步 👇</strong></p>\n<img width=\"400px\" src=\"https://tce-1304962210.cos.ap-chongqing.myqcloud.com/tce-kbms/kbms-prod/ad080e785cb2419b8e2ece5b2a291a7b_image.png\">\n\n<p>接下来需要选择应用需要使用的服务（如需要使用到消息推送功能，则选择 Push Notifications），然后点击 「Continue」<strong>注意：如果 App 用不到的服务一定不要勾选，以免响应审核</strong></p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/35b2007afc9e32009b6472d8358c6d2a.png\">\n\n<p>确认后选择提交，回到 identifiers 页面即可看到刚创建的 App ID</p>\n<h1 id=\"Step2：生成证书请求文件\"><a href=\"#Step2：生成证书请求文件\" class=\"headerlink\" title=\"Step2：生成证书请求文件\"></a>Step2：生成证书请求文件</h1><p>不管是申请开发 (Development) 证书还是发布 (Distribution) 证书，都需要使用证书请求 (.certSigningRequest) 文件，证书请求文件需在 Mac OS上使用 「钥匙串访问」 工具生成。</p>\n<p>使用「command + k」唤起聚焦搜索输入「钥匙串访问」即可唤起。</p>\n<p>打开菜单 「钥匙串访问-&gt;证书助理」，选择「从证书颁发机构请求证书…」：<br><img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/890875c122389dcaec03850081acc65e.png\"></p>\n<p>打开创建请求证书页面，在页面中输入用户邮件地址(Apple 邮箱即可)、常用名称，选择<font color=\"red\">存储到磁盘</font>，点击继续：</p>\n<img width=\"400px\" src=\"https://tce-1304962210.cos.ap-chongqing.myqcloud.com/tce-kbms/kbms-prod/b7af4b7ccbf74762b47c67e344308cc1_image.png\">\n\n<p>文件名称为“<strong><font color=\"green\">CertificateSigningRequest.certSigningRequest</font></strong>”，选择保存位置，点击 「存储」 将证书请求文件保存到指定路径下，后面申请开发(Development)证书和发布(Production)证书时需要用到。</p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/0b6a336b56624d306da7625099a3db51.png\">\n\n<h1 id=\"Step3：开发-Development-证书\"><a href=\"#Step3：开发-Development-证书\" class=\"headerlink\" title=\"Step3：开发(Development)证书\"></a>Step3：开发(Development)证书</h1><p><font color=\"red\">certficicate </font></p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/74051174ffd099862d2d28d5657d9e18.png\">\n\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/e07ae5f61ee512c71574e0c2a910d8b6.png\">\n\n<p>接下来需要用到刚刚生成的证书请求文件，点击「Choose File」…”选择刚刚保存到本地的 “<font color=\"green\">CertificateSigningRequest.certSigningRequest</font>”文件，点击 「Continue」 生成证书文件：</p>\n<p>生成证书后选择 Download 将证书下到本地 (ios_development.cer)：</p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/36cdfc238a95e7409a0f05cfed68acff.png\">\n\n<p>双击保存到本地的 ios_development.cer 文件，会自动打开 「钥匙串访问” 工具说明导入证书成功，可以在证书列表中看到刚刚导入的证书，接下来需要导出 <font color=\"red\">.p12 </font>证书文件，选中导入的证书，右键选择 「导出」…：</p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/bb24badaf2becb672559bc289494833f.png\">\n\n<img width=\"400px\" src=\"https://tce-1304962210.cos.ap-chongqing.myqcloud.com/tce-kbms/kbms-prod/8cc7f62f865142ad95081925f4d5ebd6_image.png\">\n\n<p>如果无法选中 P12 格式的，可以参考这篇文章解决：<a href=\"https://blog.csdn.net/weixin_44237029/article/details/120560958\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_44237029/article/details/120560958</a></p>\n<p>接下来，输入密码以及确认密码（这个过程有点像 https 的加签 ）</p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/7a1a08323e9216f2347911e5773e3b23.png\">\n\n<h1 id=\"Step4：描述文件\"><a href=\"#Step4：描述文件\" class=\"headerlink\" title=\"Step4：描述文件\"></a>Step4：描述文件</h1><p>Profile 文件，用以证书 + 调试设备的描述</p>\n<h2 id=\"4-1-UDID-设备标识的获取\"><a href=\"#4-1-UDID-设备标识的获取\" class=\"headerlink\" title=\"4.1 UDID 设备标识的获取\"></a>4.1 UDID 设备标识的获取</h2><p>填写设备名称 和 UDID（设备标识）：</p>\n<p>UDID 可以通过 <strong>蒲公英提供的网址获取：</strong> <a href=\"https://www.pgyer.com/tools/udid\" target=\"_blank\" rel=\"noopener\">https://www.pgyer.com/tools/udid</a><br><img width=\"400px\" src=\"https://tce-1304962210.cos.ap-chongqing.myqcloud.com/tce-kbms/kbms-prod/0f75a7c11e5d4f3dbf0ee809c5ac6660_wecom-temp-203381-f08a572b44c2594800a3ca8f19b69e97.jpg\"></p>\n<p>点击下载描述文件后到 设置-&gt; 已下载描述文件选择信任。信任之后再打开蒲公英网址即可。</p>\n<h2 id=\"4-2-添加调试设备\"><a href=\"#4-2-添加调试设备\" class=\"headerlink\" title=\"4.2 添加调试设备\"></a>4.2 添加调试设备</h2><p>在证书管理页面选择「Devices」，可查看到已添加的所有设备信息，点击页面上的加号来添加一个新设备：</p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/78882f6762f85cd392a69e0cea3fb7e1.png\">\n\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/b89afcb4f7da511cfb9767b9c79a4c29.png\">\n\n<h2 id=\"4-3-申请开发描述（profile）文件\"><a href=\"#4-3-申请开发描述（profile）文件\" class=\"headerlink\" title=\"4.3 申请开发描述（profile）文件\"></a>4.3 申请开发描述（profile）文件</h2><p><font color=\"red\">描述文件主要是对「证书」 和「调试设备的」说明。</font></p>\n<p>在证书管理页面选择 「Profiles」，可查看到已申请的所有描述文件，点击页面上的加号来添加一个新的描述文件：</p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/0e5ff848e1e83facf20455f4705d0aa4.png\">\n\n<p>在 「Development」 栏下选中 「iOS App Development」，点击「Continue」按钮：</p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/e0dfd711b73264cc18cd551359f40a7e.png\">\n\n<p><strong>接下来选择需要绑定的<font color=\"red\">证书</font>，这里建议直接勾选 「Select All」，点击「Continue」：</strong></p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/b3b64702a3cf4857c97047c7a3f54c92.png\">\n\n<p>选择授权<font color=\"red\">调试设备</font>，这里建议直接勾选 「Select All」，点击 「」「Continue」：</p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/80777452245069ebae852fc811b0956d.png\">\n\n<p>输入描述文件的名称（如“HelloUniAppProfile”）, 点击「Generate」生成描述文件：</p>\n<img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/47aecc44fa2367e99876b05b93dc4feb.png\">\n\n<p>点击「Download」下载保存开发描述文件（文件后缀为 .mobileprovision）<br><img width=\"400px\" src=\"https://img-cdn-tc.dcloud.net.cn/uploads/article/20191112/bbdbd61cb97195384e28098298e9d949.png\"></p>\n<h1 id=\"Step5：如何添加调试设备？\"><a href=\"#Step5：如何添加调试设备？\" class=\"headerlink\" title=\"Step5：如何添加调试设备？\"></a>Step5：如何添加调试设备？</h1><p>添加调试设备实际上是对描述文件的更新，添加 Device 之后，在对 Profile 文件进行更新。<br><img width=\"400px\" src=\"https://tce-1304962210.cos.ap-chongqing.myqcloud.com/tce-kbms/kbms-prod/209ba9a496ff4151b9ecc944530f7479_image.png\"></p>\n<img width=\"400px\" src=\"https://tce-1304962210.cos.ap-chongqing.myqcloud.com/tce-kbms/kbms-prod/d68253f134734937857e25822cda5c9c_image.png\">\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"手写代码","url":"http://jocolorful.com/2022/09/16/前端-手写代码/","content":"<h1 id=\"节流与防抖\"><a href=\"#节流与防抖\" class=\"headerlink\" title=\"节流与防抖\"></a><a href=\"https://zhuanlan.zhihu.com/p/38313717\" target=\"_blank\" rel=\"noopener\">节流与防抖</a></h1><h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> time = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">  clearTimeout(timer)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Date</span>.now() - time &lt; delay) &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">      time = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \ttimer = setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">    \t\tfn.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">    \t&#125;, delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> log =<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> debounceTask = throttle(log, <span class=\"number\">3000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, debounceTask)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f, interval = <span class=\"number\">1000</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> handler = <span class=\"literal\">null</span> <span class=\"comment\">//handler</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回闭包保持对 handler 的引用</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果不返回闭包，那么 handler 会被回收，又会生成 setTimeout，所以没有防抖效果</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler) &#123;</span><br><span class=\"line\">      clearTimeout(handler); <span class=\"comment\">//</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">    handler = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 如果没有 handler 则注册 setTimeout 事件</span></span><br><span class=\"line\">      <span class=\"comment\">//使用appy一方面是为了传入arg参数</span></span><br><span class=\"line\">      <span class=\"comment\">//一方面是为了改变 this 的指向</span></span><br><span class=\"line\">      <span class=\"comment\">//否则,执行函数指向是 window 而不是 input dom对象了.</span></span><br><span class=\"line\">      f.apply(<span class=\"keyword\">this</span>, arg);</span><br><span class=\"line\">      clearTimeout(handler);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(arg, <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;, interval)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数柯里化\"><a href=\"#函数柯里化\" class=\"headerlink\" title=\"函数柯里化\"></a>函数柯里化</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curried</span>(<span class=\"params\">...args1</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 「抵达」函数实际的需要的参数长度</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args1.length &gt;= fn.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, [...args1])</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 为撒小于的时候才递归呢？</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.apply(<span class=\"keyword\">this</span>, [...args1, ...args2])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"手写-bind\"><a href=\"#手写-bind\" class=\"headerlink\" title=\"手写 bind\"></a>手写 bind</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.mybind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...rest</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.apply(context, [...args, ...rest])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>, <span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">log()</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'11'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = log.mybind(obj)()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"手写-new\"><a href=\"#手写-new\" class=\"headerlink\" title=\"手写 new\"></a>手写 new</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_new</span>(<span class=\"params\">obj, ...rest</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newTarget = <span class=\"built_in\">Object</span>.create(obj.prototype) <span class=\"comment\">// 新创建一个对象，将对象的 prototype 赋给 target</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = obj.apply(newObj, rest) <span class=\"comment\">//为这个对象分配属性和防范</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果执行结果有返回值并且是一个对象, 返回执行的结果, 否则, 返回新创建的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span> ? result : newTarget</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"实现一个-set\"><a href=\"#实现一个-set\" class=\"headerlink\" title=\"实现一个 set\"></a>实现一个 set</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySet</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.set = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> size() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.set.length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  insert(n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.map.has(n)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.set.push(n)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.map.set(n, <span class=\"keyword\">this</span>.set.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  remove(val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.map.has(val)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 找到要删除的值的下标</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> deleteIndex = <span class=\"keyword\">this</span>.map.get(val)</span><br><span class=\"line\">      <span class=\"comment\">// 得到最后一个元素</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastVal = <span class=\"keyword\">this</span>.set.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 用最后一个数「代替」要删除的值</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.set[deleteIndex] = lastVal</span><br><span class=\"line\">      <span class=\"comment\">// 更新本来是最后一个元素在 map 中记录的下标</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.map.set(lastVal, deleteIndex)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 在map中删除</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.map.delete(val)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果没有这个值就返回false</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getRadom() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组的操作\"><a href=\"#数组的操作\" class=\"headerlink\" title=\"数组的操作\"></a>数组的操作</h1><h2 id=\"扁平化\"><a href=\"#扁平化\" class=\"headerlink\" title=\"扁平化\"></a>扁平化</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flatten</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> acc.concat(<span class=\"built_in\">Array</span>.isArray(cur) ? flatten(cur) : cur), [])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"去重\"><a href=\"#去重\" class=\"headerlink\" title=\"去重\"></a>去重</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uniq</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...new <span class=\"built_in\">Set</span>(arr)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], b = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// filter() 方法创建一个新数组，其包含通过所提供函数实现的测试的所有元素。</span></span><br><span class=\"line\"><span class=\"comment\">// const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];</span></span><br><span class=\"line\"><span class=\"comment\">// const result = words.filter(word =&gt; word.length &gt; 6);</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交集\"><a href=\"#交集\" class=\"headerlink\" title=\"交集\"></a>交集</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uniq</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr1.filter(<span class=\"function\"><span class=\"params\">num</span>=&gt;</span> arr2.includes(num))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"并集\"><a href=\"#并集\" class=\"headerlink\" title=\"并集\"></a>并集</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">union</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...new <span class=\"built_in\">Set</span>([...arr1, ...arr2])]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"差集\"><a href=\"#差集\" class=\"headerlink\" title=\"差集\"></a>差集</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">difference</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...arr1, ...arr2].filter(<span class=\"function\"><span class=\"params\">num</span>=&gt;</span> !arr1.includes(num) || !arr2.includes(num))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> deepClone = <span class=\"function\">(<span class=\"params\">value, hash = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> value</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(value)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(value)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> value.constructor()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hash.get(value))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash.get(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash.set(value, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(value.hasOwnProperty(k))&#123;</span><br><span class=\"line\">      obj[k] = deepClone(value[k], hash);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Promise-系列\"><a href=\"#Promise-系列\" class=\"headerlink\" title=\"Promise 系列\"></a>Promise 系列</h1><h2 id=\"手写-Promise\"><a href=\"#手写-Promise\" class=\"headerlink\" title=\"手写 Promise\"></a>手写 Promise</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PENDING = <span class=\"string\">'pending'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> RESOLVED = <span class=\"string\">'resoved'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> REJECTED = <span class=\"string\">'reject'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyPromise</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(fn) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = PENDING</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callBacks = []</span><br><span class=\"line\"></span><br><span class=\"line\">    resolve = <span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.value = value</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.status = RESOLVED</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callBacks.forEach(<span class=\"function\">(<span class=\"params\">fn</span>)=&gt;</span> fn(<span class=\"keyword\">this</span>.value))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    reject = <span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.reason = err</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.status = REJECTED</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callBacks.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn(<span class=\"keyword\">this</span>.reason))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      fn(resolve, reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  then = <span class=\"function\">(<span class=\"params\">onResolve, onReject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === RESOLVED) &#123;</span><br><span class=\"line\">      onResolve(<span class=\"keyword\">this</span>.value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === REJECTED) &#123;</span><br><span class=\"line\">      onReject(<span class=\"keyword\">this</span>.reason)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === PENDING) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callBacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">'hello world'</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手写-PromiseAll\"><a href=\"#手写-PromiseAll\" class=\"headerlink\" title=\"手写 PromiseAll\"></a>手写 PromiseAll</h2><p>有一个错误都会错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseAll</span> (<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovlve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((key, index) <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Promise</span>.resolve(arr[i]).then(<span class=\"function\">(<span class=\"params\">result</span>)=&gt;</span> &#123;</span><br><span class=\"line\">        count++</span><br><span class=\"line\">        res[index] = result</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count === arr.length) &#123;</span><br><span class=\"line\">          resovlve(res)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span> &#123;</span><br><span class=\"line\">        reject()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手写-allSettled\"><a href=\"#手写-allSettled\" class=\"headerlink\" title=\"手写 allSettled\"></a>手写 allSettled</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">MyPromise.allSettled = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> promises = [].slice.call(values)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyPromise(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [], count = <span class=\"number\">0</span></span><br><span class=\"line\">    promises.forEach(<span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">      MyPromise.resolve(promise).then(<span class=\"function\"><span class=\"params\">value</span>=&gt;</span>&#123;</span><br><span class=\"line\">        result.push(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'fulfilled'</span>, value&#125;)</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">        result.push(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'rejected'</span>, <span class=\"attr\">value</span>: err&#125;)</span><br><span class=\"line\">      &#125;).finally(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(++count === promise.length) &#123;</span><br><span class=\"line\">          resolve(result)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"手写-promiseRace\"><a href=\"#手写-promiseRace\" class=\"headerlink\" title=\"手写 promiseRace\"></a>手写 promiseRace</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">promiseRace</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resovlve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ((key, index) <span class=\"keyword\">of</span> args) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Promise</span>.resovlv(args[i]).then(resolve, reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  on (name, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name === <span class=\"string\">'newListener'</span>) &#123;</span><br><span class=\"line\">      callback()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callbacks = <span class=\"keyword\">this</span>.events[name] || []</span><br><span class=\"line\">    callbacks.push(callback)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events[name] = callbacks</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  off (name, callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callbacks = <span class=\"keyword\">this</span>.events[name] || []</span><br><span class=\"line\">    callbacks = callbacks.filter(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span> fn !== callbacks)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.events[name] = callbacks</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  emit(name, ...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> callbacks = <span class=\"keyword\">this</span>.events[name] || []</span><br><span class=\"line\">    callbacks.forEach(<span class=\"function\"><span class=\"params\">cb</span>=&gt;</span> cb(args))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  once(name, callback) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrap</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">      callback(args)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.off(name, callback)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.on(name, wrap)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> events = <span class=\"keyword\">new</span> EventEmitter()</span><br><span class=\"line\"></span><br><span class=\"line\">events.on(<span class=\"string\">\"newListener\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`eventName`</span>, eventName)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> event = <span class=\"keyword\">new</span> EventEmitter()</span><br><span class=\"line\"><span class=\"keyword\">const</span> handle = <span class=\"function\">(<span class=\"params\">...pyload</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(pyload);</span><br><span class=\"line\"></span><br><span class=\"line\">event.on(<span class=\"string\">\"click\"</span>, handle)</span><br><span class=\"line\">event.emit(<span class=\"string\">\"click\"</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">event.remove(<span class=\"string\">\"click\"</span>, handle)</span><br><span class=\"line\"></span><br><span class=\"line\">event.once(<span class=\"string\">\"dbclick\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"click\"</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">event.emit(<span class=\"string\">\"dbclick\"</span>, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"LRU-缓存\"><a href=\"#LRU-缓存\" class=\"headerlink\" title=\"LRU 缓存\"></a>LRU 缓存</h1><p>// 最近最少使用，最少使用的在前面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LRUCache</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.max = max</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keys = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cache = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> = (k) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cache[k]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.remove(<span class=\"keyword\">this</span>.keys, k)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.keys.push(k)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.cache[k]</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  put = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cache[k]) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keys.push(k)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  put 操作为啥会超出长度呢，则要将最开始的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.keys.length &gt; <span class=\"keyword\">this</span>.max) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.cache[<span class=\"keyword\">this</span>.keys[<span class=\"number\">0</span>]]</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.keys.shift()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cache[k] = v</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  remove = <span class=\"function\">(<span class=\"params\">arr, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> index = arr.indexOf(item)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr.splice(index, <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"简易版的-ORM\"><a href=\"#简易版的-ORM\" class=\"headerlink\" title=\"简易版的 ORM\"></a>简易版的 ORM</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 约定：</span></span><br><span class=\"line\"><span class=\"comment\">// title数据类型为String</span></span><br><span class=\"line\"><span class=\"comment\">// userId为主键，数据类型为Number</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = [</span><br><span class=\"line\">  &#123;<span class=\"attr\">userId</span>: <span class=\"number\">8</span>,  <span class=\"attr\">title</span>: <span class=\"string\">'title1'</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">userId</span>: <span class=\"number\">11</span>, <span class=\"attr\">title</span>: <span class=\"string\">'other'</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">userId</span>: <span class=\"number\">15</span>, <span class=\"attr\">title</span>: <span class=\"literal\">null</span>&#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">userId</span>: <span class=\"number\">19</span>, <span class=\"attr\">title</span>: <span class=\"string\">'title2'</span>&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Query</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = data || []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  where(query) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cdtions = <span class=\"built_in\">Object</span>.keys(query)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"keyword\">this</span>.data.filter(<span class=\"function\">(<span class=\"params\">item</span>)=&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cdtions.every(<span class=\"function\"><span class=\"params\">key</span>=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query[key].test(item[key])</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  orderBy(key, direction) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> direction === <span class=\"string\">'desc'</span> ? b[key] - a[key] : a[key] - b[key];</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> find = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Query(origin)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找 data 中，符合条件的数据，并进行排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = find(data).where(&#123;</span><br><span class=\"line\">  <span class=\"string\">'title'</span>: <span class=\"regexp\">/\\d$/</span></span><br><span class=\"line\">&#125;).orderBy(<span class=\"string\">'userId'</span>, <span class=\"string\">'desc'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);<span class=\"comment\">// [&#123; userId: 19, title: 'title2'&#125;, &#123; userId: 8, title: 'title1' &#125;];</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"异步流程控制\"><a href=\"#异步流程控制\" class=\"headerlink\" title=\"异步流程控制\"></a>异步流程控制</h1><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Scheduler</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.count = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.run = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  add(task) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue.push(task)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  excute() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> helper = <span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.queue.length &lt;= <span class=\"keyword\">this</span>.count) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.run = <span class=\"keyword\">this</span>.queue</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.run</span><br><span class=\"line\">        ).then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.run = []</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.run = <span class=\"keyword\">this</span>.queue.splice(<span class=\"number\">0</span>, <span class=\"keyword\">this</span>.count)</span><br><span class=\"line\">      <span class=\"built_in\">Promise</span>.all(<span class=\"keyword\">this</span>.run)</span><br><span class=\"line\">      helper()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    helper()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> timeout = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve, time)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> scheduler = <span class=\"keyword\">new</span> Scheduler()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> addTask = <span class=\"function\">(<span class=\"params\">time, order</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  scheduler.add(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> timeout(time)).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(order))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addTask(<span class=\"number\">1000</span>, <span class=\"string\">'1'</span>)</span><br><span class=\"line\">addTask(<span class=\"number\">500</span>, <span class=\"string\">'2'</span>)</span><br><span class=\"line\">addTask(<span class=\"number\">300</span>, <span class=\"string\">'3'</span>)</span><br><span class=\"line\">addTask(<span class=\"number\">400</span>, <span class=\"string\">'4'</span>)</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"面试常考的 CSS 问题","url":"http://jocolorful.com/2022/09/15/CSS-面试常考的 CSS 问题/","content":"<ol>\n<li><p><a href=\"https://juejin.cn/post/6844903882007511048\" target=\"_blank\" rel=\"noopener\">用纯 CSS 实现三角形</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#demo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: transparent transparent red transparent;</span><br><span class=\"line\">  //原理，牢记 border 的值是从 border-top 顺时针的</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>样式权重计算规则</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">important 最高，内敛样式 1000 &gt; id  1000 &gt;  类/伪/属性 样式 100 &gt; 标签/伪元素 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6905539198107942919#heading-3\" target=\"_blank\" rel=\"noopener\">CSS 的继承</a></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">无继承属性：布局/定位/宽高相关，总结一下就是影响文档流</span><br><span class=\"line\">有继承属性：文本颜色、大小、行高之类</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>display 的属性值及其作用？</p>\n<ol>\n<li><strong>block</strong></li>\n<li><strong>inline</strong>：不能设置宽高</li>\n<li><strong>inline-block</strong></li>\n</ol>\n</li>\n<li><p>隐藏元素的方法有哪些？</p>\n<ol>\n<li><code>display: none;</code> 渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件</li>\n<li><code>visibility: hidden;</code> 元素在页面中仍占据空间，但是<strong>不会响应</strong>绑定的监听事件。</li>\n<li><code>opacity: 0;</code>将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且<strong>能够响应</strong>元素绑定的监听事件。</li>\n</ol>\n</li>\n<li><p>link 和 @import 的区别？</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>link</th>\n<th>@import</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CSS/RSS</td>\n<td>CSS</td>\n</tr>\n<tr>\n<td>页面加载时，CSS 同步载入</td>\n<td>页面加载完成时，资源才载入（比较实用特殊样式的字体</td>\n</tr>\n<tr>\n<td>可以通过 JS 操作 DOM</td>\n<td>不可以通过 JS 操作 DOM</td>\n</tr>\n</tbody></table>\n<ol start=\"7\">\n<li><p>transition 和 animation 的区别？<br>transition 强调过渡、而 animation 强调动画</p>\n</li>\n<li><p>display:none 与 visibility:hidden 的区别</p>\n<ol>\n<li><code>display:none;</code><ol>\n<li>在页面 DOM 树是完全不可见的，渲染时不占据任何空间，但是在 Chrome 的审查面版可以看见，</li>\n<li>非继承属性：子节点修改dislay: block 之类的也不会显示出来</li>\n<li>修改值会造成重排</li>\n</ol>\n</li>\n<li><code>visibility:hidden;</code><ol>\n<li>占据 DOM 的空间，只是内容不显示，</li>\n<li>继承属性：修改子节点的属性可显示出来。</li>\n<li>修改值会造成重绘</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>「伪元素」和「伪类」的区别和作用？</p>\n<ol>\n<li>伪元素<ol>\n<li>会产生额外的元素</li>\n<li>两个冒号：常见的伪元素有 before/after/firs-letter/first-line</li>\n</ol>\n</li>\n<li>伪类：额外的样式<ol>\n<li>添加额外的样式</li>\n<li>一个冒号：一般 hover/focus/first-child 之类的</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>对于盒模型的理解</p>\n<ol>\n<li>IE 盒模型：width=padding/border/content</li>\n<li>标准盒模型：width=content</li>\n</ol>\n</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"面试经历","url":"http://jocolorful.com/2022/09/15/前端-面试经历/","content":"<h1 id=\"离职原因\"><a href=\"#离职原因\" class=\"headerlink\" title=\"离职原因\"></a>离职原因</h1><p>Just let it go~</p>\n<h2 id=\"offer-情况\"><a href=\"#offer-情况\" class=\"headerlink\" title=\"offer 情况\"></a>offer 情况</h2><p>最终选择了重庆吉利，薪资肯定和北上广肯定比不了。四五月份的时候就很想走了，各中原因导致战线拉得很长。<strong>这个期间也经常问自己我对未来的职业诉求到底是什么？为了达到目标，我将要付出怎样的努力？</strong></p>\n<ol>\n<li>重庆腾讯云 offer</li>\n<li>美团 offer，base 北京</li>\n<li>吉利 offer</li>\n<li>蚂蚁因 HC 的原因无缘</li>\n</ol>\n<p>「面试造火箭」这个过程也异常煎熬；这个期间可以反馈出自己很多问题从而查漏补缺，也可以从很多经验老道的前辈学习。无论是基础知识、算法、系统设计都能反应出一个人的靠谱程度。</p>\n<p>从技术角度：要求高一点需求对项目有一定的架构能力，需要建立起一个前端工程师应该有的能力模型，如工程化/监控/性能/质量保证都有一定的认知。<br>从业务角度：作为技术我们应该关注业务指标 → ROI → 落地的业务数据 → 归因。技术本身是产品很小的一环，最终给我们带来收益 💰 的还是业务。多多思考怎么用技术为业务赋能，多做一些有意义的事～</p>\n<h1 id=\"字节-内容经营分析方向-二面挂\"><a href=\"#字节-内容经营分析方向-二面挂\" class=\"headerlink\" title=\"字节-内容经营分析方向(二面挂)\"></a>字节-内容经营分析方向(二面挂)</h1><h2 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h2><ol>\n<li><p>最近两年的业务，项目的技术栈？</p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000039157365\" target=\"_blank\" rel=\"noopener\">Monorepo 和 Lerna 的好处</a></p>\n<ol>\n<li><strong>避免重复安装包，因此减少了磁盘空间的占用，并降低了构建时间</strong>；</li>\n<li><strong>内部代码可以彼此相互引用</strong>；</li>\n<li><strong>减少重复配置</strong></li>\n</ol>\n</li>\n<li><p>可视化平台一些相关介绍</p>\n</li>\n<li><p>业务中 Node 的使用，有什么是自己主导的</p>\n</li>\n<li><p><strong>闭包</strong>（闭包的使用场景，闭包的执行和当前的函数机制。我没太明白这个啥意思）</p>\n<p> <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">闭包 - JavaScript | MDN</a></p>\n</li>\n<li><p>GC（新生代、老生代、标记清除）</p>\n</li>\n<li><p>作用域提升聊了点</p>\n</li>\n<li><p>TCP/UDP 的区别</p>\n</li>\n<li><p>http 的缺点，然后顺势提到了 https，讲一下自己了解的加密算法</p>\n</li>\n<li><p>CSS 三栏算法的实现</p>\n</li>\n<li><p>对 React、<strong>Class 组件和 Function</strong> 组件的理解以及生态</p>\n</li>\n<li><p>对 V8 的理解</p>\n</li>\n<li><p>算法题：自定义 Myset 的实现，需要 o(1)，可以借助辅助 Map</p>\n</li>\n</ol>\n<h2 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h2><p>面试官很和蔼，一上来没问技术基础，问的项目上关于 Cookie  共享的</p>\n<ol>\n<li>项目 Cookie，同域共享</li>\n<li>手写 curry</li>\n<li>手写 Promise</li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>二面挂了，从面试内容来说不是很难，没有考很难的算法。但手写代码时候卡卡的，关于柯里化和 手写 Promise 的手写其实都有看过的…（然后柯里化的实际场景我确实也没太感受出来，我理解柯里化的最强 buff 就是利用闭包做缓存？</p>\n<p>虽然都写出来了，但是费了挺大劲的 =.=。所以 coding 前还是要自己动手实践一下。</p>\n<h1 id=\"神策-营销云\"><a href=\"#神策-营销云\" class=\"headerlink\" title=\"神策-营销云\"></a>神策-营销云</h1><h2 id=\"一面-1\"><a href=\"#一面-1\" class=\"headerlink\" title=\"一面\"></a>一面</h2><ol>\n<li><p>CSS 垂直居中布局</p>\n</li>\n<li><p>position 的属性</p>\n</li>\n<li><p>React Hooks 常见的 Hooks</p>\n<ol>\n<li>useCallback 和 useMemo 的区别</li>\n<li>提了下我还没怎么搞明白的 useImperativeValue 😂</li>\n</ol>\n</li>\n<li><p>React 的 Key 作用（我回答的两个</p>\n<ol>\n<li>做 diff 算法的时候，会通过 key 和 props 来判断是否更新</li>\n<li>值得注意的是，在数组的情况下。React 会用 key 作为增删改的标志，所以如果 key 一致，可能会引起数据不对？（比如做一个todo-list）我这里回答得不好 ☹️</li>\n</ol>\n</li>\n<li><p>兄弟组件如何传值（我先简答总结了下个问题的考点：状态管理，然后可能多的去回答：</p>\n<ol>\n<li>通过数据流管理工具 Redux 之类的</li>\n<li>使用 context</li>\n<li>使用 useReducer</li>\n<li>让父组件代理传值</li>\n<li>使用 eventBus</li>\n<li>大炮打蚊子：使用 webscoket，当然这只是开个玩笑 😂</li>\n</ol>\n</li>\n<li><p>手写 deepClone</p>\n<ol>\n<li>数组有些小问题，面试官提醒写出来了</li>\n</ol>\n</li>\n<li><p>手写 PromiseAll</p>\n</li>\n<li><p>简单聊了下 Eventloop</p>\n</li>\n<li><p>async/await  的原理</p>\n<ol>\n<li><p>我先说是 Generator 的语法糖吧。再说：有人的说法不是 Generator 的语法糖，我也不知道该怎么回答你 😂，那你的理解呢？</p>\n</li>\n<li><p>面试官：我们知道 Generator 需要调用 next 方法才能有返回值，await 对这个进行了封装，其实想问你这个。</p>\n<p>内心OS：我好真诚啊 😂…后续查了资料，其实可以用 Generator 手写出 async/await</p>\n</li>\n</ol>\n</li>\n<li><p>关于项目的一些问题：性能守卫平台/低代码平台，其实我很想聊聊微组件市场</p>\n<ol>\n<li>我：您知道模块联邦吗？</li>\n<li>面试官：太了解了(感觉他有很好的实践？</li>\n<li>我：哦微组件市场实现的效果和模块联邦一致，但是最终技术方案没有使用模块联邦…然后没聊了….😂</li>\n</ol>\n</li>\n</ol>\n<p>两家公司都面到了 Promise</p>\n<h2 id=\"二面-1\"><a href=\"#二面-1\" class=\"headerlink\" title=\"二面\"></a>二面</h2><ul>\n<li>聊项目，性能守卫<ol>\n<li>「性能守卫」的意义</li>\n<li>设计详情 确定性与不确定性</li>\n</ol>\n</li>\n<li>聊项目，微组件市场<ol>\n<li>设计详情</li>\n<li>数据情况</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"三面-交叉面\"><a href=\"#三面-交叉面\" class=\"headerlink\" title=\"三面 - 交叉面\"></a>三面 - 交叉面</h2><ol>\n<li>最有压力的一段时间</li>\n<li>马化腾来了有个重要的需求，核心开发出车祸了着急上线怎么办？</li>\n<li>最自豪的事</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我居然被交叉面挂了，原因</p>\n<ol>\n<li>项目经验相对简单</li>\n<li>缺少做成一件事的决心 ？？</li>\n</ol>\n<p>三面的面试官一直在强调我 5 年的经验…再加上我看起来确实很显小，难受…</p>\n<h1 id=\"途家（1-2-3-面）-没有消息\"><a href=\"#途家（1-2-3-面）-没有消息\" class=\"headerlink\" title=\"途家（1/2/3 面）- 没有消息\"></a>途家（1/2/3 面）- 没有消息</h1><ol>\n<li>基础</li>\n<li>简单聊了下项目</li>\n<li>RN 是如何做性能优化的<ol>\n<li>QP 包瘦身</li>\n<li>预加载</li>\n<li>接口拆分</li>\n<li>使用 FlatList 进行性能优化</li>\n<li>从代码层面进行 SCU/Memo 处理</li>\n</ol>\n</li>\n<li>如何解决 RN 的弹窗层级关系</li>\n<li>Webpack 的构建优化</li>\n<li>如何设计一个监控系统</li>\n</ol>\n<h2 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>一面的小姐姐很喜欢问性能优化的事，怎么说呢，性能优化确实是前端应该关注的点，性能优化在网上一搜一大把 ，目前我主要是做中后台系统的建设，关注的点在于：</p>\n<ol>\n<li>在业务逻辑复杂的场景下减少平台使用者出错的可能性，提高系统易用性</li>\n<li>保证数据的正确、完整性以及数据私有性</li>\n</ol>\n<h1 id=\"FreeWheel\"><a href=\"#FreeWheel\" class=\"headerlink\" title=\"FreeWheel\"></a>FreeWheel</h1><h2 id=\"一面-2\"><a href=\"#一面-2\" class=\"headerlink\" title=\"一面\"></a>一面</h2><ol>\n<li>简单聊了下「微组件」市场，针对可能出现的问题聊了下<ol>\n<li>这个面试官不错，其他人还得给他解释半天微组件市场是啥… …</li>\n</ol>\n</li>\n<li>聊了下对 C 端和对 B 端开发的看法，如何有些地避免 bug<ol>\n<li>eslint 从某种程度可以避免</li>\n<li>严格的 CR</li>\n<li>单测和 E2E 测试应该也可以有效地避免（这个我没回答上来  😫）</li>\n</ol>\n</li>\n<li>单测的执行情况，会要求覆盖率吗？<ol>\n<li>不强制要求，一些通用的工具函数会做单测，另外就是一些关键业务做单测</li>\n<li>确实还有 E2E 的测试项目，但那个我不是很熟悉</li>\n</ol>\n</li>\n<li>针对 CI/CD 的流程进行了一些简单了解</li>\n<li>UI 库怎么打包的/怎么发版的？</li>\n</ol>\n<hr>\n<ol>\n<li><p>var、let 和 const 的区分？😅 </p>\n<ol>\n<li>如何冻结一个常量对象？Object.frezee()，面试官表示可以，我说实际使用得不多 😅</li>\n</ol>\n</li>\n<li><p>如何 deepClone 一个对象（如何判断一个数组，哎）</p>\n</li>\n<li><p>如何浅拷贝一个对象</p>\n</li>\n<li><p>React：SCU React.PureComponent， React.memo</p>\n</li>\n<li><p>React 常用的 Hooks / React 兄弟节点如何传值</p>\n</li>\n<li><p>自定义 Hooks 值得注意的地方</p>\n</li>\n<li><p>如何发起一个请求（xhr 和 fetch）</p>\n<ol>\n<li>为什么要让我描述原生的 xhr？（呜呜呜，我就XHMHTTPRequest 对象。然后那个 xhr 做一些状态值的监听？我真的记不住那个了  😅，其实我还想说值得注意的是 IE 要做兼容处理….就 面试题.next() 了</li>\n<li>fetch 的请求可以中断吗？（可以，利用 AbortController 高版本的 Node 天然支持，浏览器端需要 polyfill 处理</li>\n</ol>\n</li>\n<li><p>扯到了异步流程控制上，除了 Promise 还有哪些方案？我说 async/await、Generator？async/awai 返回的是啥？我想打死我自己，天天在 async/await 函数后面写 .then .then 这不是一个 Promise 吗？！！！！我答的 Generator ，可以再给我一次机会狡辩吗？😂</p>\n</li>\n<li><p>如何实现继承</p>\n<ol>\n<li><p>extends</p>\n</li>\n<li><p>原型链</p>\n</li>\n<li><p>构造</p>\n</li>\n<li><p>寄生</p>\n</li>\n<li><p>…下次可以谈一下 Object.create 这个</p>\n<p>还有一些其他的，其实就是这些方法组合排列…</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"二面-2\"><a href=\"#二面-2\" class=\"headerlink\" title=\"二面\"></a>二面</h2><p>项目</p>\n<h2 id=\"三面\"><a href=\"#三面\" class=\"headerlink\" title=\"三面\"></a>三面</h2><ol>\n<li>hashMap 的底层原理</li>\n<li>Leetcode 一个 medium 的题</li>\n<li>如果设计一个秒杀系统</li>\n</ol>\n<h2 id=\"四面-三个外国人，我选择死亡\"><a href=\"#四面-三个外国人，我选择死亡\" class=\"headerlink\" title=\"四面(三个外国人，我选择死亡)\"></a>四面(<strong>三个外国人，</strong>我选择死亡)</h2><ol>\n<li>hoist</li>\n<li>class 是否可以被 hoist</li>\n<li>closure</li>\n<li>how to detect the performance</li>\n<li>RBAC 模型</li>\n<li>unit test / e2eTest</li>\n<li>why change this position</li>\n</ol>\n<p>挂了，相互听不懂，视频面试， Mac 本上用 MircoSoft 的软件。还共享不了屏幕，没写代码</p>\n<h1 id=\"美团（1-2-3-HR-面）\"><a href=\"#美团（1-2-3-HR-面）\" class=\"headerlink\" title=\"美团（1/2/3/HR 面）\"></a>美团（1/2/3/HR 面）</h1><p>一二三，怼项目，一面有算法题：关于二叉树的回溯</p>\n<p>三面交叉面，聊了些和后端相关的东西</p>\n<ol>\n<li>HR 面试</li>\n<li>结婚没？打算去台湾吗？</li>\n<li>项目中的难点</li>\n<li>你有什么核心竞争力？</li>\n</ol>\n<h1 id=\"极米科技\"><a href=\"#极米科技\" class=\"headerlink\" title=\"极米科技\"></a>极米科技</h1><h2 id=\"一面-3\"><a href=\"#一面-3\" class=\"headerlink\" title=\"一面\"></a>一面</h2><ol>\n<li>极端情况下 FC 和 ClassComponent 的性能</li>\n<li>数据是如何通知视图的变更</li>\n<li>React 和 Vue 或者框架的优缺点</li>\n<li>React Hooks 的优缺点</li>\n<li>ReactClass 的优缺点</li>\n</ol>\n<p>我从函数式编程和面向对象编程分别说起，然后基于自己的理解</p>\n<h2 id=\"二面-3\"><a href=\"#二面-3\" class=\"headerlink\" title=\"二面\"></a>二面</h2><p>聊项目</p>\n<p>没消息</p>\n<h2 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>一面面试官挺有意思，具体怎么有意思不详细说了。一开始面试的时候以为自己遇到了一个青铜，结果后来发现是一个王者 👑</p>\n<h1 id=\"阿里-重庆蚂蚁\"><a href=\"#阿里-重庆蚂蚁\" class=\"headerlink\" title=\"阿里-重庆蚂蚁\"></a>阿里-重庆蚂蚁</h1><h2 id=\"一面-4\"><a href=\"#一面-4\" class=\"headerlink\" title=\"一面\"></a>一面</h2><ol>\n<li>简单聊了下项目</li>\n<li>CSS 盒模型</li>\n<li>触发 BFC 解决外边距合并的问题</li>\n<li><code>typeOf</code> 和 <code>instanceOf</code>的区别</li>\n<li>浏览器缓存机制</li>\n<li>http 协议 / 跨域处理</li>\n<li>对 B 端和 C 端的理解</li>\n<li>对统一工作流的认识</li>\n<li>俩算法（40 分钟）</li>\n</ol>\n<p>和面试官关于项目、技术什么的狂扯了将近两个小时</p>\n<h2 id=\"二面-4\"><a href=\"#二面-4\" class=\"headerlink\" title=\"二面\"></a>二面</h2><ol>\n<li>业务中遇到重难点（编辑器/视频上传效率问题）</li>\n<li>技术项目</li>\n<li>qiunkun 是如何解决微应用切换资源消耗的问题（思路完全正确! ～😄）</li>\n<li>技术项目中问题的解决思路</li>\n<li>团队中的角色/有没有开源项目（我说自己折腾的东西拿不出手 😂</li>\n<li>有没有关注新的技术/趋势（esbuild/next）啥的</li>\n</ol>\n<h2 id=\"三面-1\"><a href=\"#三面-1\" class=\"headerlink\" title=\"三面\"></a>三面</h2><p>完颜大佬</p>\n<ol>\n<li>前端技术深广度<ol>\n<li>前后端都略有涉及</li>\n<li>一些业务场景数据相关</li>\n</ol>\n</li>\n<li>业务理解度</li>\n<li>团队协作能力</li>\n</ol>\n<p>许愿蚂蚁 OC</p>\n<h1 id=\"重庆腾讯云\"><a href=\"#重庆腾讯云\" class=\"headerlink\" title=\"重庆腾讯云\"></a>重庆腾讯云</h1><h2 id=\"一二面\"><a href=\"#一二面\" class=\"headerlink\" title=\"一二面\"></a>一二面</h2><ol>\n<li>TCP 三次握手</li>\n<li>https 请求的过程</li>\n<li>了解 RPC 吗？</li>\n<li>React 状态管理相关<ol>\n<li>Redux/Context/Recoil</li>\n</ol>\n</li>\n<li>算法<ol>\n<li>位运算</li>\n<li>map</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"三面-2\"><a href=\"#三面-2\" class=\"headerlink\" title=\"三面\"></a>三面</h2><ol>\n<li>怼项目</li>\n<li>Redis 和 MySQL 的区别</li>\n<li>团队的情况，自己的一个角色</li>\n<li>未来规划</li>\n</ol>\n<h2 id=\"四面\"><a href=\"#四面\" class=\"headerlink\" title=\"四面\"></a>四面</h2><ol>\n<li>问了些工作的问题，自己怎么去处理的</li>\n</ol>\n<h2 id=\"HR-面试\"><a href=\"#HR-面试\" class=\"headerlink\" title=\"HR 面试\"></a>HR 面试</h2><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"浏览器的原理","url":"http://jocolorful.com/2022/09/14/前端-浏览器的架构/","content":"<h1 id=\"一、前置知识\"><a href=\"#一、前置知识\" class=\"headerlink\" title=\"一、前置知识\"></a>一、前置知识</h1><p>在讲浏览器架构之前，需要理解进程和线程两个概念：</p>\n<ol>\n<li>进程（process）是程序在执行过程中分配和管理资源的基本单位；</li>\n<li>线程（thread）是 CPU 调度和分派的基本单位，它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</li>\n</ol>\n<p>浏览器属于一个应用程序，而应用程序的一次执行，可以理解为计算机启动了一个进程，进程启动后，<strong>CPU 会给该进程分配相应的内存空间</strong>，当我们的进程得到了内存之后，就可以使用线程进行资源调度，进而完成我们应用程序的功能。 而在应用程序中，为了满足功能的需要，启动的进程会创建另外的新的进程来处理其他任务，这些创建出来的新的进程拥有全新的独立的内存空间，不能与原来的进程争夺内存，如果这些进程之间需要通信，可以通过 I<strong>PC 机制（Inter Process Communication）</strong>来进行。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/0.png\" alt=\"Untitled\"></p>\n<p>很多应用程序都会采取这种多进程的方式来工作，因为进程和进程之间是互相独立的它们<code>互不影响</code>，也就是说，当其中一个进程挂掉了之后，不会影响到其他进程的执行，只需要重启挂掉的进程就可以恢复运行。</p>\n<h1 id=\"二、浏览器的多进程架构\"><a href=\"#二、浏览器的多进程架构\" class=\"headerlink\" title=\"二、浏览器的多进程架构\"></a>二、<strong><strong>浏览器的多进程架构</strong></strong></h1><p>不同的浏览器使用不同的架构，以 Chrome 为例，主要的进程有4个：</p>\n<ol>\n<li>浏览器进程 (Browser Process)：负责浏览器的TAB的前进、后退、地址栏、书签栏的工作和处理浏览器的一些不可见的底层操作，比如网络请求和文件访问；</li>\n<li>渲染进程 (Renderer Process)：负责一个 Tab 内的显示相关的工作，也称渲染引擎；</li>\n<li>插件进程 (Plugin Process)：负责控制网页使用到的插件；</li>\n<li>GPU进程 (GPU Process)：负责处理整个应用程序的 GPU 任务。</li>\n</ol>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/1.png\" alt=\"Untitled\"></p>\n<p>首先，当我们是要浏览一个网页，我们会在浏览器的地址栏里输入 URL：</p>\n<ol>\n<li><code>Browser Process</code> 会向这个URL发送请求，获取这个 URL 的HTML内容，然后将 HTML 交给<code>Renderer Process</code>；</li>\n<li><code>Renderer Process</code> 解析HTML内容，解析遇到需要<strong>请求网络的资源</strong>又返回来交给<code>Browser Process</code>进行加载，同时通知<code>Browser Process</code>需要<code>Plugin Process</code>加载插件资源，执行插件代码；</li>\n<li>解析完成后，<code>Renderer Process</code>计算得到图像帧，并将这些图像帧交给<code>GPU Process</code>；</li>\n<li><code>GPU Process</code>将其转化为图像显示屏幕。</li>\n</ol>\n<h1 id=\"三、多进程架构的好处\"><a href=\"#三、多进程架构的好处\" class=\"headerlink\" title=\"三、多进程架构的好处\"></a>三、<strong><strong>多进程架构的好处</strong></strong></h1><ol>\n<li><strong>更高的容错性</strong>：当今 WEB 应用中，HTML/JavaScript/CSS 日益复杂，这些跑在渲染引擎的代码频繁的出现 BUG，而有些 BUG 会直接导致渲染引擎崩溃，多进程架构使得每一个渲染引擎运行在各自的进程中，相互之间不受影响，也就是说，当其中一个页面崩溃挂掉之后，其他页面还可以正常的运行不收影响；</li>\n<li><strong>更高的安全性和沙盒性（sanboxing）</strong>：渲染引擎会经常性的在网络上遇到不可信、甚至是恶意的代码，它们会利用这些漏洞在你的电脑上安装恶意的软件。针对这一问题，浏览器对不同进程限制了不同的权限，并为其提供沙盒运行环境，使其更安全更可靠；</li>\n<li><strong>更快的响应速度</strong>：在单进程的架构中，各个任务相互竞争抢夺 CPU 资源，使得浏览器响应速度变慢，而多进程架构正好规避了这一缺点。</li>\n</ol>\n<h1 id=\"四、多进程架构的优化\"><a href=\"#四、多进程架构的优化\" class=\"headerlink\" title=\"四、多进程架构的优化\"></a>四、<strong><strong>多进程架构的优化</strong></strong></h1><p>之前的我们说到，<code>Renderer Process</code>的作用是负责一个 Tab 内的显示相关的工作，这就意味着一个 Tab，就会有一个 <code>Renderer Process</code>，这些进程之间的内存无法进行共享，不同进程的内存常常需要包含相同的内容。</p>\n<h2 id=\"4-1-浏览器的进程模式\"><a href=\"#4-1-浏览器的进程模式\" class=\"headerlink\" title=\"4.1 浏览器的进程模式\"></a>4.1 <strong><strong>浏览器的进程模式</strong></strong></h2><p>为了节省内存，Chrome 提供了四种进程模式（Process Models），不同的进程模式会对 tab 进程做不同的处理。</p>\n<ol>\n<li><strong>Process-per-site-instance (default)：</strong>同一个 <strong>site-instance</strong> 使用一个进程；</li>\n<li><strong>Process-per-site</strong> ：同一个 <strong>site</strong> 使用一个进程；</li>\n<li><strong>Process-per-tab</strong> ：每个 tab 使用一个进程；</li>\n<li><strong>Single process</strong> ： 所有 tab 共用一个进程。</li>\n</ol>\n<p>这里需要给出 site 和 site-instance 的定义</p>\n<ul>\n<li><strong>site (同站点)：</strong> 相同的 registered domain name(如： google.com ，bbc.co.uk)和 scheme (如：<a href=\"https://link.segmentfault.com/?enc=vo3e5JJy1l6C%2BE57S22G0Q%3D%3D.REB0HpmFqj885xoEO27CBA%3D%3D\" target=\"_blank\" rel=\"noopener\">https://)</a>。比如 a.baidu.com 和 b.baidu.com 就可以理解为同一个 site（注意这里要和 <a href=\"https://link.segmentfault.com/?enc=H749yfdgi0%2Be72brSo412w%3D%3D.R7UGZ42OmNfsRHR6P32BFdCl%2FsUrXqkvjXQZtPpFyjoMSQFlhmfSvEsWIu6DIdtyfjd4uOJdATdaEhHfS0Y4PoYCsQL7MtKpg7NmB9h38dE%3D\" target=\"_blank\" rel=\"noopener\">Same-origin policy</a> 区分开来，<strong>同源</strong>策略还涉及到子域名和端口）。</li>\n<li><strong>site-instance（同站点实例）：</strong>满足下面两中情况并且打开的新、旧页面属于上面定义的同一个 site，就属于同一个 <strong>site-instance</strong><ol>\n<li>用户通过<code>&lt;a target=&quot;_blank&quot;&gt;</code>这种方式点击打开的新页面</li>\n<li>JS代码打开的新页面（比如 <code>window.open</code>)</li>\n</ol>\n</li>\n</ul>\n<p>理解了概念之后，下面解释四个进程模式</p>\n<ol>\n<li><code>Single process</code>：顾名思义，单进程模式，所有 tab 都会使用同一个进程；</li>\n<li><code>Process-per-tab</code>：每打开一个 tab，会新建一个进程；</li>\n<li><code>Process-per-site</code>：当你打开 a.baidu.com 页面，在打开 b.baidu.com 的页面，这两个页面的 tab 使用的是共一个进程，因为这两个页面的 site 相同，而如此一来，如果其中一个tab崩溃了，而另一个tab也会崩溃；</li>\n<li><code>Process-per-site-instance</code>： <strong>是最重要的，因为这个是 Chrome 默认使用的模式</strong>，也就是几乎所有的用户都在用的模式：<ol>\n<li>当你打开一个 tab 访问 a.baidu.com ，然后再打开一个 tab 访问 b.baidu.com，这两个 tab 会使用<strong>两个进程</strong>；</li>\n<li>而如果你在 a.baidu.com 中，通过 JS 代码打开了 b.baidu.com 页面，这两个 tab 会使用<strong>同一个进程</strong>。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"4-2-使用-Process-per-site-instance的原因\"><a href=\"#4-2-使用-Process-per-site-instance的原因\" class=\"headerlink\" title=\"4.2 使用 Process-per-site-instance的原因\"></a>4.2 使用 <code>Process-per-site-instance</code><strong>的原因</strong></h2><p><code>Process-per-site-instance</code>兼容了性能与易用性，是一个比较中庸通用的模式</p>\n<ul>\n<li>相较于 Process-per-tab，能够少开很多进程，就意味着更少的内存占用；</li>\n<li>相较于 Process-per-site，能够更好的隔离相同域名下毫无关联的 tab 更加安全。</li>\n</ul>\n<h1 id=\"五、导航过程\"><a href=\"#五、导航过程\" class=\"headerlink\" title=\"五、导航过程\"></a>五、<strong><strong>导航过程</strong></strong></h1><p>之前我们我们提到，tab 以外的大部分工作由浏览器进程<code>Browser Process</code>负责，针对工作的不同，Browser Process 划分出不同的工作线程：</p>\n<ol>\n<li>UI thread：控制浏览器上的按钮及输入框；</li>\n<li>Network thread：处理网络请求，从网上获取数据；</li>\n<li>Storage thread： 控制文件等的访问；</li>\n</ol>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/2.png\" alt=\"Untitled\"></p>\n<h2 id=\"5-1-处理输入\"><a href=\"#5-1-处理输入\" class=\"headerlink\" title=\"5.1  处理输入\"></a>5.1  处理输入</h2><p>当我们在浏览器的地址栏输入内容按下回车时，<code>UI thread</code>会判断输入的内容是搜索关键词（search query）还是 URL，如果是搜索关键词，跳转至默认搜索引擎对应都搜索 URL，如果输入的内容是URL，则开始请求 URL。（这里有个小型的数据库用于记录历史记录）。</p>\n<h2 id=\"5-2-开始导航\"><a href=\"#5-2-开始导航\" class=\"headerlink\" title=\"5.2 开始导航\"></a>5.2 开始导航</h2><p>回车按下后，<code>UI thread</code>将关键词搜索对应的URL或输入的URL交给网络线程<code>Network thread</code>，此时UI线程使 tab 前的图标展示为加载中状态，然后网络进程进行一系列诸如 DNS 寻址，建立 TLS 连接等操作进行资源请求，<strong>如果收到服务器的 301 重定向响应，它就会告知 UI 线程进行重定向然后它会再次发起一个新的网络请求。</strong></p>\n<h2 id=\"5-3-读取响应\"><a href=\"#5-3-读取响应\" class=\"headerlink\" title=\"5.3 读取响应\"></a>5.3 读取响应</h2><p><code>Network thread</code>接收到服务器的响应后，开始解析HTTP响应报文，然后根据响应头中的<code>Content-Type</code>字段来确定响应主体的媒体类型（MIME Type）</p>\n<ol>\n<li>如果媒体类型是一个 HTML 文件，则将响应数据交给渲染进程（<code>Renderer process</code>）来进行下一步的工作；</li>\n<li>如果是 zip 文件或者其它文件，会把相关数据传输给下载管理器。</li>\n</ol>\n<p>与此同时，浏览器会进行 <a href=\"https://link.segmentfault.com/?enc=ENNhmhTmznvjoO71cw1q4A%3D%3D.FUqpx2igZciZkJLB31WZTP9kPPofaegQcUh6CSqYW%2BbWnHhVnDT7QLlicWMWLWin\" target=\"_blank\" rel=\"noopener\">Safe Browsing</a> 安全检查，如果域名或者请求内容匹配到已知的恶意站点，<strong>Network thread 会展示一个警告页</strong>。除此之外，网络线程还会做 <a href=\"https://link.segmentfault.com/?enc=VUe7K7fj4IrU7E93oJEu%2Fg%3D%3D.k30swaF%2F2equTeivvmBI3dctbKlk%2BJ9KcfSQYEpAaVuY70h%2FXPh4qijeTHsqqw4518y%2Bn%2FfqScqLjLPxeVzKOk3EOsSIeskpAkwkL3zYkZ0%3D\" target=\"_blank\" rel=\"noopener\">CORB</a>（Cross Origin Read Blocking）检查来确定那些敏感的跨站数据不会被发送至渲染进程。</p>\n<h2 id=\"5-4-网页加载过程\"><a href=\"#5-4-网页加载过程\" class=\"headerlink\" title=\"5.4 网页加载过程\"></a>5.4 <strong><strong>网页加载过程</strong></strong></h2><p>各种检查完毕以后，<code>Network thread</code> 确信浏览器可以导航到请求网页，<code>Network thread</code>会通知<code>UI thread</code>数据已经准备好，<code>UI thread</code> 会查找到一个 <code>Renderer process</code> 进行网页的渲染。</p>\n<p>浏览器为了对查找渲染进程这一步骤进行优化，考虑到网络请求获取响应需要时间，所以在第二步开始，浏览器已经<strong>预先查找和启动了一个渲染进程</strong>，如果中间步骤一切顺利，当 <code>Network thread</code>接收到数据时，渲染进程已经准备好了，<strong>但是如果遇到重定向，这个准备好的渲染进程也许就不可用了，这个时候会重新启动一个渲染进程。</strong></p>\n<h2 id=\"5-5-提交导航\"><a href=\"#5-5-提交导航\" class=\"headerlink\" title=\"5.5 提交导航\"></a>5.5 提交导航</h2><p>到了这一步，数据和渲染进程都准备好了，<code>Browser Process</code> 会向 <code>Renderer Process</code>发送 IPC 消息来确认导航。此时，浏览器进程将准备好的数据发送给渲染进程，渲染进程接收到数据之后，又发送 IPC 消息给浏览器进程，告诉浏览器进程导航已经提交页面开始加载。</p>\n<p>这个时候导航栏会更新，安全指示符更新（地址前面的小锁），访问历史列表（history tab）更新，即可以通过前进后退来切换该页面。</p>\n<h2 id=\"5-6-初始化加载完成\"><a href=\"#5-6-初始化加载完成\" class=\"headerlink\" title=\"5.6 初始化加载完成\"></a>5.6 <strong><strong>初始化加载完成</strong></strong></h2><p>当导航提交完成后，渲染进程开始加载资源及渲染页面，当页面渲染完成后（页面及内部的 ifram e都触发了 onload 事件），会向浏览器进程发送 IPC 消息，告知浏览器进程，这个时候<code>UI thread</code>会停止展示 tab 中的加载中图标。</p>\n<h1 id=\"六、网页渲染原理\"><a href=\"#六、网页渲染原理\" class=\"headerlink\" title=\"六、网页渲染原理\"></a>六、<strong><strong>网页渲染原理</strong></strong></h1><p>导航过程完成之后，浏览器进程把数据交给了渲染进程，渲染进程负责 tab 内的所有事情，核心目的就是将 HTML/CSS/JS 代码，转化为用户可进行交互的 web 页面。那么渲染进程是如何工作的呢？</p>\n<p>渲染进程中，包含线程分别是：</p>\n<ol>\n<li>一个主线程（main thread）</li>\n<li>多个工作线程（work thread）</li>\n<li>一个合成器线程（compositor thread）</li>\n<li>多个光栅化线程（raster thread）</li>\n</ol>\n<h2 id=\"6-1-构建DOM\"><a href=\"#6-1-构建DOM\" class=\"headerlink\" title=\"6.1 构建DOM\"></a>6.1 <strong><strong>构建DOM</strong></strong></h2><p>当渲染进程接受到导航的确认信息后，开始接受来自浏览器进程的数据，这个时候，主线程会解析数据转化为 DOM（Document Object Model）对象。DOM 为 WEB开发人员通过 JavaScript 与网页进行交互的数据结构及 API。</p>\n<h2 id=\"6-2-子资源加载\"><a href=\"#6-2-子资源加载\" class=\"headerlink\" title=\"6.2 子资源加载\"></a>6.2 <strong><strong>子资源加载</strong></strong></h2><p>在构建DOM的过程中，会解析到图片、CSS、JavaScript脚本等资源，这些资源是需要从网络或者缓存中获取的，主线程在构建 DOM 过程中如果遇到了这些资源，逐一发起请求去获取，而为了提升效率，浏览器也会运行<strong>预加载扫描（preload scanner）程序</strong>，如果HTML中存在<code>img</code>、<code>link</code>等标签，预加载扫描程序会把这些请求传递给<code>Browser Process</code>的<code>Network thread</code>进行资源下载。</p>\n<h2 id=\"6-3-JavaScript-的下载与执行\"><a href=\"#6-3-JavaScript-的下载与执行\" class=\"headerlink\" title=\"6.3 JavaScript 的下载与执行\"></a>6.3 <strong><strong>JavaScript 的下载与执行</strong></strong></h2><p>构建DOM过程中，如果遇到<code>&lt;script&gt;</code>标签，<strong>渲染引擎会停止对 HTML 的解析，而去加载执行 JS 代码，原因在于 JS 代码可能会改变 DOM 的结构</strong>（比如执行<code>document.write()</code>等API）。不过开发者其实也有多种方式来告知浏览器应对如何应对某个资源，比如说如果在<code>&lt;script&gt;</code>标签上添加了 <code>async</code> 或 <code>defer</code> 等属性，浏览器会异步的加载和执行 JS 代码，而不会阻塞渲染。</p>\n<h2 id=\"6-4-样式计算-Style-calculation\"><a href=\"#6-4-样式计算-Style-calculation\" class=\"headerlink\" title=\"6.4 样式计算 - Style calculation\"></a>6.4 <strong><strong>样式计算 - Style calculation</strong></strong></h2><p>DOM 树只是我们页面的结构，我们要知道页面长什么样子，我们还需要知道 DOM 的每一个节点的样式。主线程在解析页面时，遇到<code>&lt;style&gt;</code>标签或者<code>&lt;link&gt;</code>标签的 CSS 资源，会加载 CSS 代码，根据 CSS 代码确定每个 DOM 节点的计算样式（computed style）。</p>\n<p>计算样式是主线程根据 CSS 样式选择器（CSS selectors）计算出的每个 DOM 元素应该具备的具体样式，即使你的页面没有设置任何自定义的样式，浏览器也会提供其默认的样式。</p>\n<h2 id=\"6-5-布局-Layout\"><a href=\"#6-5-布局-Layout\" class=\"headerlink\" title=\"6.5 布局 - Layout\"></a>6.5 <strong><strong>布局 - Layout</strong></strong></h2><p>DOM 树和计算样式完成后，我们还需要知道每一个节点在页面上的位置，布局（Layout）其实就是找到所有元素的几何关系的过程。</p>\n<p>主线程会遍历 DOM 及相关元素的计算样式，构建出包含每个元素的页面坐标信息及盒子模型大小的<strong>布局树（Render Tree）</strong>，遍历过程中，会跳过隐藏的元素（display: none），另外，伪元素虽然在 DOM 上不可见，但是在布局树上是可见的。</p>\n<h2 id=\"6-5-绘制-Paint\"><a href=\"#6-5-绘制-Paint\" class=\"headerlink\" title=\"6.5 绘制 - Paint\"></a>6.5 <strong><strong>绘制 - Paint</strong></strong></h2><p>布局 layout 之后，我们知道了不同元素的结构，样式，几何关系，我们要绘制出一个页面，我们要需要知道每个元素的绘制先后顺序，在绘制阶段，主线程会遍历布局树<strong>（layout tree）</strong>，生成一系列的绘画记录（paint records）。绘画记录可以看做是记录各元素绘制先后顺序的笔记。</p>\n<h2 id=\"6-5-合成-Compositing\"><a href=\"#6-5-合成-Compositing\" class=\"headerlink\" title=\"6.5 合成 - Compositing\"></a>6.5 <strong><strong>合成 - Compositing</strong></strong></h2><p>文档结构、元素的样式、元素的几何关系、绘画顺序，这些信息我们都有了，这个时候如果要绘制一个页面，我们需要做的是把这些信息转化为显示器中的像素，这个转化的过程，叫做<code>光栅化</code>（rasterizing）。</p>\n<p>那我们要绘制一个页面，最简单的做法是只光栅化视口内（viewport）的网页内容，如果用户进行了页面滚动，就移动光栅帧（rastered frame）并且光栅化更多的内容以补上页面缺失的部分，如下：</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/3.png\" alt=\"Untitled\"></p>\n<p>Chrome 第一个版本就是采用这种简单的绘制方式，这一方式唯一的缺点就是每当页面滚动，光栅线程都需要对新移进视图的内容进行光栅化，这是一定的性能损耗，为了优化这种情况，Chrome 采取一种更加复杂的叫做合成（compositing）的做法。</p>\n<p>那么，什么是合成？合成是一种将<strong>页面分成若干层</strong>，然后分别对它们进行<strong>光栅化</strong>，最后在一个单独的线程 - 合成线程（compositor thread）里面合并成一个页面的技术。当用户滚动页面时，由于页面各个层都已经被光栅化了，浏览器需要做的只是合成一个新的帧来展示滚动后的效果罢了。页面的动画效果实现也是类似，将页面上的层进行移动并构建出一个新的帧即可。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/4.png\" alt=\"Untitled\"></p>\n<p>为了实现合成技术，我们需要对元素进行分层，确定哪些元素需要放置在哪一层，主线程需要遍历渲染树来创建一棵层次树（<strong>Layer Tree）</strong>，对于添加了 <code>will-change</code> CSS 属性的元素，会被看做单独的一层，没有 <code>will-change</code> CSS属性的元素，浏览器会根据情况决定是否要把该元素放在单独的层。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/5.png\" alt=\"Untitled\"></p>\n<p>你可能会想要给页面上所有的元素一个单独的层，然而当页面的层超过一定的数量后，层的合成操作要比在每个帧中光栅化页面的一小部分还要慢，因此衡量你应用的渲染性能是十分重要的一件事情。</p>\n<p>一旦 Layer Tree被创建，渲染顺序被确定，主线程会把这些信息通知给合成器线程，合成器线程开始对层次数的每一层进行光栅化。有的层的可以达到整个页面的大小，所以合成线程需要将它们切分为一块又一块的小图块（tiles），之后将这些小图块分别进行发送给一系列光栅线程（raster threads）进行光栅化，结束后光栅线程会将每个图块的光栅结果存在<code>GPU Process</code>的内存中。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/6.png\" alt=\"Untitled\"></p>\n<p>为了优化显示体验，合成线程可以给不同的光栅线程赋予不同的优先级，将那些在视口中的或者视口附近的层先被光栅化。</p>\n<p>当图层上面的图块都被栅格化后，合成线程会收集图块上面叫做<strong>绘画四边形</strong>（draw quads）的信息来构建一个<strong>合成帧</strong>（compositor frame）。</p>\n<ul>\n<li>绘画四边形：包含图块在<strong>内存的位置</strong>以及图层合成后图块在页面的位置之类的信息；</li>\n<li>合成帧：代表页面一个帧的内容的绘制四边形<strong>集合</strong>。</li>\n</ul>\n<p>以上所有步骤完成后，合成线程就会通过 IPC 向浏览器进程（browser process）提交（commit）一个渲染帧。这个时候可能有另外一个合成帧被浏览器进程的UI线程（<code>UI thread</code>）提交以改变浏览器的 UI。这些合成帧都会被发送给 GPU 从而展示在屏幕上。如果合成线程收到页面滚动的事件，合成线程会构建另外一个合成帧发送给 GPU 来更新页面。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/7.png\" alt=\"Untitled\"></p>\n<p>合成的好处在于这个过程没有涉及到主线程，所以合成线程不需要等待样式的计算以及 JavaScript 完成执行。这就是为什么<a href=\"https://link.segmentfault.com/?enc=r3mxsZfpvn5VbyxfCBlXtw%3D%3D.Z%2Bdo9pOc%2BCp7mCaM7hSkv1llKlpOv%2BzA7En7%2Bdq%2FGN72tE%2Baf0JVSXHsLJPbn%2BrZC1xYQq%2Fsbht0Py8eYLT1YakMjf20PYXplE4J98bWIMQ%3D\" target=\"_blank\" rel=\"noopener\">合成器相关的动画</a> 最流畅，如果某个动画涉及到布局或者绘制的调整，就会涉及到主线程的重新计算，自然会慢很多。</p>\n<p>当页面渲染完毕以后，tab 内已经显示出了可交互的 WEB 页面，用户可以进行移动鼠标、点击页面等操作了，而当这些事件发生时候，浏览器是如何处理这些事件的呢？</p>\n<h1 id=\"七、浏览器对事件的处理\"><a href=\"#七、浏览器对事件的处理\" class=\"headerlink\" title=\"七、浏览器对事件的处理\"></a>七、<strong><strong>浏览器对事件的处理</strong></strong></h1><p>以点击事件（click event）为例，让鼠标点击页面时候，首先接受到事件信息的是<code>Browser Process</code>，但是<code>Browser Process</code>只知道事件发生的类型和发生的位置，具体怎么对这个点击事件进行处理，还是由Tab内的<code>Renderer Process</code>进行的。Browser Process接受到事件后，随后便把事件的信息传递给了渲染进程，渲染进程会找到根据事件发生的坐标，找到目标对象（target），并且运行这个目标对象的点击事件绑定的监听函数（listener）。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/8.png\" alt=\"Untitled\"></p>\n<h2 id=\"渲染进程中合成器线程接收事件\"><a href=\"#渲染进程中合成器线程接收事件\" class=\"headerlink\" title=\"渲染进程中合成器线程接收事件\"></a><strong><strong>渲染进程中合成器线程接收事件</strong></strong></h2><p>前面我们说到，合成器线程可以独立于主线程之外通过已光栅化的层创建组合帧，例如页面滚动，如果没有对页面滚动绑定相关的事件，组合器线程可以独立于主线程创建组合帧，如果页面绑定了页面滚动事件，合成器线程会等待主线程进行事件处理后才会创建组合帧。那么，合成器线程是如何判断出这个事件是否需要路由给主线程处理的呢？</p>\n<p>由于<strong>执行 JS 是主线程的工作</strong>，当页面合成时，合成器线程会标记页面中绑定有事件处理器的区域为<code>非快速滚动区域</code>(non-fast scrollable region)，如果事件发生在这些存在标注的区域，合成器线程会把事件信息发送给主线程，等待主线程进行事件处理，如果事件不是发生在这些区域，合成器线程则会直接合成新的帧而不用等到主线程的响应。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/9.png\" alt=\"Untitled\"></p>\n<p>而对于非快速滚动区域的标记，开发者需要注意全局事件的绑定，比如我们使用事件委托，将目标元素的事件交给根元素 body 进行处理，代码如下：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'touchstart'</span>, event =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (event.target === area) &#123;</span><br><span class=\"line\">    event.preventDefault()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在开发者角度看，这一段代码没什么问题，但是从浏览器角度看，这一段代码给 body 元素绑定了事件监听器，也就意味着整个页面都被编辑为一个非快速滚动区域，这会使得即使你的页面的某些区域没有绑定任何事件，每次用户触发事件时，合成器线程也需要和主线程通信并等待反馈，流畅的合成器独立处理合成帧的模式就失效了。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/10.png\" alt=\"Untitled\"></p>\n<p>其实这种情况也很好处理，只需要在事件监听时传递<code>passtive</code>参数为 true，<code>passtive</code>会告诉浏览器你既要绑定事件，又要让组合器线程直接跳过主线程的事件处理直接合成创建组合帧。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">'touchstart'</span>, event =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.target === area) &#123;</span><br><span class=\"line\">        event.preventDefault()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;, &#123;<span class=\"attr\">passive</span>: <span class=\"literal\">true</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查找事件的目标对象（event-target）\"><a href=\"#查找事件的目标对象（event-target）\" class=\"headerlink\" title=\"查找事件的目标对象（event target）\"></a><strong><strong>查找事件的目标对象（event target）</strong></strong></h2><p>当合成器线程接收到事件信息，判定到事件发生不在非快速滚动区域后，合成器线程会向主线程发送这个时间信息，主线程获取到事件信息的第一件事就是通过命中测试（hit test）去找到事件的目标对象。具体的命中测试流程是遍历在绘制阶段生成的绘画记录（paint records）来找到包含了事件发生坐标上的元素对象。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/11.png\" alt=\"Untitled\"></p>\n<h2 id=\"浏览器对事件的优化\"><a href=\"#浏览器对事件的优化\" class=\"headerlink\" title=\"浏览器对事件的优化\"></a><strong><strong>浏览器对事件的优化</strong></strong></h2><p>一般我们屏幕的帧率是每秒 60 帧，也就是60fps，但是某些事件触发的频率超过了这个数值，比如 wheel，mousewheel，mousemove，pointermove，touchmove，这些连续性的事件一般每秒会触发 60~120 次，假如每一次触发事件都将事件发送到主线程处理，由于屏幕的刷新速率相对来说较低，这样使得主线程会触发过量的命中测试以及JS代码，使得性能有了没必要是损耗。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/12.png\" alt=\"Untitled\"></p>\n<p>出于优化的目的，浏览器会合并这些连续的事件，延迟到下一帧渲染是执行，也就是<code>requestAnimationFrame</code>之前。</p>\n<p><img src=\"/images/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8E%9F%E7%90%86/13.png\" alt=\"Untitled\"></p>\n<p>而对于非连续性的事件，如keydown，keyup，mousedown，mouseup，touchstart，touchend等，会直接派发给主线程去执行。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>浏览器的多进程架构，根据不同的功能划分了不同的进程，进程内不同的使命划分了不同的线程，当用户开始浏览网页时候，浏览器进程进行处理输入、开始导航请求数据、请求响应数据，查找新建渲染进程，提交导航，之后渲染又进行了解析 HTML 构建 DOM、构建过程加载子资源、下载并执行 JS 代码、样式计算、布局、绘制、合成，一步一步的构建出一个可交互的 WEB 页面，之后浏览器进程又接受页面的交互事件信息，并将其交给渲染进程，渲染进程内主进程进行命中测试，查找目标元素并执行绑定的事件，完成页面的交互。</p>\n<h1 id=\"相关参考链接\"><a href=\"#相关参考链接\" class=\"headerlink\" title=\"相关参考链接\"></a><strong><strong>相关参考链接</strong></strong></h1><p><a href=\"https://segmentfault.com/a/1190000022633988\" target=\"_blank\" rel=\"noopener\">前端都该懂的浏览器工作原理，你懂了吗？</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"蛤蟆医生去看心理学","url":"http://jocolorful.com/2022/09/03/阅读-蛤蟆医生去看心理学/","content":"<p><a href=\"https://weread.qq.com/web/bookDetail/66832530721e777066806c9\" target=\"_blank\" rel=\"noopener\">原文地址</a></p>\n<p>[英]罗伯特·戴博德</p>\n<p>蛤蟆先生生病了，幸运的是他有两个朋友帮他找了心理医生，在现实的世界里，蛤蟆先生是幸运的。当我们陷入了某种悲伤低落的成情绪时，靠自己很难走出来。即便做一些有看起来意义的活动：出门散步、爬山、运动，这些看起来让身体忙碌的事情就像是一剂止痛药治标不治本。</p>\n<p>而真正的病魔不是别人，是自己心里的那个小人儿。那个小人，他可能是懦弱的卑微的，也可能是高傲的审判的。那个小人从童年时就开始萌芽，批评、愤怒都是他的养分嫉妒也是他的催化剂。</p>\n<p>要克制负面情绪需要我们和小人进行战斗。这是一场没有硝烟的战争，无论我们选择和解还是负隅顽抗这场战争注定也不会有结果，人的情绪跟随一生。简单来说就是没那么简单。我们没办法做到上帝视角因为我们深陷其中。</p>\n<p>众生皆苦，唯有自渡。勇敢地审视自己的内心、一旦跨跃勇敢的鸿沟一切都不难。但、我也希望不断审视、修正自己的过程中还保有自己的个性。</p>\n<p>多积累一些快乐的情绪吧、让对抗小人的弹药更加猛烈一些！</p>\n<blockquote>\n<p>绅士官邸，大隐于市，享纵览野树林之开阔视野，得漫步遍野繁花之田园雅趣，且有围场楼宇在外。</p>\n</blockquote>\n<blockquote>\n<p>必须完成的事情，唯有靠他自己才能完成。哈蟆越来越清楚地认识到他最好尽快长大成人，</p>\n</blockquote>\n<blockquote>\n<p>弗洛伊德曾说，「本我所在，自我相依。」</p>\n</blockquote>\n<blockquote>\n<p>人格由本我、自我、超我三部分组成：本我(Id)：位于潜意识的本能、冲动与欲望，人格的生物面遵循快乐原则。自我（Ego）：介于本我与外部世界之间，是人格的心理面。自我的一方面作用能使个体意识到其认识能力；另一方面使个体为了适应现实而对本我加以约束和压抑、遵循的是现实原则。超我：是人格的社会面，是道德化的自我：由良心和自我理想组成，超我的力量是指导自我，遵循理想原则。</p>\n</blockquote>\n<blockquote>\n<p>你肯定不喜欢，可如果你要更好地理解自己就需要跟自己的情绪做联结。并理解这种情绪。如果你否认它们，不论是采用无视还是压抑内心的方式，结果都像是做了截肢，就如身体的重要部位被切掉了一样。你在某种程度上成了一个残缺的人。</p>\n</blockquote>\n<blockquote>\n<p>没有一种批判自我批判更强烈，也没有法官比我们自己更严苛。</p>\n</blockquote>\n<blockquote>\n<p>如果你为自己负责，你就会认识到你对自己是有自主权的；因此你就有力量来改变环境。更重要的是有力量改变你自己。</p>\n</blockquote>\n<blockquote>\n<p>游戏的发起基本上都不是出自真诚。不像正常游戏那样只是让人觉得兴奋好玩。表面看起来事实求是，真正的意图并不正大光明；游对体现在两个层面：在社交层面，似乎一切都是公开诚然的。而游戏玩家的真正动机却隐藏在心理层面，同时也隐藏着欺骗，至于游戏的必然后果全都是让人产生负面情绪。</p>\n</blockquote>\n<blockquote>\n<p>因为愤怒能非常有效他抵抗抑郁，愤怒的人从来不觉得内疚，因为他们总是在怪罪别人。他们自卫的方式，是把自己内在的恐惧投射到别人身上。</p>\n</blockquote>\n<blockquote>\n<p>小王子曾问小狐理：「仪式感是什么?」狐狸回答：「它就是使某一天与其他日子不同，使某一时刻与其他时刻不同。」仪式感存在的最大意义，是让我们感觉在生活而不仅仅是活着。仪式感是柴米油盐里的琴棋书画；似永流年里的波澜不惊，让平谈的日子有所期待。仪式感更是爱的双向回流，让爱与被爱的人感到温暖。</p>\n</blockquote>\n<blockquote>\n<p>爱你的人会给你三样东西、安全感、宠溺感和 仪式感：安全感让你放下过去；宠溺感让你沉浸当下；仪式感让你期许未来。</p>\n</blockquote>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["阅读"],"tags":["心理学"]},{"title":"集中隔离的第X个夏日","url":"http://jocolorful.com/2022/06/23/生活-集中隔离的第X个夏日/","content":"<p>快要见底的咖啡罐子<br>呼呼作响的空调<br>微信的读书上几本没读完的小说<br>时而被风吹起的卷帘窗<br>散落在地板的矿泉水瓶</p>\n<p>我没有很向往外面的世界</p>\n<p>用代码麻醉自己<br>用诗歌麻醉自己</p>\n<p>我把所有的触动都记录了下来</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"晴雅集-2022","url":"http://jocolorful.com/2022/05/29/晴雅集-2022/","content":"<h2 id=\"2022-观影记录\"><a href=\"#2022-观影记录\" class=\"headerlink\" title=\"2022 观影记录\"></a>2022 观影记录</h2><h3 id=\"推荐指数：🌟🌟🌟🌟🌟\"><a href=\"#推荐指数：🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"推荐指数：🌟🌟🌟🌟🌟\"></a>推荐指数：🌟🌟🌟🌟🌟</h3><ul>\n<li><a href=\"https://movie.douban.com/subject/30472643/\" target=\"_blank\" rel=\"noopener\">《精灵旅社4：变身大冒险》</a></li>\n</ul>\n<h3 id=\"推荐指数：🌟🌟🌟🌟\"><a href=\"#推荐指数：🌟🌟🌟🌟\" class=\"headerlink\" title=\"推荐指数：🌟🌟🌟🌟\"></a>推荐指数：🌟🌟🌟🌟</h3><ul>\n<li><a href=\"https://movie.douban.com/subject/3822687/\" target=\"_blank\" rel=\"noopener\">《神秘海域》</a></li>\n<li><a href=\"https://movie.douban.com/subject/26996619/\" target=\"_blank\" rel=\"noopener\">《古董局中局》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35422807/\" target=\"_blank\" rel=\"noopener\">《扬名立万》</a></li>\n<li><a href=\"https://movie.douban.com/subject/26825482/\" target=\"_blank\" rel=\"noopener\">《月球陨落》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35312437/\" target=\"_blank\" rel=\"noopener\">《奇迹·笨小孩》</a></li>\n<li><a href=\"https://movie.douban.com/subject/3822687/\" target=\"_blank\" rel=\"noopener\">《神秘海域》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35183042/\" target=\"_blank\" rel=\"noopener\">《独行月球》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35460157/\" target=\"_blank\" rel=\"noopener\">《人生大事》</a></li>\n</ul>\n<h3 id=\"推荐指数：🌟🌟🌟\"><a href=\"#推荐指数：🌟🌟🌟\" class=\"headerlink\" title=\"推荐指数：🌟🌟🌟\"></a>推荐指数：🌟🌟🌟</h3><ul>\n<li><a href=\"https://movie.douban.com/subject/34890921/\" target=\"_blank\" rel=\"noopener\">《柳浪闻莺》</a></li>\n<li><a href=\"https://movie.douban.com/subject/30469922/\" target=\"_blank\" rel=\"noopener\">《密室逃生2》</a></li>\n<li><a href=\"https://movie.douban.com/subject/32712599/\" target=\"_blank\" rel=\"noopener\">《我心飞扬》</a></li>\n<li><a href=\"https://movie.douban.com/subject/34787747/\" target=\"_blank\" rel=\"noopener\">《最初的梦想》</a> 教育片</li>\n<li><a href=\"https://movie.douban.com/subject/27203644/\" target=\"_blank\" rel=\"noopener\">《尼罗河上的惨案》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35376457/\" target=\"_blank\" rel=\"noopener\">《爱情神话》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35205446/\" target=\"_blank\" rel=\"noopener\">《铁道英雄》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35613853/\" target=\"_blank\" rel=\"noopener\">《长津湖之水门桥》</a></li>\n<li><a href=\"https://movie.douban.com/subject/32712599/\" target=\"_blank\" rel=\"noopener\">《我心飞扬》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35360684/\" target=\"_blank\" rel=\"noopener\">《新神榜：杨戬 》</a></li>\n</ul>\n<h3 id=\"推荐指数：🌟🌟\"><a href=\"#推荐指数：🌟🌟\" class=\"headerlink\" title=\"推荐指数：🌟🌟\"></a>推荐指数：🌟🌟</h3><ul>\n<li><a href=\"https://movie.douban.com/subject/35446144/\" target=\"_blank\" rel=\"noopener\">《以年为单位的恋爱》</a></li>\n<li><a href=\"https://movie.douban.com/subject/27067713/\" target=\"_blank\" rel=\"noopener\">《曾经相爱的我们》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35073565/\" target=\"_blank\" rel=\"noopener\">《门锁》</a></li>\n<li><a href=\"https://movie.douban.com/subject/34874432/\" target=\"_blank\" rel=\"noopener\">《花束般的恋爱》</a></li>\n<li><a href=\"https://movie.douban.com/subject/35444998/\" target=\"_blank\" rel=\"noopener\">《李茂扮太子》</a></li>\n<li><a href=\"https://movie.douban.com/subject/34787747/\" target=\"_blank\" rel=\"noopener\">《最初的梦想》</a></li>\n<li><a href=\"https://movie.douban.com/subject/30402056/\" target=\"_blank\" rel=\"noopener\">《致我的陌生恋人》</a></li>\n<li><a href=\"https://movie.douban.com/subject/26642033/\" target=\"_blank\" rel=\"noopener\">《小黄人大眼萌：神偷奶爸前传》</a></li>\n</ul>\n<h3 id=\"unscored\"><a href=\"#unscored\" class=\"headerlink\" title=\"unscored\"></a>unscored</h3><ul>\n<li><a href=\"https://movie.douban.com/subject/26147418/\" target=\"_blank\" rel=\"noopener\">《神奇动物：邓布利多之谜》</a></li>\n</ul>\n<h2 id=\"2022-书单\"><a href=\"#2022-书单\" class=\"headerlink\" title=\"2022 书单\"></a>2022 书单</h2><ul>\n<li>《惊奇物语》</li>\n<li>《蛤蟆先生去看心理医生》</li>\n<li>《富兰克林传记》</li>\n<li>《做二休五：钱少事少的都市生活指南》</li>\n<li>《成功的聪明人太多了，我必须为笨蛋争口气！》</li>\n<li>《人间便利店》</li>\n<li>《献给阿尔吉侬的花束》</li>\n<li>《巨大的拥抱》</li>\n<li>《我喜欢你是寂静的》</li>\n<li>《技术团队管理者的第一堂课》</li>\n<li>《向前一步》</li>\n</ul>\n<h2 id=\"2022-社区活跃\"><a href=\"#2022-社区活跃\" class=\"headerlink\" title=\"2022 社区活跃\"></a>2022 社区活跃</h2><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"TypeScript 每天起床一早操","url":"http://jocolorful.com/2022/03/28/前端-每天起床一早操/","content":"<p>每天起床练体操，理论 + 实践 助力小学生茁壮成长！TypeScript 小学生的进击之路：</p>\n<a id=\"more\"></a>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/zh/play\" target=\"_blank\" rel=\"noopener\">TypeScript 广场</a></li>\n<li><a href=\"https://juejin.cn/post/6844904182843965453\" target=\"_blank\" rel=\"noopener\">1.2W字 | 了不起的 TypeScript 入门教程</a></li>\n<li><a href=\"https://juejin.cn/post/6844904184894980104\" target=\"_blank\" rel=\"noopener\">一文读懂 TypeScript 泛型及应用</a></li>\n<li><a href=\"https://jkchao.github.io/typescript-book-chinese/#why\" target=\"_blank\" rel=\"noopener\">深入理解 TypeScript</a></li>\n<li><a href=\"https://juejin.cn/post/7009046640308781063\" target=\"_blank\" rel=\"noopener\">这 30 道 TS 练习题，你能答对几道？</a></li>\n<li><a href=\"https://javascript.plainenglish.io/powerful-typescript-tools-e1c7875fbb71\" target=\"_blank\" rel=\"noopener\">7 Powerful TypeScript Tools</a></li>\n</ul>\n<h1 id=\"Q1-泛型-使用的参考标准？\"><a href=\"#Q1-泛型-使用的参考标准？\" class=\"headerlink\" title=\"Q1. 泛型 + 使用的参考标准？\"></a>Q1. 泛型 + 使用的参考标准？</h1><ol>\n<li>当你的「函数」、「接口」、「类」将处理多种<font color=\"red\">数据类型</font>时；</li>\n<li>当「函数」、「接口」、「类」在多个地方使用该数据类型时。</li>\n</ol>\n<h1 id=\"Q2-什么叫泛型约束\"><a href=\"#Q2-什么叫泛型约束\" class=\"headerlink\" title=\"Q2. 什么叫泛型约束\"></a>Q2. 什么叫泛型<font color=\"red\">约束</font></h1><p>我们可能限制「每个<font color=\"red\">类型变量</font>接受的<font color=\"red\">类型数量</font>」，这就是泛型约束的作用。</p>\n<h2 id=\"2-1-确保属性存在\"><a href=\"#2-1-确保属性存在\" class=\"headerlink\" title=\"2.1 确保属性存在\"></a>2.1 确保属性存在</h2><p>我们需要做的就是让「类型变量」 <code>extends</code> 一个含有我们所需属性的接口(可以思考一下？为什么是接口呢？type 行不行….)</p>\n<p>答案是可以的，但是什么时候继承 interface，什么时候继承 type 呢？</p>\n<p>使用逗号来实现多个继承：<code>&lt;T extends Length, Type2, Type3&gt;</code></p>\n<details>\n  <summary>切换 &#8681;</summary>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Length &#123;</span><br><span class=\"line\">  length: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">identity</span>&lt;<span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">Length</span>&gt;(<span class=\"params\">arg: T</span>): <span class=\"title\">T</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arg.length) <span class=\"comment\">// 可以获取length属性</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n\n<h2 id=\"2-2-检查对象上的键是否存在\"><a href=\"#2-2-检查对象上的键是否存在\" class=\"headerlink\" title=\"2.2 检查对象上的键是否存在\"></a>2.2 检查对象上的键是否存在</h2><p>TypeScript 2.1  版本引入了 <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\" target=\"_blank\" rel=\"noopener\"><code>keyof</code></a> 操作符，该操作符可以用于获取某种类型的「所有键」，其返回类型是「联合类型」</p>\n<details>\n  <summary>切换 &#8681;</summary>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span></span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">  location: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> K1 = keyof Person <span class=\"comment\">// \"name\" | \"age\" | \"location\"</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> K2 = keyof Person[]  <span class=\"comment\">// number | \"length\" | \"push\" | \"concat\" | ...</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> K3 = keyof &#123; [x: <span class=\"built_in\">string</span>]: Person &#125;  <span class=\"comment\">// string | number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(K1)</span><br><span class=\"line\"><span class=\"string\">'K1'</span> only refers to a <span class=\"keyword\">type</span>, but is being used <span class=\"keyword\">as</span> a value here.</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'Person'</span> only refers to a <span class=\"keyword\">type</span>, but is being used <span class=\"keyword\">as</span> a value here.</span><br><span class=\"line\">说明类型是不能作为值打印出来</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Difficulty &#123;</span><br><span class=\"line\">  Easy,</span><br><span class=\"line\">  Intermediate,</span><br><span class=\"line\">  Hard</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProperty</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">K</span> <span class=\"title\">extends</span> <span class=\"title\">keyof</span> <span class=\"title\">T</span>&gt;(<span class=\"params\">obj: T, key: K</span>): <span class=\"title\">T</span>[<span class=\"title\">K</span>] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tsInfo = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Typescript\"</span>,</span><br><span class=\"line\">  supersetOf: <span class=\"string\">\"Javascript\"</span>,</span><br><span class=\"line\">  difficulty: Difficulty.Intermediate</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> difficulty: Difficulty =</span><br><span class=\"line\">  getProperty(tsInfo, <span class=\"string\">'difficulty'</span>) <span class=\"comment\">// OK</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> supersetOf: <span class=\"built_in\">string</span> =</span><br><span class=\"line\">  getProperty(tsInfo, <span class=\"string\">'superset_of'</span>) <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n</details>\n\n\n<h1 id=\"Q3：泛型默认类型\"><a href=\"#Q3：泛型默认类型\" class=\"headerlink\" title=\"Q3：泛型默认类型\"></a>Q3：泛型默认类型</h1><figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> A&lt;T = string&gt; &#123;</span><br><span class=\"line\">  name: T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> strA: A = &#123; name: <span class=\"string\">\"Semlinker\"</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> numB: A&lt;<span class=\"built_in\">number</span>&gt; = &#123; name: <span class=\"number\">101</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// 要默认参数干啥...</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Q4：泛型条件类型\"><a href=\"#Q4：泛型条件类型\" class=\"headerlink\" title=\"Q4：泛型条件类型\"></a>Q4：泛型条件类型</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">T extends U ? X : Y</span><br></pre></td></tr></table></figure>\n\n<p>以上表达式的意思是：若 T 能够赋值给 U，那么类型是 X，否则为 Y。在条件类型表达式中，我们通常还会结合 infer 关键字，实现类型抽取：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Dictionary&lt;T = any&gt; &#123;</span><br><span class=\"line\">  [key: <span class=\"built_in\">string</span>]: T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> StrDict = Dictionary&lt;<span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DictMember&lt;T&gt; = T <span class=\"keyword\">extends</span> Dictionary&lt;infer V&gt; ? V : never</span><br><span class=\"line\"><span class=\"keyword\">type</span> StrDictMember = DictMember&lt;StrDict&gt; <span class=\"comment\">// string</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Q5：泛型工具\"><a href=\"#Q5：泛型工具\" class=\"headerlink\" title=\"Q5：泛型工具\"></a>Q5：泛型工具</h1><p>为了方便开发者 TypeScript 内置了一些常用的工具类型，比如 Partial、Required、Readonly、Record 和 ReturnType 等。</p>\n<h2 id=\"5-1-Partial\"><a href=\"#5-1-Partial\" class=\"headerlink\" title=\"5.1 Partial\"></a>5.1 Partial</h2><p>Partial<T> 的作用就是将某个类型里的属性全部变为可选项 ?。</p>\n<h2 id=\"5-2-Record\"><a href=\"#5-2-Record\" class=\"headerlink\" title=\"5.2 Record\"></a>5.2 Record</h2><details>\n  <summary>切换 &#8681;</summary>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> PageInfo &#123;</span><br><span class=\"line\">  title: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Page = <span class=\"string\">'Home'</span> | <span class=\"string\">'About'</span> | <span class=\"string\">'Contact'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> x: Record&lt;Page, PageInfo&gt; = &#123;</span><br><span class=\"line\">  about: &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'ahout'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  concact: &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'concact'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  home: &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'homeß'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1. 提取通用的 property 出来，这里是 title</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 保证 key 值，这里是 Page</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"5-3-Pick\"><a href=\"#5-3-Pick\" class=\"headerlink\" title=\"5.3 Pick\"></a>5.3 Pick</h2><p>将某个类型中的子属性挑出来，变成包含这个类型部分属性的子类型。</p>\n<details>\n  <summary>切换 &#8681;</summary>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Todo &#123;</span><br><span class=\"line\">  title: <span class=\"built_in\">string</span></span><br><span class=\"line\">  description: <span class=\"built_in\">string</span></span><br><span class=\"line\">  completed: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> what = <span class=\"string\">\"title\"</span> | <span class=\"string\">\"completed\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TodoPreview = Pick&lt;Todo, what&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> todo: TodoPreview = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">\"Clean room\"</span>,</span><br><span class=\"line\">  completed: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"5-4-Exclude\"><a href=\"#5-4-Exclude\" class=\"headerlink\" title=\"5.4 Exclude\"></a>5.4 Exclude</h2><p>将某个类型中属于另一个的类型移除掉</p>\n<details>\n  <summary>切换 &#8681;</summary>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T0 = Exclude&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span>, <span class=\"string\">\"a\"</span>&gt; <span class=\"comment\">// \"b\" | \"c\"</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T1 = Exclude&lt;<span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span> | <span class=\"string\">\"c\"</span>, <span class=\"string\">\"a\"</span> | <span class=\"string\">\"b\"</span>&gt; <span class=\"comment\">// \"c\"</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T2 = Exclude&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"built_in\">void</span></span>), <span class=\"params\">Function</span>&gt; // <span class=\"params\">string</span> | <span class=\"params\">number</span></span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"5-5-ReturnType\"><a href=\"#5-5-ReturnType\" class=\"headerlink\" title=\"5.5 ReturnType\"></a>5.5 ReturnType</h2><p>获取函数 T 的返回类型</p>\n<h1 id=\"Q6-使用泛型创建对象\"><a href=\"#Q6-使用泛型创建对象\" class=\"headerlink\" title=\"Q6. 使用泛型创建对象\"></a>Q6. 使用泛型创建对象</h1><h2 id=\"6-1-构造签名\"><a href=\"#6-1-构造签名\" class=\"headerlink\" title=\"6.1 构造签名\"></a>6.1 构造签名</h2><p>在 TypeScript 接口中，你可以使用 new 关键字来描述一个构造函数：</p>\n<details>\n  <summary>切换 &#8681;</summary>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> FirstClass &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> SecondClass &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> GenericCreator&lt;T&gt; &#123;</span><br><span class=\"line\">  create(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> T()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> creator1 = <span class=\"keyword\">new</span> GenericCreator&lt;FirstClass&gt;()</span><br><span class=\"line\"><span class=\"keyword\">const</span> firstClass: FirstClass = creator1.create()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> creator2 = <span class=\"keyword\">new</span> GenericCreator&lt;SecondClass&gt;()</span><br><span class=\"line\"><span class=\"keyword\">const</span> secondClass: SecondClass = creator2.create()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抛错：'T' only refers to a type, but is being used as a value here.</span></span><br><span class=\"line\"><span class=\"comment\">// T 只是代表一种类型，但却作为值使用</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<p>在 TypeScript 接口中，你可以使用 <font color=\"red\">new </font>关键字来描述一个构造函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Point &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>): Point</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上接口中的 new (x: number, y: number) 我们称之为「构造签名」，其语法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ConstructSignature:  new TypeParametersopt ( ParameterListopt) TypeAnnotationopt</span><br></pre></td></tr></table></figure>\n\n<p>在上述的构造签名中，TypeParametersopt 、ParameterListopt 和 TypeAnnotationopt 分别表示：可选的类型参数、可选的参数列表和可选的类型注解。与该语法相对应的几种常见的使用形式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">new C   &#x2F;&#x2F; 可选的类型参数</span><br><span class=\"line\">new C ( ... )   &#x2F;&#x2F; 可选的参数列表</span><br><span class=\"line\">new C &lt; ... &gt; ( ... ) &#x2F;&#x2F; 可选的类型注解</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-1-构造函数类型\"><a href=\"#6-1-构造函数类型\" class=\"headerlink\" title=\"6.1 构造函数类型\"></a>6.1 构造函数类型</h2><ol>\n<li>包含一个或多个<font color=\"red\">构造签名</font>的对象类型被称为构造函数类型；</li>\n<li>构造函数类型可以使用<font color=\"red\">「构造函数类型字面量」</font>或包含<font color=\"red\">「构造签名」</font>的对象类型字面量来编写。</li>\n</ol>\n<p>构造函数类型字面量 👇：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> &lt; T1, T2, ... &gt; <span class=\"function\">(<span class=\"params\"> p1, p2, ... </span>) =&gt;</span> R</span><br></pre></td></tr></table></figure>\n\n<p>与「对象类型字面量」是等价的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"keyword\">new</span> &lt; T1, T2, ... &gt; ( p1, p2, ... ) : R &#125;</span><br></pre></td></tr></table></figure>\n\n<p>举个实际的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 「构造函数类型字面量」</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> (x: number, <span class=\"attr\">y</span>: number) =&gt; Point</span><br></pre></td></tr></table></figure>\n\n<p>等价于：「对象类型字面量」</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; new (x: number, y: number): Point &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-2-构造函数类型的应用\"><a href=\"#6-2-构造函数类型的应用\" class=\"headerlink\" title=\"6.2 构造函数类型的应用\"></a>6.2 构造函数类型的应用</h2><details>\n  <summary>切换 &#8681;</summary>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Point &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>): Point</span><br><span class=\"line\">  x: <span class=\"built_in\">number</span></span><br><span class=\"line\">  y: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Point2D <span class=\"keyword\">implements</span> Point &#123;</span><br><span class=\"line\">  readonly x: <span class=\"built_in\">number</span></span><br><span class=\"line\">  readonly y: <span class=\"built_in\">number</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> point: Point = <span class=\"keyword\">new</span> Point2D(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// 抛错：</span></span><br><span class=\"line\"><span class=\"comment\">// Class 'Point2D' incorrectly implements interface 'Point'.</span></span><br><span class=\"line\"><span class=\"comment\">// Type 'Point2D' provides no match for the signature 'new (x: number, y: number): Point'.</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<p>要解决这个问题，我们就需要把对前面定义的 Point 接口进行分离，即把接口的属性和构造函数类型进行分离：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Point &#123;</span><br><span class=\"line\">  x: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> PointConstructor &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span>): Point;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>完成接口拆分之后，除了前面已经定义的 Point2D 类之外，我们又定义了一个 newPoint 工厂函数，该函数用于根据传入的 PointConstructor 类型的构造函数，来创建对应的 Point 对象。</p>\n<details>\n  <summary>切换 &#8681;</summary>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Point2D <span class=\"keyword\">implements</span> Point &#123;</span><br><span class=\"line\">  readonly x: <span class=\"built_in\">number</span></span><br><span class=\"line\">  readonly y: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newPoint</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  pointConstructor: PointConstructor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  x: <span class=\"built_in\">number</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  y: <span class=\"built_in\">number</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> pointConstructor(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> point: Point = newPoint(Point2D, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"6-3-使用泛型创建对象\"><a href=\"#6-3-使用泛型创建对象\" class=\"headerlink\" title=\"6.3 使用泛型创建对象\"></a>6.3 使用泛型创建对象</h2><figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> GenericCreator&lt;T&gt; &#123;</span><br><span class=\"line\">  create&lt;T&gt;(c: &#123; <span class=\"keyword\">new</span> (): T &#125;): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> c();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在以上代码中，我们重新定义了 create 成员方法，根据该方法的签名，我们可以知道该方法接收一个参数，其类型是构造函数类型，且该构造函数不包含任何参数，调用该构造函数后，会返回类型 T 的实例。</p>\n<p>如果构造函数含有参数的话，比如包含一个 number 类型的参数时，我们可以这样定义 create 方法：</p>\n<p>create<T>(c: { new(a: number): T; }, num: number): T {<br>  return new c(num);<br>}</p>\n<p>更新完 GenericCreator 泛型类，我们就可以使用下面的方式来创建 FirstClass 和 SecondClass 类的实例:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> creator1 = <span class=\"keyword\">new</span> GenericCreator&lt;FirstClass&gt;();</span><br><span class=\"line\"><span class=\"keyword\">const</span> firstClass: FirstClass = creator1.create(FirstClass);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> creator2 = <span class=\"keyword\">new</span> GenericCreator&lt;SecondClass&gt;();</span><br><span class=\"line\"><span class=\"keyword\">const</span> secondClass: SecondClass = creator2.create(SecondClass);</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":["TypeScript"]},{"title":"Node：值得看的文章","url":"http://jocolorful.com/2022/03/19/Node-Artical-to-read/","content":"<p><a href=\"https://www.nodejs.red/#/\" target=\"_blank\" rel=\"noopener\">Nodejs技术栈</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["Node.js"],"tags":[]},{"title":"React 资料集","url":"http://jocolorful.com/2022/03/19/前端-React资料集/","content":"<ul>\n<li><a href=\"https://react.iamkasong.com/\" target=\"_blank\" rel=\"noopener\">React 技术揭秘</a></li>\n<li><a href=\"https://github.com/neroneroffy/react-source-code-debug\" target=\"_blank\" rel=\"noopener\">React source debug</a></li>\n<li><a href=\"https://zh-hans.reactjs.org/docs/optimizing-performance.html\" target=\"_blank\" rel=\"noopener\">从官网的角度看 React 的性能优化</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/VDw0Y6PnSaDEpiu2fb6G9w\" target=\"_blank\" rel=\"noopener\">使用爬虫盘点一下掘金 2021 高赞 React 文章</a></li>\n<li><a href=\"https://juejin.cn/post/7008433550307360798\" target=\"_blank\" rel=\"noopener\">useMemo, useCallback, useEffect 三者区别</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":["React"]},{"title":"关于 2021 的一些总结","url":"http://jocolorful.com/2021/12/29/生活-关于2021的一些总结/","content":"<p>今天是 2021-12-29，今年在公司呆的最后一天。和同事们聚完餐，就放假在家等待 2022 的到来，戏谑的是我的两天假期居然是前年快过期了的。</p>\n<a id=\"more\"></a>\n<p>满满当当的一年很充实，深刻地明确自己的优缺点，也善于发现别人的优缺点。</p>\n<p>也许这些缺点这就像是刻在基因的斑点，隐忍着疼痛也很难刮擦干净。</p>\n<h1 id=\"2021的-flag\"><a href=\"#2021的-flag\" class=\"headerlink\" title=\"2021的 flag\"></a>2021的 flag</h1><p>去年的 flag 是写一下周记，看起来我执行得还不错。即便有些波澜不惊的小事确实也不知道写什么。<br>今年还是想逼着自己多写多记录还有… …多思考。</p>\n<h1 id=\"买房\"><a href=\"#买房\" class=\"headerlink\" title=\"买房\"></a>买房</h1><p>买了房就像是蜗牛有了重重的壳，虽然沉重但也有了自己的家。大概也成了我静下心了做很多事情的原动力，我很庆幸在这一年上了车。</p>\n<h1 id=\"朋友\"><a href=\"#朋友\" class=\"headerlink\" title=\"朋友\"></a>朋友</h1><p>我很喜欢和 yayao 在一起，大概是因为有了一段新的友情，而这段友情还没有任何的斑渍便很想好好地去呵护。</p>\n<p>回首 27 年，我还没有一个长期而又稳定的朋友，或许大部分的人都没有。我一心地想要和「她们」靠齐，但现实是我永远是 outsider，因为有了 yayao，我们让别人成为了「局外人」。</p>\n<h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><p>我只能说，我做事一向很认真。生活是，工作亦是如此。一步一个脚印，不积跬步无以至千里。需要学习依旧很多，继续努力！</p>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><p>辞去了「青青」的领队一职，自己的时间便多了好多出来。没有后悔退出，那后悔在青青的日子吗？<br>有点吧，浪费了一些时间去做一些不必要的事情。但估计年老的时候不会后悔，甚至可以做为炫耀的资本。</p>\n<p>希望明年可以抽一些时间去看看想去看的风景，去看看不同的山、水、街道、河流</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"一些生僻的 HTML 标签","url":"http://jocolorful.com/2021/11/08/前端-一些生僻的HTML标签/","content":"<h1 id=\"map-和-area\"><a href=\"#map-和-area\" class=\"headerlink\" title=\"map 和 area\"></a>map 和 area</h1><p>图片上定义一个热点区域，可以关联一个超链接；area 元素仅在 map 元素内部使用。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/area\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/area</a></p>\n<h1 id=\"base-文档根-URL-元素\"><a href=\"#base-文档根-URL-元素\" class=\"headerlink\" title=\"base 文档根 URL 元素\"></a>base 文档根 URL 元素</h1><a id=\"more\"></a>\n\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/base\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/base</a><br>如果指定了以下任一属性，这个元素必须在其他任何属性是URL的元素之前。例如：<link> 的 href 属性。</p>\n<ol>\n<li>href：用于文档中相对 URL 地址的基础 URL。允许绝对和相对URL。</li>\n<li>target</li>\n</ol>\n<p>值得注意的是：</p>\n<ol>\n<li>多个 base 元素会默认只用第一个。</li>\n<li><a href=\"https://ogp.me/\" target=\"_blank\" rel=\"noopener\">Open Graph（开放图谱协议）</a>不接受 base 元素<br>其实就是一些 Meta 标签，是 facebook 制定的协议。在 facebook 分享链接链接时能够，分享信息呈现出</li>\n</ol>\n<h1 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h1><p>object 标签作用跟 embed 相似，也是插入外部资源，由浏览器插件处理。它可以视为 embed 的替代品，有标准化行为，只限于插入少数几种通用资源，没有历史遗留问题，因此更推荐使用。</p>\n<p><a href=\"https://www.bookstack.cn/read/html-tutorial/spilt.6.docs-multimedia.md\" target=\"_blank\" rel=\"noopener\">https://www.bookstack.cn/read/html-tutorial/spilt.6.docs-multimedia.md</a></p>\n<h1 id=\"track\"><a href=\"#track\" class=\"headerlink\" title=\"track\"></a>track</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/track\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/track</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"Next.js v12的理解","url":"http://jocolorful.com/2021/11/06/前端-Next-js-V12的理解/","content":"<p><a href=\"https://nextjs.org/blog/next-12\" target=\"_blank\" rel=\"noopener\">https://nextjs.org/blog/next-12</a></p>\n<a id=\"more\"></a>\n\n<ol>\n<li>Rust 编译器：约 3 倍的快速刷新和约 5 倍的构建速度</li>\n<li>中间件（beta）：通过配置代码在 Next.js 中实现完全的灵活性</li>\n<li>React 18 支持：现在支持原生 Next.js API，以及 Suspense</li>\n<li><Image />AVIF 支持：选择性压缩 20% 的图像</li>\n<li>Bot-aware ISR Fallback：为网络爬虫优化 SEO</li>\n<li>原生 ES 模块支持：与标准化模块系统保持一致</li>\n<li>URL Imports（alpha）：从任何 URL 导入包，无需安装</li>\n<li>React Server Components (alpha)：立即试用，包括 SSR 流</li>\n</ol>\n<h1 id=\"使用-Rust-编译器实现更快的构建和快速刷新\"><a href=\"#使用-Rust-编译器实现更快的构建和快速刷新\" class=\"headerlink\" title=\"使用 Rust 编译器实现更快的构建和快速刷新\"></a>使用 Rust 编译器实现更快的构建和快速刷新</h1><ol>\n<li>大型代码库的进一步速度提升</li>\n<li>提高了对性能的可观察性</li>\n<li>底层 webpack 改进</li>\n</ol>\n<p>使用 Rust 替代 Babel，包括用于实现转换的全新 Rust CSS 解析器「styled-jsx」，压缩比 Terser 快 7 倍。</p>\n<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><p><a href=\"https://www.youtube.com/watch?v=WlP2TB2ORL4\" target=\"_blank\" rel=\"noopener\">中间件 + 边缘节点 = edge function？</a><br><a href=\"https://vercel.com/features/edge-functions\" target=\"_blank\" rel=\"noopener\">edge-functions</a></p>\n<h1 id=\"Preparing-for-React-18\"><a href=\"#Preparing-for-React-18\" class=\"headerlink\" title=\"Preparing for React 18\"></a>Preparing for React 18</h1><p><a href=\"https://nextjs.org/docs/advanced-features/react-18\" target=\"_blank\" rel=\"noopener\">react-18</a></p>\n<p>React 18 的新 feature 包括：Suspense、自动批量更新、startTransition 还有一些新的为服务端渲染准备的流式 API。</p>\n<h2 id=\"Server-Side-Streaming\"><a href=\"#Server-Side-Streaming\" class=\"headerlink\" title=\"Server-Side Streaming\"></a>Server-Side Streaming</h2><p>React 18 中的并发功能包括对服务端 Suspense 和 SSR 流支持的内置支持。这允许使用 HTTP 流来服务器呈现页面。这是 Next.js 12 中的一项实验性功能，但一旦启用，SSR 将使用与中间件相同的严格运行时。</p>\n<h2 id=\"React-Server-Components\"><a href=\"#React-Server-Components\" class=\"headerlink\" title=\"React Server Components\"></a>React Server Components</h2><p>React Server Components 允许我们在服务器上渲染所有内容包括组件本身。这与在服务器上预先生成 HTML 的服务器端呈现有着根本的不同。 <font size=\"blod\">zero client-side JavaScript needed</font>，使页面呈现速度更快。这改善了应用程序的用户体验，将服务器渲染的最佳部分与客户端交互性相结合。</p>\n<h1 id=\"ES-模块支持和-URL-导入\"><a href=\"#ES-模块支持和-URL-导入\" class=\"headerlink\" title=\"ES 模块支持和 URL 导入\"></a>ES 模块支持和 URL 导入</h1><p><a href=\"https://nextjs.org/docs/api-reference/next.config.js/url-imports\" target=\"_blank\" rel=\"noopener\">url-imports</a></p>\n<h1 id=\"Bot-Aware-ISR-Fallback\"><a href=\"#Bot-Aware-ISR-Fallback\" class=\"headerlink\" title=\"Bot-Aware ISR Fallback\"></a>Bot-Aware ISR Fallback</h1><p><a href=\"https://juejin.cn/post/6977783923099041800\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/post/6977783923099041800</a></p>\n<p>静态页面可以在运行时（按需）生成，而不是用 ISR 在构建时生成。使用分析、A/B 测试或其他指标，你可以灵活地对构建时间做出自己的权衡。</p>\n<h2 id=\"静态网站的生成\"><a href=\"#静态网站的生成\" class=\"headerlink\" title=\"静态网站的生成\"></a>静态网站的生成</h2><p>ISR 对于小型网站来说并不总是有意义的。如果你的重新验证期大于重建整个网站所需的时间，你还不如使用传统的静态网站生成。</p>\n<p>ISR（增量静态再生）</p>\n<h1 id=\"Smaller-images-using-AVIF\"><a href=\"#Smaller-images-using-AVIF\" class=\"headerlink\" title=\"Smaller images using AVIF\"></a>Smaller images using AVIF</h1><h1 id=\"Output-File-Tracing\"><a href=\"#Output-File-Tracing\" class=\"headerlink\" title=\"Output File Tracing\"></a>Output File Tracing</h1><h1 id=\"Other-Improvements\"><a href=\"#Other-Improvements\" class=\"headerlink\" title=\"Other Improvements\"></a>Other Improvements</h1><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["Node.js"],"tags":[]},{"title":"package.json 字段","url":"http://jocolorful.com/2021/11/06/package.json 字段详解/","content":"<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"test-project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"A test-project project\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"src/main.js\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"engines\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"string\">\"&gt;= 6.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"npm\"</span>: <span class=\"string\">\"&gt;= 3.0.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"browserslist\"</span>: [<span class=\"string\">\"&gt; 1%\"</span>, <span class=\"string\">\"last 2 versions\"</span>, <span class=\"string\">\"not ie &lt;= 8\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"name-字段\"><a href=\"#name-字段\" class=\"headerlink\" title=\"name 字段\"></a>name 字段</h1><p>如果有组织，一般都是「@org/package-name」的命名，（比如 @babel/cli）值得注意的是这里 packege-name 不再支持大写，需要以「_」或「-」命名</p>\n<h1 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h1><p>需要遵循 <a href=\"https://semver.org/\" target=\"_blank\" rel=\"noopener\">semver</a>，简单来说对于版本「A.B.C」</p>\n<p>A 版本是 Major （主要）版本，一般会有比较大的 breaking change<br>B 版本是 Minor （次要）版本，其发版是包含新的 feature<br>C 版本是 Patch（补丁） 版本，bugfix 版本</p>\n<h1 id=\"engines-和-engineStrict\"><a href=\"#engines-和-engineStrict\" class=\"headerlink\" title=\"engines 和 engineStrict\"></a>engines 和 engineStrict</h1><p><strike>目前已经 Node 弃用</strike>，但是会发出警告。<br>可以使用来严格控制 Node 的版本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  <span class=\"attr\">\"engines\"</span> : &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"npm\"</span>: <span class=\"string\">\"please-use-yarn\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"yarn\"</span>: <span class=\"string\">\"&gt;= 1.17.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node\"</span>: <span class=\"string\">\"&gt;= 12.5.0\"</span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h1><p>在 JS 的世界中，存在着两种影响力最大的模块规范: CommonJS Modules 以及 ECMAScript Modules。Node.js 从 v12 起就全部支持了</p>\n<p>.js .cjs 文件默认以 CommonJS Modules 执行，.mjs 则默认以 ECMAScript Modules 执行。</p>\n<p>而 「type」 字段的出现让我们更好得决定 .js 文件被哪种模块规范执行，它的值有两个，分别是 「module」 和 「commonjs」。</p>\n<h1 id=\"exports\"><a href=\"#exports\" class=\"headerlink\" title=\"exports\"></a>exports</h1><p>「exports」 字段允许你通过引用自己的 package-name 来定义 package 的入口文件，举个例子：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"pkg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"exports\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\".\"</span>: <span class=\"string\">\"./main.mjs\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"./foo\"</span>: <span class=\"string\">\"./foo.js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上可以被解读为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"exports\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"pkg\"</span>: <span class=\"string\">\"pkg/main.mjs\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pkg/foo\"</span>: <span class=\"string\">\"pkg/foo.js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从 Node.js v12 开始被支持，并作为 「main」 字段的替代方案。他最大的一个特性就是 「条件导出（Conditional Exports）」，当该 package 被导入时，能够判断被导入时的模块环境，从而执行不同的文件，简而言之就是，我们如果使用 import 命令，入口会加载 ECMAScript Modules 文件，如果使用 require 命令，入口则加载 CommonJS Modules 文件。</p>\n<p>注意：<font color=red>对于所有在「exports」中定义的路径都必须是绝对路径。即 ./ 的形式。</font></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["Node.js"],"tags":[]},{"title":"不常见但实用的伪元素","url":"http://jocolorful.com/2021/07/28/CSS-伪元素/","content":"<p>CSS 的伪元素目前一共有八种，孤陋寡闻的我只会「before」和 「after」:</p>\n<a id=\"more\"></a>\n\n<ul>\n<li>::after</li>\n<li>::before</li>\n<li>::first-letter</li>\n<li>::first-line</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/::marker\" target=\"_blank\" rel=\"noopener\">::marker</a></li>\n<li>::selection</li>\n</ul>\n<h2 id=\"Content-属性\"><a href=\"#Content-属性\" class=\"headerlink\" title=\"Content 属性\"></a>Content 属性</h2><p>1.「content」属性是必须的，Content 默认是 「display-inline」<br>2.「content」是不能被用户选择的</p>\n<h3 id=\"从-arrt-属性获取现实的数据\"><a href=\"#从-arrt-属性获取现实的数据\" class=\"headerlink\" title=\"从 arrt() 属性获取现实的数据\"></a>从 arrt() 属性获取现实的数据</h3><p>可以从属性值上获取数据</p>\n<p><code>&lt;p data-before-text=&quot;foo&quot;&gt;hello world&lt;/p &gt;\ncontent: attr(data-before-text);</code></p>\n<h3 id=\"使用-url\"><a href=\"#使用-url\" class=\"headerlink\" title=\"使用 url\"></a>使用 url</h3><p>=======<br><code>&lt;p data-before-text=&quot;foo&quot;&gt;hello world&lt;/p&gt;\ncontent: attr(data-before-text);</code></p>\n<h3 id=\"使用-url-1\"><a href=\"#使用-url-1\" class=\"headerlink\" title=\"使用 url\"></a>使用 url</h3><p><code>content: url(https://unsplash.it/15/15);</code></p>\n<p>除了 url 还可以使用以下<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/content\" target=\"_blank\" rel=\"noopener\">属性</a>：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/counter()\" target=\"_blank\" rel=\"noopener\">counter</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/quotes）\" target=\"_blank\" rel=\"noopener\">quotes</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"位运算","url":"http://jocolorful.com/2021/07/22/算法-位运算/","content":"<blockquote>\n<p>我钟爱位运算，亦如炉石拿着最原始的卡组打着最艰难的怪……</p>\n</blockquote>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>从现代计算机中所有的数据二进制的形式存储在设备中。即 0、1 两种状态，计算机对二进制数据进行的运算(+、-、*、/) 都是叫位运算，即将符号位共同参与运算的运算。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"位运算概览\"><a href=\"#位运算概览\" class=\"headerlink\" title=\"位运算概览\"></a>位运算概览</h1><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n<th>运算规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>与</td>\n<td>两个位都为 1 时，结果才为 1</td>\n</tr>\n<tr>\n<td>&#124;</td>\n<td>或</td>\n<td>两个位都为 0 时，结果才为 0</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>两个位相同为 0，相异为 1</td>\n</tr>\n<tr>\n<td>～</td>\n<td>取反</td>\n<td>0 变 1，1 变 0</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>各二进位全部左移若干位，高位丢弃，低位补 0</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>各二进位全部右移若干位，对无符号数，高位补 0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</td>\n</tr>\n</tbody></table>\n<h1 id=\"LeetCode-精题\"><a href=\"#LeetCode-精题\" class=\"headerlink\" title=\"LeetCode 精题\"></a>LeetCode 精题</h1><h2 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h2><p>（爱别人胜过爱自己）</p>\n<ul>\n<li><p>$a$ $^$ $a$ $=0$： 自己异或自己等于 0</p>\n</li>\n<li><p>$a$ $^$ $0$ $=a$：任何数字和0异或还等于他自己</p>\n</li>\n<li><p>$a$ $^$ $b$ $^$ $c$=$a$ $^$ $c$ $^$ $b$；异或运算具有交换律</p>\n</li>\n<li><p><a href=\"https://leetcode-cn.com/problems/single-number/\" target=\"_blank\" rel=\"noopener\">只出现一次的数字</a></p>\n</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["算法"],"tags":[]},{"title":"三亚之旅","url":"http://jocolorful.com/2021/07/20/生活-GoforSanya/","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>身份证</li>\n<li>充电宝</li>\n<li>防水袋</li>\n<li>防晒物品（冰袖、墨镜、防晒霜、帽子）</li>\n<li>日用：护肤品、口罩、游泳装备、防虫喷雾、雨衣、拖鞋、睡衣</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"行程\"><a href=\"#行程\" class=\"headerlink\" title=\"行程\"></a>行程</h2><p>住：三亚湾喜来登酒店（附近的六盘村吃食基本没有踩雷）</p>\n<ul>\n<li>day1：<br>  凌晨四点多，起床出发前往首都机场。7:30 准时出发，11 点到达。<br>  中午吃「海南私房菜」：文昌鸡、菠萝炒饭、蝴蝶虾，清补凉… 人均 ¥80<br>  下午租车一路向西，南山是终点也是起点，经过天涯小镇，椰梦长廊。<br>  晚上吃「萌哒哒椰子鸡」：大吉大利、天天吃鸡（我老板第二天又跑去吃了…hhh）人均 ¥80</li>\n</ul>\n<center>\n    <img src=\"/images/生活-三亚-02.jpeg\" width=\"600px\" />\n    <br/>\n    <p>椰梦长廊</p>\n</center>\n\n<center>\n    <img src=\"/images/生活-三亚-03.jpeg\" width=\"400px\" />\n    <p>天涯小镇</p>\n</center>\n\n<ul>\n<li><p>day2:<br>  上午：亚龙湾热带天堂森林公园，门票（飞猪）人均 ¥198。<br>  可以看到很美的海湾，并且可能天气太热，并没有遇上毒蚊子。<br>  吃：「于春正椰奶清补凉」（椰奶炒冰、酸粉）人均 ¥35。</p>\n<p>  下午：亚特兰蒂斯水世界，门票（飞猪）¥198。<br>  吃：「小胡子海鲜」（波士顿龙虾、皮皮虾、扇贝…）人均 ¥170</p>\n</li>\n<li><p>day3：</p>\n<p>  上午：潜水 + 香蕉船 + 摩托艇 （套票：500 联系的酒店包接送，忘记吃饭了 T.T）潜水的水质并不好很浑浊，鱼的种类也很少，只有一种小丑鱼。<br>  但香蕉 🍌 船却意外地好玩，摩托艇大家都自己开，但到了我全程都是教练开，我已经是个成年人了喂 🤦‍♀️</p>\n<p>  下午：酒店游泳 + 最美公路 + 椰梦长廊（五点左右先前往最美公路，再前往梦长廊，七点的落日）<br>  晚上吃：海鲜市场。在椰梦长廊附近的市场购买，然后让店家加工；<font color=\"red\">购买时我们遇上了黑心的店家，喊价时比旁边的几家都低了很多，但是在打单子的时候单价却高出了很多。</font>😡</p>\n<center><img src=\"/images/生活-三亚-01.jpeg\" width=\"500px\" /></center>\n</li>\n<li><p>day4：<br>  酒店休息，准备返程</p>\n</li>\n</ul>\n<h2 id=\"返程\"><a href=\"#返程\" class=\"headerlink\" title=\"返程\"></a>返程</h2><p>回来的飞机餐不错海南航空提供的「海南鸡米饭」。</p>\n<p>落地时，微信群爆出隔壁的酒店「红树林」有从湖南来玩的游客，是新冠的携带者的消息。大家都慌了神，第二天都赶紧预约了核酸检测。</p>\n<center><img src=\"/images/生活-三亚-05.jpeg\" width=\"600px\" /></center>\n\n<center><img src=\"/images/生活-三亚-04.jpeg\" width=\"400px\" /></center>\n\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"递归总结","url":"http://jocolorful.com/2021/07/16/算法-递归总结/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h2 id=\"递归：Recusion\"><a href=\"#递归：Recusion\" class=\"headerlink\" title=\"递归：Recusion\"></a>递归：Recusion</h2><a id=\"more\"></a>\n<blockquote>\n<p>Recusion is an approach to solve problems using a function that calls itself as a subroutine</p>\n</blockquote>\n<h2 id=\"函数结构\"><a href=\"#函数结构\" class=\"headerlink\" title=\"函数结构\"></a>函数结构</h2><p>一般来讲，递归函数 = 终止条件（Base case） + 递归关系（Recusion relation）。</p>\n<p>Base case：最小问题的解决方式<br>Recusion relation：大问题和小问题的关系</p>\n<h2 id=\"计算机的实现方法\"><a href=\"#计算机的实现方法\" class=\"headerlink\" title=\"计算机的实现方法\"></a>计算机的实现方法</h2><ol>\n<li>任何一个函数的调用，计算机会在内存中生成一块区域，用于存放函数的参数，返回的地址等，这块区域叫做「栈」。</li>\n<li>递归函数的调用会生成一系列的栈</li>\n</ol>\n<h1 id=\"递归一般有三种形式：\"><a href=\"#递归一般有三种形式：\" class=\"headerlink\" title=\"递归一般有三种形式：\"></a>递归一般有三种形式：</h1><h2 id=\"缓存（Memoization）\"><a href=\"#缓存（Memoization）\" class=\"headerlink\" title=\"缓存（Memoization）\"></a>缓存（Memoization）</h2><p>以经典的 <a href=\"https://leetcode-cn.com/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener\">斐波那契数列</a> 为例</p>\n<ol>\n<li>Base case：</li>\n</ol>\n<p>$F(0) = 0;F(1) = 1$</p>\n<ol start=\"2\">\n<li>Relation</li>\n</ol>\n<p>$F(n) = F(n - 1) + F(n - 2)$</p>\n<p>根据这两个条件很容易得出递归函数，而为什么需要引入缓存：</p>\n<center>\n    <img src=\"/images/算法-递归缓存.jpg\"  width=\"500px\" />\n</center>\n\n<p>如上图：f(4) = f(3) + <font color=\"red\">f(2)</font></p>\n<p>而 f(3) = <font color=\"red\">f(2)</font> + f(1)</p>\n<p>在计算 $f(3)$ 时，我们其实已经计算过 $f(2)$ 的结果，将 $f(2)$ 存入缓存则可以减少以空间换时间。</p>\n<p>相关题目：</p>\n<p><a href=\"https://leetcode-cn.com/problems/climbing-stairs/\" target=\"_blank\" rel=\"noopener\">爬楼梯</a></p>\n<h2 id=\"分治（Divide-and-Conquer）\"><a href=\"#分治（Divide-and-Conquer）\" class=\"headerlink\" title=\"分治（Divide and Conquer）\"></a>分治（Divide and Conquer）</h2><blockquote>\n<p>分而治之，几乎等同与标准的递归，唯一的区别是。最后需要将子问题的结果合并。</p>\n</blockquote>\n<ul>\n<li>Divide：将问题 $S$ 分解为子问题 {$S1$, $S2$, …$Sn$}</li>\n<li>Conquer：递归解决小问题</li>\n<li>Combine：合并每个结果</li>\n</ul>\n<p>以 <a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">98. 验证二叉搜索树</a> 为例</p>\n<p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。<br>一个二叉搜索树具有如下特征：</p>\n<ul>\n<li>节点的左子树只包含小于当前节点的数。</li>\n<li>节点的右子树只包含大于当前节点的数。</li>\n<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isValidBST = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">valid</span>(<span class=\"params\">root, low = -Infinity, high = Infinity</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left &amp;&amp; (root.left.val &gt;= root.val) || root.val &gt;= high ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right &amp;&amp; (root.right.val &lt;= root.val) || root.val &lt;= low ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125; <span class=\"comment\">// base case</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (valid(root.left, low, root.val) &amp;&amp; valid(root.right, root.val, high)) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> valid(root)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>base case: 如果左边的节点大于当前节点或者当前节点大于父节点，则为 fasle。右子树同理条件反之。</li>\n<li>分治：将树 分解为左子树和右子树的校验的子问题</li>\n<li>结合：将结果合并</li>\n</ul>\n<p>将问题分解为：验证左子树 和 验证右子树。</p>\n<h3 id=\"分治模板\"><a href=\"#分治模板\" class=\"headerlink\" title=\"分治模板\"></a>分治模板</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">divideAndConquer</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    [S1, S2, ...Sn] = divide(S)</span><br><span class=\"line\">    rets = <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; Things.length; i++) &#123;</span><br><span class=\"line\">        divideAndConquer(Things[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [R1, R2, ...Rn] = rets</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Combine([R1, R2, ...Rn])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回溯（Backtracking）\"><a href=\"#回溯（Backtracking）\" class=\"headerlink\" title=\"回溯（Backtracking）\"></a>回溯（Backtracking）</h2><blockquote>\n<p>回溯问题的一般形式：寻找所有满足 XXX 条件的结果，并且问题可以递归实现。</p>\n</blockquote>\n<p>以 <a href=\"https://leetcode-cn.com/problems/generate-parentheses/\" target=\"_blank\" rel=\"noopener\">LC22: 括号生成</a> 为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">=======</span><br><span class=\"line\">Base <span class=\"keyword\">case</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">$F(<span class=\"number\">0</span>) = <span class=\"number\">0</span>;F(<span class=\"number\">1</span>) = <span class=\"number\">1</span>$</span><br><span class=\"line\"></span><br><span class=\"line\">Relation</span><br><span class=\"line\"></span><br><span class=\"line\">$F(n) = F(n - <span class=\"number\">1</span>) + F(n - <span class=\"number\">2</span>)$</span><br><span class=\"line\"></span><br><span class=\"line\">根据这两个条件很容易得出递归函数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`js</span></span><br></pre></td></tr></table></figure>\n<p>为什么需要引入缓存：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">st&#x3D;&gt;start: F(4)</span><br><span class=\"line\">op1&#x3D;&gt;operation: F(3)</span><br><span class=\"line\">op2&#x3D;&gt;operation: F(2)</span><br><span class=\"line\">op3&#x3D;&gt;operation: F(1)</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op1-&gt;op2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分治（Divide-and-Conquer）-1\"><a href=\"#分治（Divide-and-Conquer）-1\" class=\"headerlink\" title=\"分治（Divide and Conquer）\"></a>分治（Divide and Conquer）</h2><h2 id=\"回溯（Backtracking）-1\"><a href=\"#回溯（Backtracking）-1\" class=\"headerlink\" title=\"回溯（Backtracking）\"></a>回溯（Backtracking）</h2><p>1.</p>\n<p><a href=\"https://leetcode-cn.com/problems/generate-parentheses/\" target=\"_blank\" rel=\"noopener\">LC22: 括号生成</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> generateParenthesis = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = []</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">backtracking</span>(<span class=\"params\">charactor = <span class=\"string\">''</span>, left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (charactor.length === <span class=\"number\">2</span> * n) &#123;</span><br><span class=\"line\">            result.push(charactor)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; n) &#123;</span><br><span class=\"line\">            backtracking(charactor + <span class=\"string\">'('</span>, left + <span class=\"number\">1</span>, right)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">            backtracking(charactor + <span class=\"string\">')'</span>, left, right + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    backtracking(<span class=\"string\">''</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用两个 if 判断是否可以添加左右括号。不满足 if 的则为无效表达式</li>\n<li>使用 charactor 表示当前变量。</li>\n</ul>\n<h3 id=\"回溯模板\"><a href=\"#回溯模板\" class=\"headerlink\" title=\"回溯模板\"></a>回溯模板</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">backtrack</span>(<span class=\"params\">candiate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> findSolution(candiate) &#123;</span><br><span class=\"line\">        outPut(candiate)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (nextCandidate <span class=\"keyword\">in</span> listOfCandiate) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_validate(nextCandidate)) &#123;</span><br><span class=\"line\">            place(nextCandidate)</span><br><span class=\"line\">            backtrack(nextCandidate)</span><br><span class=\"line\">            remove(nextCandidate)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相关习题：</p>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/validate-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">98. 验证二叉搜索树</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/fibonacci-number/\" target=\"_blank\" rel=\"noopener\">509. Fibonacci Number</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/generate-parentheses/\" target=\"_blank\" rel=\"noopener\">22. 括号生成</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["算法"],"tags":[]},{"title":"盛夏归家","url":"http://jocolorful.com/2021/07/15/生活-盛夏归家/","content":"<p style=\"text-align:center\">\n苍霭飞云渡，江森楚天沉。<br/>\n光谲影沙西，破岸又一程。\n</p>\n\n<center><img src=\"/images/生活-归家.jpg\"  width=\"500px\" /></center>\n<a id=\"more\"></a>\n仁者乐山、智者乐水。山水又一程，七月我又回到了我热爱的山水城市 —— 重庆。\n\n<p>温度适宜，暴晒也还在蛰伏之中。</p>\n<p>爸爸五十岁生日，叔叔们早就提前了他们的狂欢吃了起来：「乌江鱼豆花鱼」、「土家山珍」、「赵二哥羊肉馆」吃食都是十几年的老店。二妈也为爸爸准备了蛋糕、鲜花。</p>\n<p>对于「病怏怏」的爸爸来说，大家都知道生日对他意味着什么，不提起就没发生过。我们都是乐观的人。爸爸今年看起来胖了一点，气色也好了很多，希望我每年都可以陪他快快乐乐地过生日。</p>\n<p>往返家乡最喜欢的是高速路上的风景：大江大河的重庆，朴实的家乡人顶着酷暑用肩挑背扛建造出一座漂亮的城市。返程前下了整夜的雨，第二天雾气迟迟散不开来。我兴奋地在微信群里喊叫到：「我看见了云海」。极目远眺：云雾亲吻着山脉，风一吹厚重的云垛缓缓蠕动和山缠绵在一起迟迟不愿意分开。大巴在高速行驶着会穿过各种长度的隧道、桥梁。最喜欢过桥，这些桥梁要么架设在大山之间、要么架设在江河之上。大巴快速地行驶至河面的大桥时，光柱从西边的天空中倾泻到河面上，只透出薄薄的一层。灰色的云将天空压得很低。墨色的两岸嵌着白色的房屋，乡村公路似玉带般缠绕在山的腰间。飞驰而过不能让我停下来好好欣赏这美景。原来我现在追求的美景从小就陪伴着我，抑或是我一直在找寻童年的美好。</p>\n<p>在重山之中，在大河之山，在天际尽头… …</p>\n<p>回程的暴雨让我经历了人生的第一次备降，我总是会对各种第一次感到兴奋。曲折的返程大概是经历了：航班取消，飞机本从晚七点延误到晚九点，航程中飞机不断在空中盘旋画圈。印象最深刻是在吕梁山附近盘旋了至少五圈，在迫近北京附近，由于雷雨天气直接飞到了内蒙，约摸十一点半的时候机长很无奈地宣布需要迫降沈阳。这使我格外的兴奋。因为机长的语气里至少带了些许的人的情感，不再是冷冰冰地用机器宣布：「我和我的组员一定会保证您安全抵达」。当夜，我们离机场 30km 的酒店休息，凌晨三点多，办好入住终于可以休息了（完美错过北京暴雨，竟有一些遗憾 doge）虽然第二天是在家办公，但是心里慌得很，很怕其他人来找我或者有线上问题不能及时处理。</p>\n<p>四天三夜三座城市，恍如隔世。一场长长的梦… ….</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"咖啡咖啡","url":"http://jocolorful.com/2021/07/14/阅读-咖啡咖啡/","content":"<p><a href=\"https://book.douban.com/subject/11594188/\" target=\"_blank\" rel=\"noopener\">《咖啡咖啡》</a></p>\n<a id=\"more\"></a>\n<h2 id=\"咖啡的情史\"><a href=\"#咖啡的情史\" class=\"headerlink\" title=\"咖啡的情史\"></a>咖啡的情史</h2><blockquote>\n<p>拜伦： 终于来了，那小小的瓷器里，乘着摩卡的浆果，带着阿拉伯的风情，小杯镶嵌金丝细边，免得烫伤手指。咖啡伴着丁香、肉桂与番红花，宠坏了土耳其人。</p>\n</blockquote>\n<h3 id=\"发现咖啡的牧羊人\"><a href=\"#发现咖啡的牧羊人\" class=\"headerlink\" title=\"发现咖啡的牧羊人\"></a>发现咖啡的牧羊人</h3><p>咖啡的故乡是埃塞俄比亚 🇪🇹，传说距今 1500 年地埃塞比亚高原，一位叫卡尔迪的牧羊人发现羊群中总有一些焦躁不安或异常兴奋的「捣乱分子」，甚至会抬起前腿与人共舞。根据卡尔迪观察发现，那些羊群兴奋是吃了绿色灌木的红色果实。当他以「第一个吃螃蟹」的大无畏精神尝了这些果实之后发现自己的精神极度旺盛起来。于是，这种具备兴奋提神的果实被越来越的人认识，并且在诸多部落间风靡起来。这就是野生的咖啡果。</p>\n<h3 id=\"咖啡的信使\"><a href=\"#咖啡的信使\" class=\"headerlink\" title=\"咖啡的信使\"></a>咖啡的信使</h3><p>历史的时钟往前拨回 1500 年，我们有理由相信咖啡是起源非洲。进入十世纪后，咖啡迎来了自己的信使时代。咖啡最早在宗教仪式中作为兴奋剂的存在，作为特殊的饮品一直在伊斯兰教长期保密不为世人所知。</p>\n<h4 id=\"非：从伊斯兰教大袄奥斯曼土耳其\"><a href=\"#非：从伊斯兰教大袄奥斯曼土耳其\" class=\"headerlink\" title=\"非：从伊斯兰教大袄奥斯曼土耳其\"></a>非：从伊斯兰教大袄奥斯曼土耳其</h4><h4 id=\"欧：登陆欧洲的咖啡\"><a href=\"#欧：登陆欧洲的咖啡\" class=\"headerlink\" title=\"欧：登陆欧洲的咖啡\"></a>欧：登陆欧洲的咖啡</h4><ul>\n<li>🇮🇹 意大利：圣马可是第一家咖啡馆小巧而简洁</li>\n<li>🇩🇪 德国 ：开展了与啤酒的较量</li>\n<li>🇫🇷 法国 ：不喝咖啡就不算晚餐结束（谬塞：如果你没有带够 50 法郎，千万别去推开巴黎咖啡馆的大门）</li>\n<li>🇹🇷 土耳其：维也纳咖啡馆营造了温馨的家庭气氛。咖啡馆有着「第二空间」、「第二会客厅」的美誉<h4 id=\"美-目前咖啡消费最大的国家\"><a href=\"#美-目前咖啡消费最大的国家\" class=\"headerlink\" title=\"美: 目前咖啡消费最大的国家\"></a>美: 目前咖啡消费最大的国家</h4></li>\n<li>🇺🇸美国：咖啡精神：There was nothing could stop person from being what they want, going where want, doing there want.<br>美国是当前世界咖啡领域大量技术、产品、理念的发明者和倡导者。</li>\n</ul>\n<h4 id=\"亚\"><a href=\"#亚\" class=\"headerlink\" title=\"亚:\"></a>亚:</h4><ul>\n<li>🇨🇳 中国：中国的咖啡史需要从清朝说起，主要经历了四个阶段：<ul>\n<li>19 世纪 80 年代：清朝中法战争结束后，开放了蒙自通商口岸。咖啡店、酒吧、网球场出入街头</li>\n<li>20世纪初，法国传教士：田得能从越南将咖啡带到了云南并埋下了咖啡的种子</li>\n<li>50 年代，云南省的农科专家将种子交给了保山潞江坝的农民手里，开始又了滇缅公路沿线的婆娑摇曳的咖啡种子。</li>\n<li>80 年代：雀巢在中国成立合资公司。到目前为止：星巴克、卡夫、麦氏均在云南从事咖啡业务</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"从种植到采摘\"><a href=\"#从种植到采摘\" class=\"headerlink\" title=\"从种植到采摘\"></a>从种植到采摘</h2><p>咖啡有三大原种：阿拉比卡、罗布斯塔、利比亚咖啡；他们的果实大小分别对应了：小粒、中粒、大粒。<br>从「原种」到「品种」，需要不断的培育和杂交。古老的「波旁」和「帝比卡」就是品种的祖先之一。</p>\n<ul>\n<li>艺妓咖啡又称「瑰夏」是目前身价最高的咖啡品种之一，常见于 COE（Cup Of Excellence）大赛中。</li>\n<li>马垃戈日佩「巨型咖啡豆」也是帝比卡的变种是品质出众的咖啡。一般豆子体积越大、饱满品质就越好。</li>\n<li>卡迪姆咖啡云南咖啡「品种之王」、抗病性强。</li>\n</ul>\n<p>影响着咖啡风味的因素往往包含：「海拔」、「土壤」同时还包含「采摘」、「挑选」；<br>优质的咖啡豆往往经历了严格的筛选。</p>\n<h2 id=\"咖啡豆的知识\"><a href=\"#咖啡豆的知识\" class=\"headerlink\" title=\"咖啡豆的知识\"></a>咖啡豆的知识</h2><h3 id=\"咖啡豆的烘焙\"><a href=\"#咖啡豆的烘焙\" class=\"headerlink\" title=\"咖啡豆的烘焙\"></a>咖啡豆的烘焙</h3><p>烘焙有四个程度：浅烘焙、中烘焙、中深烘、深烘焙</p>\n<p>烘焙的酸苦原则：一般随着烘焙深度的提升。咖啡豆的酸味越弱，苦味增强；酸味较重的咖啡豆不宜浅烘焙，而苦味较强劲的咖啡不宜烘焙的过深。</p>\n<h3 id=\"咖啡熟豆的包装\"><a href=\"#咖啡熟豆的包装\" class=\"headerlink\" title=\"咖啡熟豆的包装\"></a>咖啡熟豆的包装</h3><ul>\n<li>带有单向排气阀的铝箔袋是最常见的咖啡豆包装，他能避免腐败味道的生成，但不能阻止咖啡香气的逸散。</li>\n<li>带有橡胶圈密封的玻璃储豆罐、陶瓷储豆罐、锡制储豆罐也都是不错的选择，但塑料制品则不妥。</li>\n</ul>\n<h3 id=\"咖啡熟豆的保存\"><a href=\"#咖啡熟豆的保存\" class=\"headerlink\" title=\"咖啡熟豆的保存\"></a>咖啡熟豆的保存</h3><ul>\n<li>第一：排气保存，尽量排除容器中的剩余空气，减少咖啡熟豆与空气的接触；</li>\n<li>第二，避光保存；</li>\n<li>第三，避免高温；</li>\n<li>第四，密封保存；</li>\n<li>第五，关注新鲜周期</li>\n</ul>\n<h3 id=\"新鲜程度与口感\"><a href=\"#新鲜程度与口感\" class=\"headerlink\" title=\"新鲜程度与口感\"></a>新鲜程度与口感</h3><ul>\n<li>第一：养豆期：刚刚烘焙好的咖啡熟豆应该尽快装入包装袋中，但此时虽然新鲜度最高，但质地并不稳定，会有大量二氧化碳逸出，因此需要我们耐心等待咖啡熟豆进入稳定状态；</li>\n<li>第二：最新鲜期；从养豆期结束开始计算；此时风味最佳大约有两周时间，称为最新鲜期；</li>\n<li>第三：较新鲜期；最新鲜期结束后，咖啡豆逐渐从巅峰状态往下走，品质风味下降速度较慢。新鲜程度依然处在较高水准，我们称之为较新鲜期。时间为一个月左右；</li>\n<li>第四：处置期；较新鲜期结束后，咖啡豆难以担当新鲜二字；但可以用作家庭早餐时的提神咖啡，咖啡小店的当日咖啡或勾兑牛奶、奶油巧克力酱等…</li>\n</ul>\n<h3 id=\"咖啡豆的研磨\"><a href=\"#咖啡豆的研磨\" class=\"headerlink\" title=\"咖啡豆的研磨\"></a>咖啡豆的研磨</h3><p>咖啡熟豆研磨后细胞壁的完全破坏，导致其处于完全开放状态。四周会弥漫着诱人的咖啡香气。这也是咖啡香气快速逸散的过程。咖啡研磨得越粗、咖啡粉的面积越小、被空气氧化速度越慢。</p>\n<p>萃取时与水的接触面积也越小，萃取的有益成分物质越少，咖啡液浓度越低，咖啡液酸味越强，苦味越弱；反之研磨越细：咖啡粉的表面积越大，被空气氧化得越快；萃取时与水的接触面积越大。萃取的有益成分越多。咖啡酸味越弱，苦味越强。</p>\n<h3 id=\"粗度划分\"><a href=\"#粗度划分\" class=\"headerlink\" title=\"粗度划分\"></a>粗度划分</h3><ul>\n<li>粗度研磨：比较适合较粗滤网或咖啡进行较长时间萃取的咖啡制作器具，如法式压滤壶；</li>\n<li>中度研磨：大小介于白砂粒与食盐之间。比较适合虹吸壶，手工滴滤式冲泡等；</li>\n<li>细研磨：和食盐粗度接近。比较适合摩卡壶；</li>\n<li>意式浓缩研磨：介于食盐与面粉之间主要适用于意式浓缩咖啡机萃取；</li>\n<li>土耳其式研磨；与面粉近似。一般用来煮土耳其咖啡比较少见。</li>\n</ul>\n<h3 id=\"冲泡与萃取\"><a href=\"#冲泡与萃取\" class=\"headerlink\" title=\"冲泡与萃取\"></a>冲泡与萃取</h3><p>饮品浓度 = 冲泡比率（Brewing Ratioin） * 萃取程度（Extraction Yield）<br>冲泡比</p>\n<p>冲泡比率：粉水比率；一般 50～65g 咖啡粉对应 1000ml 水。<br>萃取程度：实际被萃取的固体可溶物，咖啡熟豆中 30% 是可溶物质，70% 是无法溶于水的纤维物质。理想的萃取率是 18% ～ 22%；</p>\n<h3 id=\"水质与水温\"><a href=\"#水质与水温\" class=\"headerlink\" title=\"水质与水温\"></a>水质与水温</h3><p>萃取咖啡需要新鲜、无异味、酸碱度适中、无污染的水；</p>\n<ul>\n<li>太纯的水并不好喝</li>\n<li>太硬的水会损坏咖啡机</li>\n</ul>\n<h2 id=\"咖啡的制作\"><a href=\"#咖啡的制作\" class=\"headerlink\" title=\"咖啡的制作\"></a>咖啡的制作</h2><h3 id=\"萃取与冲泡\"><a href=\"#萃取与冲泡\" class=\"headerlink\" title=\"萃取与冲泡\"></a>萃取与冲泡</h3><p>最佳萃取温度应保持在91到94摄氏度，我们称之为最佳萃取水温。</p>\n<p>低于该水温会出现较明显的酸涩味，高于该水温会出现焦苦味。</p>\n<p>萃取后的咖啡液最佳温度应在85摄氏度左右，我们称之为最佳杯中温度。台湾咖啡品牌「85度C」，其讲就便来源于此。</p>\n<p>我们建议最后一口咖啡的咖啡液的温度不应低于 40摄氏度。</p>\n<h4 id=\"冲泡七大基本原则\"><a href=\"#冲泡七大基本原则\" class=\"headerlink\" title=\"冲泡七大基本原则\"></a>冲泡七大基本原则</h4><ul>\n<li>原则一：经历手选，挑出瑕疵豆；</li>\n<li>原则二：新鲜烘焙的咖啡豆；</li>\n<li>原则三：正确且高水准研磨；</li>\n<li>原则四：冲泡水质好；</li>\n<li>原则五：控制适宜的萃取水温；</li>\n<li>原则六，恰当粉水比率，合适冲泡设备；</li>\n<li>原则七，精准而轻柔的冲泡。</li>\n</ul>\n<h4 id=\"关于牛奶\"><a href=\"#关于牛奶\" class=\"headerlink\" title=\"关于牛奶\"></a>关于牛奶</h4><ul>\n<li>全脂奶和脱脂奶：全脂奶和脱脂奶对健康而言，脱脂奶会比全脂奶更加健康；对于香气、口感而言。脱脂奶则会逊色三分。</li>\n<li>炼乳：是一种浓缩甜奶。如果添加过量，会使咖啡口感过甜，让人难以忍受。</li>\n<li>酸奶参与调制的咖啡不仅具有出色，非常出色的口感，同时也使营养健康无匹的良品。</li>\n<li>鲜奶油是咖啡调制领域除牛奶外使用最多的奶制品。其口质感蓬松，口感滑腻广受人们喜爱。</li>\n<li>淡奶油都是不含胆固醇的植物奶油，因为没有加糖，所以叫淡奶油，通常用于制作西餐，在咖啡调制中并不多见。</li>\n</ul>\n<h4 id=\"咖啡伴侣\"><a href=\"#咖啡伴侣\" class=\"headerlink\" title=\"咖啡伴侣\"></a>咖啡伴侣</h4><p>五种常用咖啡糖，同样一杯黑咖啡，搭配不同的糖，会有迥然不同的风味</p>\n<ul>\n<li>绵白糖：无杂质，味道纯净，甜度偏低，易于溶解。</li>\n<li>方糖：由绵白糖制成溶解效率比绵白糖略低但质感强；</li>\n<li>冰糖：是白砂糖的结晶再制品，味道最为纯净，既是优点，也是缺点：冰糖性平入肺脾经，有补气中益气、和胃润肺，润肺止咳等功效，对咖啡恰是有很好的益处。</li>\n<li>黄糖：是甘蔗为原料的制品，溶解度较低，不仅颜色较深更具有一定的焦糖味。甜度高纯度高物质丰富。有些咖啡爱好者，乐此不彼去琢磨哪些特定口味的咖啡是和搭配黄糖。</li>\n</ul>\n<ul>\n<li>风味果露糖浆：选购时应注意是否纯天然，是否含有防腐剂和其他添加剂。是否能够真实代表相应水果或植物的风味特点，以及属于热饮过路还是冷饮果露。</li>\n<li>巧克力酱：是调制摩卡等咖啡饮品时不可或缺的原料，通常购置的品牌巧克力酱甜度都很高，如不控制使用量会起到适得其反的效果。</li>\n<li>红茶：喝咖啡的绝配。调制各种创意咖啡和奶茶最常使用的除了立顿红茶味，便是被叫做阿萨姆的印度红茶。口感浓郁醇厚，又不是甜美丰沛。除此之外，优质的斯里兰卡瓦屋红茶因其浓郁花香中带着些薄荷清爽的气息，也是调制咖啡饮品的上佳之选。</li>\n</ul>\n<h2 id=\"咖啡设备总动员\"><a href=\"#咖啡设备总动员\" class=\"headerlink\" title=\"咖啡设备总动员\"></a>咖啡设备总动员</h2><ul>\n<li>法式压滤壶；</li>\n<li>手工滤滴冲泡；</li>\n<li>越南咖啡滴滤壶；</li>\n<li>瑞士金；</li>\n<li>美式电动滴滤咖啡杯；</li>\n<li>冰滴咖啡壶；</li>\n<li>爱乐壶；</li>\n<li>虹吸式咖啡壶；</li>\n<li>比利时宫廷壶；</li>\n<li>摩卡壶；</li>\n<li>Espresso 咖啡机 （在家选用的咖啡机萃取式 Espresso 咖啡机是最佳选择）</li>\n<li>胶囊咖啡机</li>\n</ul>\n<h2 id=\"咖啡物语\"><a href=\"#咖啡物语\" class=\"headerlink\" title=\"咖啡物语\"></a>咖啡物语</h2><ul>\n<li>美式咖啡：可以看作是美国化的espresso；</li>\n<li>康宝蓝作为一款基于espresso的美味意式咖啡，嫩白嫩白的奶油轻轻漂浮在深沉的咖啡上，宛如一朵出淤泥而不染的白莲花；</li>\n<li>焦糖玛奇雅朵：又意大利文意思就是印记烙印的意思，象征着甜蜜的印记；</li>\n<li>Keno是风靡全球的经典咖啡饮品之一：具有三美：骨架美、心灵美、形象美；<br>……</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["阅读"],"tags":[]},{"title":"长度为3的不同回文子序列","url":"http://jocolorful.com/2021/07/14/算法-长度为3的不同回文子序列/","content":"<p><a href=\"https://leetcode-cn.com/problems/unique-length-3-palindromic-subsequences/\" target=\"_blank\" rel=\"noopener\">长度为3的不同回文子序列</a></p>\n<a id=\"more\"></a>\n\n<p>从前往后遍历，每一次遍历从后往前查与当前相同的值，再查中间不同的值有多少个，并用 hash 去重记录</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["算法"],"tags":[]},{"title":"一个人的好天气","url":"http://jocolorful.com/2021/07/13/阅读-一个人的好天气/","content":"<p><a href=\"https://book.douban.com/subject/2250587/\" target=\"_blank\" rel=\"noopener\">《一个人的好天气》</a>是日本作家青山七惠所著。这本书是大学时期英子姐留在实验室里的书。四五年过去了，这本书一直放在我重庆的家里，扉页早已泛黄。</p>\n<a id=\"more\"></a>\n\n<p>从重庆飞往北京的行程中，我花了一个多小时就把这本书读完。日本的电影和书籍总是给人一种淡淡的感觉。脑海中总能浮现出带有绿色滤镜的画面配有《菊次郎的夏天》的音乐，阳光、满天星、绿色的植物便舞动了起来。    </p>\n<p>「知寿」是文章的主人公，拥有着年轻紧致的肌肤、曼妙的身材。来到东京投靠舅奶奶「吟子」。他们居住的房屋「小院篱笆墙对面就是地铁站，中间只隔着一条小路」。</p>\n<p>知寿有着某种「叛逆」，妈妈希望她可以好好读书也许能在毕业后找一份好的工作。<br>没有结局的恋情，不算稳定的工作，不擅长表达自己，随遇而安。<br>怪癖：喜欢将别人的小小物件偷走，放在自己的鞋盒。</p>\n<p>吟子呢？即便年纪大了，还是会觉得是年轻的延续：喜欢猫，不太爱打扫卫生，和老爷爷谈着恋爱。<br>「也许是经历过了不愉快的事，所以上了年纪就不怕死了」。</p>\n<blockquote>\n<p>我既不悲观，也不乐观，只是每天早上睁开眼睛迎接新的一天，一个人努力过下去。</p>\n</blockquote>\n<blockquote>\n<p>从小我就有爱拿人家东西的毛病。当然，我没有胆子偷商场的东西，一般是偷周围人的小玩意儿来丰富自己的收藏，这成为我小小年纪的最大快感。我收集的不是铅笔盒或者运动鞋之类的东西，而是橡皮啦、彩笔啦、小夹子啦等等微不足道的小物件。我以拍纪念照的心情，把掉在地上或者人家放在课桌里的这些小东西悄悄塞进校服兜里。我认为这不算偷，是回收，我靠这么想来消除罪恶感。没有人觉察更使我快感…</p>\n</blockquote>\n<blockquote>\n<p>不管什么时候，事先预定的别离总是比突然的别离更难。</p>\n</blockquote>\n<blockquote>\n<p>厨房炉灶上，开水自沸腾，无人理睬好悲伤</p>\n</blockquote>\n<blockquote>\n<p>人们不停的从我面前走过，没有人朝我看，他们看起来就像一张铅笔画，要乘着微风飘然而去似的。这张看似平常的纸片却不知不觉中划破了我的皮肤。</p>\n</blockquote>\n<blockquote>\n<p>那儿挂的都是彻罗基的照片。<br>就是死去的猫的意思？<br>怎么说呢，差不多吧。<br>……<br>它们的名字我都忘了。<br>都忘了？啊哈……<br>可悲吧。最早养的猫叫彻罗基，只记得这名字。是侄子捡回来的。</p>\n</blockquote>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["阅读"],"tags":[]},{"title":"Peter.Pan","url":"http://jocolorful.com/2021/07/08/阅读-PeterPan/","content":"<p><a href=\"https://book.douban.com/subject/1386094/\" target=\"_blank\" rel=\"noopener\">《Peter.Pan》</a></p>\n<a id=\"more\"></a>\n\n<h3 id=\"读后感\"><a href=\"#读后感\" class=\"headerlink\" title=\"读后感\"></a>读后感</h3><p>NerverLand 就是一场梦：勇敢、睿智、调皮地面对邪恶都是成人无法再找回的梦。</p>\n<p>一路成长一路失去：无所畏惧、充满向往<br>一路成长一路获得：成长的代价也许就是承受各种痛苦，用苦难打造盔甲的勇士注定所向披靡</p>\n<p>然后 PeterPan 却一直在岛上，陪伴着孩子们的每一个梦….</p>\n<h3 id=\"奇怪的知识又增加了\"><a href=\"#奇怪的知识又增加了\" class=\"headerlink\" title=\"奇怪的知识又增加了\"></a>奇怪的知识又增加了</h3><ul>\n<li><font style=\"font-weight:bold\">Pan 潘神</font>：是希腊神话里的牧神，牧神潘是众神传信者赫密斯的儿子，而名字的原意是一切。掌管树林、田地和羊群的神，有人的躯干和头，山羊的腿、角和耳朵。他的外表后来被天主教形象化成了中世纪欧洲恶魔的原形。喜欢吹潘笛，因为潘笛能催眠。潘神被罗马人等同于罗马宗教中的自然之神法乌努斯（Faunu）或者西尔瓦努斯（Silvānus）</li>\n<li><font style=\"font-weight:bold\">Tinker Bell</font>：叮铃铃。过去人们将从事金属加工的工作者成为 tinker，意为：「补锅匠」。</li>\n<li><font style=\"font-weight:bold\">JOLLY ROGER</font>：快乐罗杰号。Jolly Rogger 意为「海盗旗」、「骷髅旗」。由「Jolly Rouge」（红色的旗子）和 「Old Roger」（噩梦）拼凑而成。</li>\n<li><font style=\"font-weight:bold\">tom-tom</font>：手鼓；据说北美印第安人举行庆典仪式或者传递消息会敲击手鼓。</li>\n<li><font style=\"font-weight:bold\">Rule Britannia</font>：《统治吧！不列颠尼亚！》这是英国海军军歌，同时也被海军陆军使用。也是英国 🇬🇧 的第二国歌</li>\n</ul>\n<h3 id=\"打动人心\"><a href=\"#打动人心\" class=\"headerlink\" title=\"打动人心\"></a>打动人心</h3><blockquote>\n<p>After all, to die will be an awfully big adventure.<br>梦想不再是奢望，梦中的永无岛就在前方，冒险从此起航。</p>\n</blockquote>\n<blockquote>\n<p>When the first baby laughed for the first time, its laugh broke into a thousand pieces, and they all went skipping about, and that was the beginning of fairies.<br>当孩提第一次大笑时，笑声便坠落成成千上万的精灵，他们蹦蹦跳跳地向四处跑去。</p>\n</blockquote>\n<blockquote>\n<p>Every time a child says，”I don’t believe in fairies”, a fairy somewhere falls down dead.<br>当一个小孩不在相信童话，某个角落的精灵便会坠落死去。</p>\n</blockquote>\n<blockquote>\n<p>Indeed a million golden arrows were pointing it out to the children, all directed by their friend the sun, who wanted them to be sure of their way before leaving them for the night.</p>\n</blockquote>\n<blockquote>\n<p>Moonlight was  staring to shine across the waters，and the weew no other sounds but the mameraid calling to the moon.</p>\n</blockquote>\n<blockquote>\n<p>To die will be awful big adventure.</p>\n</blockquote>\n<blockquote>\n<p>None of them knew what was to come. Perhaps it was best no to know. Beacause they did not to konw what was to come, they had one more happy hour to play.</p>\n</blockquote>\n<blockquote>\n<p> Follow me, and all will will be well.</p>\n</blockquote>\n<blockquote>\n<p> On the nerverland, adventure are a daily affair.</p>\n</blockquote>\n<blockquote>\n<p>I’m youth, I’m joy, I’m a little bird that has broken out of the egg.</p>\n</blockquote>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["阅读"],"tags":[]},{"title":"二进制求和","url":"http://jocolorful.com/2021/07/08/算法-二进制求和/","content":"<p><a href=\"https://leetcode-cn.com/problems/add-binary/\" target=\"_blank\" rel=\"noopener\">二进制求和</a></p>\n<a id=\"more\"></a>\n<ol>\n<li>把 a 和 b 转换成整型数字 x 和 y，在接下来的过程中，x 保存结果，y 保存进位。</li>\n<li>当进位不为 0 时<ol>\n<li>计算当前 x 和 y 的无进位相加结果：answer = x ^ y</li>\n<li>计算当前 x 和 y 的进位：carry = (x &amp; y) &lt;&lt; 1</li>\n<li>完成本次循环，更新 x = answer，y = carry</li>\n</ol>\n</li>\n<li>返回 x 的二进制形式</li>\n</ol>\n<p>不用大数的我，留下了精度不准确的泪水</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">a</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">b</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addBinary = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"built_in\">parseInt</span>(a, <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = <span class=\"built_in\">parseInt</span>(b, <span class=\"number\">2</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res</span><br><span class=\"line\">  <span class=\"keyword\">let</span> carry</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (y) &#123;</span><br><span class=\"line\">    res = x ^ y</span><br><span class=\"line\">    carry = (x &amp; y) &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">    x = res</span><br><span class=\"line\">    y = carry</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x.toString(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addBinary</span><span class=\"params\">(self, a, b)</span> -&gt; str:</span></span><br><span class=\"line\">        x, y = int(a, <span class=\"number\">2</span>), int(b, <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> y:</span><br><span class=\"line\">            x, y = x ^ y, (x &amp; y) &lt;&lt; <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bin(x)[<span class=\"number\">2</span>:]</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["算法"],"tags":["位运算"]},{"title":"在 Hexo 中使用数学公式","url":"http://jocolorful.com/2021/07/06/工具-在hexo中使用数学公式/","content":"<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><a id=\"more\"></a>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> md = <span class=\"built_in\">window</span>.markdownit();</span><br><span class=\"line\">md.use(<span class=\"built_in\">window</span>.markdownitLatex2img,</span><br><span class=\"line\">  &#123;<span class=\"attr\">style</span>: <span class=\"string\">\"filter: opacity(75%);transform:scale(0.75);text-align:center;\"</span>&#125; <span class=\"comment\">//可选</span></span><br><span class=\"line\">);</span><br><span class=\"line\">md.render(input.value);</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-数学公式\"><a href=\"#1-数学公式\" class=\"headerlink\" title=\"1 数学公式\"></a>1 数学公式</h2><h3 id=\"1-1-内联公式\"><a href=\"#1-1-内联公式\" class=\"headerlink\" title=\"1.1 内联公式\"></a>1.1 内联公式</h3><p><strong>开头的<code>$</code>必须在其右边紧跟一个非空格字符，而结尾的<code>$</code>必须在其左边紧接一个非空格字符，并且不能紧跟一个数字。</strong></p>\n<ul>\n<li>勾股定理: $a^2+b^2=c^2$</li>\n<li>等差数列求和公式: $S_{n}=n a_{1}+\\frac{n(n-1)}{2} d, n \\in N^{*}$</li>\n<li>牛顿-莱布尼茨公式: $\\int_{a}^{b} f(x) d x=F(b)-F(a)=\\left.F(x)\\right|_{a} ^{b}$</li>\n<li>二项分布: $P_{n}(k)=C_{n}^{k} p^{k} q^{n-k} \\quad k=0,1,2 \\ldots \\ldots, n$<h3 id=\"1-2-块公式\"><a href=\"#1-2-块公式\" class=\"headerlink\" title=\"1.2 块公式\"></a>1.2 块公式</h3>正态分布$X \\sim N(\\mu,\\sigma^2)$:<br>$$f(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}$$</li>\n</ul>\n<p>斐波那契数列$A_n=A_{n-1}+A_{n-2}$,前后两项的比值逐渐收敛到黄金分割比例<br>$$\\lim_{n\\to \\infty}\\frac{A_{n-1}}{A_n}=\\frac{\\sqrt{5}-1}{2}.$$</p>\n<p>因式分解<br>$$\\begin{split}(x−1)(x−3)&amp;=x^2−4x+3 \\<br>&amp;=x^2−4x+4−1 \\<br>&amp;=(x−2)^2−1<br>\\end{split}<br>$$</p>\n<p>狄利克雷函数</p>\n<p>$$<br>D(x)=<br>\\begin{cases}<br>1,&amp; x \\in Q \\<br>0,&amp; x \\notin Q<br>\\end{cases}<br>$$</p>\n<p>高斯公式<br>$$<br>\\iiint_{\\Omega}\\left(\\frac{\\partial P}{\\partial x}+\\frac{\\partial Q}{\\partial y}+\\frac{\\partial R}{\\partial z}\\right) d v=\\iint_{\\Sigma} P d y d z+Q d z d x+R d x d y<br>$$</p>\n<p>范德蒙行列式<br>$$D_{n-1}=\\left|\\begin{array}{cccc}<br>1 &amp; 1 &amp; \\dots &amp; 1 \\<br>x_{2} &amp; x_{3} &amp; \\dots &amp; x_{n} \\<br>\\vdots &amp; \\vdots &amp; &amp; \\vdots \\<br>x_{2}^{n-2} &amp; x_{3}^{n-2} &amp; \\dots &amp; x_{n}^{n-2}<br>\\end{array}\\right|=\\prod_{2 \\leq j&lt;i \\leq n}\\left(x_{i}-x_{j}\\right)$$</p>\n<p>线性方程组<br>$$\\left{\\begin{aligned}<br>a_{11} x_{1}+a_{12} x_{2}+\\cdots+a_{1 n} x_{n} &amp;=b_{1} \\<br>a_{21} x_{1}+a_{22} x_{2}+\\cdots+a_{2 n} x_{n} &amp;=b_{2} \\<br>\\cdots \\cdots \\cdots \\<br>a_{m 1} x_{1}+a_{m 2} x_{2}+\\cdots+a_{m n} x_{n} &amp;=b_{m}<br>\\end{aligned}\\right.$$</p>\n<h2 id=\"2-物理公式\"><a href=\"#2-物理公式\" class=\"headerlink\" title=\"2 物理公式\"></a>2 物理公式</h2><ul>\n<li>牛顿第一定律: $\\sum \\vec{F}_{i}=\\frac{\\mathrm{d} \\vec{v}}{\\mathrm{d} t}=0$</li>\n<li>牛顿第二定律: $\\vec{F}=\\frac{\\mathrm{d} m}{\\mathrm{d} t} \\vec{v}+m \\frac{\\mathrm{d} \\vec{v}}{\\mathrm{d} t}=\\frac{\\mathrm{d} m}{\\mathrm{d} t} \\vec{v}+m \\vec{a}=\\frac{\\mathrm{d} m}{\\mathrm{d} t} \\vec{v}+m \\frac{\\mathrm{d}^{2} \\vec{r}}{\\mathrm{d} t^{2}}$</li>\n<li>牛顿第三定律: $\\overrightarrow{F_{12}}=-\\overrightarrow{F_{21}}$</li>\n<li>质能守恒: $E=mc^2$</li>\n</ul>\n<p>万有引力定律: $F=\\frac{G M m}{r^{2}}$<br>$$G \\frac{m M}{(r+h)^{2}}=m \\frac{\\nu^{2}}{(r+h)}$$<br>基尔霍夫定律<br>$$\\left[\\frac{\\partial\\left(\\Delta_{r} H_{m}\\right)}{\\partial T}\\right]<em>{p}=\\sum</em>{B} v_{B} C_{p, m}(B)$$<br>热力学第二定律<br>$$d S \\geq \\frac{\\delta Q}{T}$$</p>\n<h2 id=\"3-化学公式\"><a href=\"#3-化学公式\" class=\"headerlink\" title=\"3 化学公式\"></a>3 化学公式</h2><p>离子反应与沉淀: $\\ce{SO4^2- + Ba^2+ -&gt; BaSO4 v}$</p>\n<p>氮气氢气合成氨<br>$$<br>\\ce{N2 + 3H2 &lt;=&gt;T[高温、加压][催化剂] 2NH3}<br>$$</p>\n<p>化学平衡常数:$\\mathrm{Zn}+2 \\mathrm{HCl}(\\mathrm{aq})=\\mathrm{H}<em>{2}+\\mathrm{ZnCl}</em>{2} \\quad(\\mathrm{aq})$<br>$$K^{\\theta}=\\frac{\\left[p\\left(\\mathrm{H}<em>{2}\\right) / p^{\\theta}\\right]\\left[c\\left(\\mathrm{ZnCl}</em>{2}\\right)\\right]}{c^{2}(\\mathrm{HC})}$$</p>\n<h2 id=\"4-语法参考\"><a href=\"#4-语法参考\" class=\"headerlink\" title=\"4 语法参考\"></a>4 语法参考</h2><p><a href=\"https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"noopener\">MathJax basic tutorial and quick reference</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["工具"],"tags":[]},{"title":"统计好数字的数目","url":"http://jocolorful.com/2021/07/05/算法-快速幂/","content":"<blockquote>\n<p>不会快速幂的我留下了超时的悔恨泪水</p>\n</blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/count-good-numbers/\" target=\"_blank\" rel=\"noopener\">统计好数字的数目</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=GbDtCFhq20A\" target=\"_blank\" rel=\"noopener\">快速幂：油管讲解</a></p>\n<a id=\"more\"></a>\n<h1 id=\"快速幂算法简介\"><a href=\"#快速幂算法简介\" class=\"headerlink\" title=\"快速幂算法简介\"></a>快速幂算法简介</h1><p>求 x^n 最简单的方法是通过循环将 n 个 x 乘起来，依次求 $x^1$, $x^2$, …, $x^{n-1}$, $x^n$ 时间复杂度为 O(n) 。</p>\n<p>快速幂法可将时间复杂度降低至 O(log n) ，以下从 「分治法」 和 「二进制」 两个角度解析快速幂法。</p>\n<h2 id=\"二进制角度\"><a href=\"#二进制角度\" class=\"headerlink\" title=\"二进制角度\"></a>二进制角度</h2><blockquote>\n<p>利用十进制数字 n 的二进制表示，可对快速幂进行数学化解释</p>\n</blockquote>\n<h3 id=\"特殊情况：n-为-2-的幂，以-a-64-为例：\"><a href=\"#特殊情况：n-为-2-的幂，以-a-64-为例：\" class=\"headerlink\" title=\"特殊情况：n 为 2 的幂，以 $a^64$ 为例：\"></a>特殊情况：n 为 2 的幂，以 $a^64$ 为例：</h3><blockquote>\n<p>其中 n = 64 为 2 的幂</p>\n</blockquote>\n<ol>\n<li>朴素算法进行逐个相乘：$a * a … * a$ (时间复杂度为 O(n))</li>\n</ol>\n<center>\n    <img src=\"/images/算法-快速幂01.png\"  width=\"700px\"/>\n</center>\n\n<ol start=\"2\">\n<li>当 n 为 2 的幂时，我们只需 6 次乘法，时间复杂度为 O(log n)</li>\n</ol>\n<center>\n    <img src=\"/images/算法-快速幂02.png\"  width=\"700px\"/>\n</center>\n\n<h3 id=\"n-不为-2-的幂，以-a-105-为例：\"><a href=\"#n-不为-2-的幂，以-a-105-为例：\" class=\"headerlink\" title=\"n 不为 2 的幂，以 $a^{105}$ 为例：\"></a>n 不为 2 的幂，以 $a^{105}$ 为例：</h3><center>\n    <img src=\"/images/算法-快速幂03.png\"  width=\"700px\"/>\n</center>\n\n\n\n<p>以上：计算 $a^1$，$a^8$，$a^{32}$，$a^{64}$ 是件容易的事，所以算法关键在于<font color=\"red\">将 n 转化为 2 的幂之和</font></p>\n<p>105 的二进制表示为：1101001，将这几个数字拆开刚好得到：$a^1$，$a^8$，$a^{32}$，$a^{64}$</p>\n<center>\n    <img src=\"/images/算法-快速幂04.png\"  width=\"700px\"/>\n</center>\n\n\n<h3 id=\"计算-a-n-mod-m\"><a href=\"#计算-a-n-mod-m\" class=\"headerlink\" title=\"计算 $a^n$ mod m\"></a>计算 $a^n$ mod m</h3><center>\n    <img src=\"/images/算法-快速幂06.png\"  width=\"700px\"/>\n</center>\n\n<h3 id=\"伪代码且以-7-105-为例：\"><a href=\"#伪代码且以-7-105-为例：\" class=\"headerlink\" title=\"伪代码且以 $7^{105}$ 为例：\"></a>伪代码且以 $7^{105}$ 为例：</h3><center>\n    <img src=\"/images/算法-快速幂05.png\"  width=\"700px\"/>\n</center>\n\n<h3 id=\"快速幂-JS-代码\"><a href=\"#快速幂-JS-代码\" class=\"headerlink\" title=\"快速幂 JS 代码\"></a>快速幂 JS 代码</h3><p>$a^n$ mod m</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">a, n, m</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> usefulA = a % m</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      result *= result % m</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    usefulA *= usefulA % m</span><br><span class=\"line\">    n &gt;&gt;&gt;= <span class=\"number\">1</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速幂-JS-代码-1\"><a href=\"#快速幂-JS-代码-1\" class=\"headerlink\" title=\"快速幂 JS 代码\"></a>快速幂 JS 代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> countGoodNumbers = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mod = BigInt((<span class=\"number\">1e+9</span>) + <span class=\"number\">7</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> odd = <span class=\"built_in\">Math</span>.ceil(n / <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> even = n / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pow(<span class=\"number\">5</span>, odd, mod) * pow(<span class=\"number\">4</span>, even, mod)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["算法"],"tags":["快速幂"]},{"title":"盛最多水的容器","url":"http://jocolorful.com/2021/07/02/算法-盛最多水的容器/","content":"<p><a href=\"https://leetcode-cn.com/problems/container-with-most-water/\" target=\"_blank\" rel=\"noopener\">LC:11 算法-盛最多水的容器</a></p>\n<a id=\"more\"></a>\n\n<p>[1(left), 8, 6, 2, 5, 4, 8, 3, 7(right)]</p>\n<h1 id=\"方法一：双指针\"><a href=\"#方法一：双指针\" class=\"headerlink\" title=\"方法一：双指针\"></a>方法一：双指针</h1><p>在初始时，左右指针分别指向数组的左右两端，它们可以容纳的水量为</p>\n<blockquote>\n<p>min(1, 7) * 8</p>\n</blockquote>\n<p>因为，由于容纳的水量是由</p>\n<blockquote>\n<p>两个指针指向的数字中较小值 ∗ 指针之间的距离</p>\n</blockquote>\n<p>因此，我们移动 <font color=\"red\">数字较小的那个指针。</font></p>\n<p>(先假设 总是移动数字较小的那个指针的思路是正确的，在走完流程之后再去进行证明。)</p>\n<p>所以，我们将左指针向右移动：此时可以容纳的水量为: min(8, 7) * 7 = 49</p>\n<p>[1, 8(left), 6, 2, 5, 4, 8, 3, 7(right)]</p>\n<p>(👆由于右指针对应的数字较小，移动右指针：👇)</p>\n<p>[1, 8(left), 6, 2, 5, 4, 8, 3(right), 7] 此时可以容纳的水量为：min(8, 3) * 6 = 18</p>\n<p>（👆 由于右指针对应的数字较小，我们移动右指针：👇）</p>\n<p>[1, 8(left), 6, 2, 5, 4, 8(right), 3, 7] 此时可以容纳的水量为：min(8, 8) * 5 = 40</p>\n<p>（👆两指针对应的数字相同，我们可以任意移动一个，例如左指针：👇）</p>\n<p>[1, 8, 6(left), 2, 5, 4, 8(right), 3, 7]</p>\n<p>此时可以容纳的水量为 min(6, 8) * 4 = 24。由于左指针对应的数字较小，我们移动左指针，并且可以发现，在这之后左指针对应的数字总是较小，因此我们会一直移动左指针，直到两个指针重合。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["算法"],"tags":["数组 双指针"]},{"title":"动态规划","url":"http://jocolorful.com/2021/06/30/算法-动态规划/","content":"<p>动态规划： 「Dynamic Programming」</p>\n<ul>\n<li><a href=\"https://leetcode-cn.com/problems/house-robber/\" target=\"_blank\" rel=\"noopener\">198. 打家劫舍 I</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/house-robber/\" target=\"_blank\" rel=\"noopener\">198. 打家劫舍 II</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/the-masseuse-lcci/\" target=\"_blank\" rel=\"noopener\">面试题 17.16. 按摩师</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/min-cost-climbing-stairs/\" target=\"_blank\" rel=\"noopener\">746. 使用最小花费爬楼梯</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/delete-and-earn/\" target=\"_blank\" rel=\"noopener\">740. 删除并获得点数</a></li>\n</ul>\n<p>以上三个问题都是 dp 的一类问题，解法也一样。</p>\n<a id=\"more\"></a>\n<p>dp 的解题思路最重要的就是寻找<font color=\"red\">「状态转移方程」</font></p>\n<p>状态转移方程往往依赖上一个结果的计算值：比如 <a href=\"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/\" target=\"_blank\" rel=\"noopener\">斐波那契</a> 以及 <a href=\"https://leetcode-cn.com/problems/pascals-triangle/\" target=\"_blank\" rel=\"noopener\">杨辉三角</a></p>\n<p>对于「斐波那契」</p>\n<blockquote>\n<p>f(n) = f(n - 1) + fn(n - 2)</p>\n</blockquote>\n<p>对于「杨辉三角」(排除边界 case 1)</p>\n<blockquote>\n<p>dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] </p>\n</blockquote>\n<p>动规总能以一个数学公式进行表达</p>\n<p><font color=\"red\">但 </font>这并不是动规的精髓所在，寻在「状态转移方程」往往需要寻找<font color=\"red\"><a href=\"https://github.com/labuladong/fucking-algorithm/blob/master/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%B3%BB%E5%88%97/%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84.md\" target=\"_blank\" rel=\"noopener\">「最优子结构」</a></font>：可以从子问题的最优结果推出更大规模问题的最优结果。</p>\n<p>刷了一些题目之后就会发现：基本上就是从一个小规模内求一个最大最小值。「一看就会，一写就废」</p>\n<p>以 「使用最小花费爬楼梯」为例：</p>\n<ol>\n<li>爬楼梯要么从第 0 步 开始，要么从 第 1 步开始。</li>\n<li>对于第 i 次解决方案而言，要么是从 i - 1 过来，要么是从 i - 2 过来。那么 dp[i] 的最优解为</li>\n</ol>\n<p><code>dp[i] = Math.min(dp[i - 2], dp[i - 1]) + cost[i]</code></p>\n<ol start=\"3\">\n<li>对于结果而言，要么是从最后一步，要么是从前两步过来，因为最优的结果是：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Math.min(dp[dp.length - 2], dp[dp.length - 1])</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">cost</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minCostClimbingStairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cost</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cost || !cost.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = []</span><br><span class=\"line\">  dp[<span class=\"number\">0</span>] = cost[<span class=\"number\">0</span>]</span><br><span class=\"line\">  dp[<span class=\"number\">1</span>] = cost[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt; cost.length; i++) &#123;</span><br><span class=\"line\">    dp[i] = <span class=\"built_in\">Math</span>.min(dp[i - <span class=\"number\">2</span>], dp[i - <span class=\"number\">1</span>]) + cost[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.min(dp[dp.length - <span class=\"number\">2</span>], dp[dp.length - <span class=\"number\">1</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["算法"],"tags":["动态规划"]},{"title":"散落时光里的点滴","url":"http://jocolorful.com/2021/06/29/阅读-文海拾贝/","content":"<h1 id=\"朱自清\"><a href=\"#朱自清\" class=\"headerlink\" title=\"朱自清\"></a>朱自清</h1><a id=\"more\"></a>\n<h2 id=\"匆匆\"><a href=\"#匆匆\" class=\"headerlink\" title=\"匆匆\"></a><a href=\"https://www.douban.com/group/topic/2322595/\" target=\"_blank\" rel=\"noopener\">匆匆</a></h2><p>本以为作者通过《匆匆》表达了对时间流逝的惋惜。</p>\n<blockquote>\n<p>我的日子滴在时间的流里，没有声音，也没有影子。我不禁头涔涔而泪潸潸了。</p>\n</blockquote>\n<blockquote>\n<p>过去的日子如轻烟，被微风吹散了，如薄雾，被初阳蒸融了；我留着些什么痕迹呢？我何曾留着像游丝样的痕迹呢？我赤裸裸来到这世界，转眼间也将赤裸裸的回去罢？</p>\n</blockquote>\n<h3 id=\"创作背景\"><a href=\"#创作背景\" class=\"headerlink\" title=\"创作背景\"></a>创作背景</h3><p>《匆匆》写于1922年3月，恰逢「五四运动」落潮期。当时的「五四」知识青年忙于救国，忙于追求进步；他们备受当时政治环境的压迫，却没有停止追求进步的脚步；他们苦恼、彷徨， 却在冷静的沉思后继续追赶人生的路。</p>\n<p>「五四」运动落潮期的现实情况让朱自清失望，但作者在彷徨中并不甘心于沉沦。朱自清站在他的「中和主义」立场上执著地探寻与追求。</p>\n<p>作者认为：「生活中的各种过程都有它独立的意义和价值——每一刹那有它的意义与价值!每一刹那在持续的时间里，有它相当的位置。」</p>\n<h2 id=\"温州的踪迹\"><a href=\"#温州的踪迹\" class=\"headerlink\" title=\"温州的踪迹\"></a><a href=\"https://millionbook.net/mj/z/zhuziqing/zzqs/005.htm\" target=\"_blank\" rel=\"noopener\">温州的踪迹</a></h2><h3 id=\"月朦胧，鸟朦胧，帘卷海棠红\"><a href=\"#月朦胧，鸟朦胧，帘卷海棠红\" class=\"headerlink\" title=\"月朦胧，鸟朦胧，帘卷海棠红\"></a>月朦胧，鸟朦胧，帘卷海棠红</h3><blockquote>\n<p>「钩弯」垂着双穗，石青色；丝缕微乱，若小曳于轻风中。纸右一圆月，淡淡的青光遍满纸上；月的纯净，柔软与平和，如一张睡美人的脸。</p>\n</blockquote>\n<h3 id=\"绿\"><a href=\"#绿\" class=\"headerlink\" title=\"绿\"></a>绿</h3><blockquote>\n<p>梅雨潭是一个瀑布潭</p>\n</blockquote>\n<blockquote>\n<p>梅雨潭闪闪的绿色招引着我们；我们开始追捉她那离合的神光了。</p>\n</blockquote>\n<blockquote>\n<p>那醉人的绿呀！仿佛一张极大极大的荷叶铺着，满是奇异的绿呀。</p>\n</blockquote>\n<blockquote>\n<p>瀑布在襟袖之间；但我的心中已没有瀑布了。我的心随潭水的绿而摇荡。</p>\n</blockquote>\n<blockquote>\n<p>我若能裁你以为带，我将赠给那轻盈的舞女；她必能临风飘举了。我若能挹你以为眼，我将赠给那善歌的盲妹；她必明眸善睐了。</p>\n</blockquote>\n<h3 id=\"白水漈\"><a href=\"#白水漈\" class=\"headerlink\" title=\"白水漈\"></a>白水漈</h3><blockquote>\n<p>这也是个瀑布；但是太薄了，又太细了。有时闪着些须的白光；等你定睛看去，却又没有 —— 只剩一片飞烟而已。从前有所谓「雾縠」，大概就是这样了。所以如此，全由于岩石中间突然空了一段；水到那里，无可凭依，凌虚飞下，便扯得又薄又细了。当那空处，最是奇迹。白光嬗为飞烟，已是影子，有时却连影子也不见。有时微风过来，用纤手挽着那影子，它便袅袅的成了一个软弧；但她的手才松，它又像橡皮带儿似的，立刻伏伏帖帖的缩回来了。我所以猜疑，或者另有双不可知的巧手，要将这些影子织成一个幻网。——微风想夺了她的，她怎么肯呢？<br>　　幻网里也许织着诱惑；我的依恋便是个老大的证据</p>\n</blockquote>\n<h3 id=\"四生命的价格-——-七毛钱\"><a href=\"#四生命的价格-——-七毛钱\" class=\"headerlink\" title=\"四生命的价格 —— 七毛钱\"></a>四生命的价格 —— 七毛钱</h3><blockquote>\n<p>看了几眼，觉得和我们的孩子也没有什么差异；我看不出她的低贱的生命的符记 —— 如我们看低贱的货色时所容易发见的符记。我回到自己的饭桌上，看看阿九和阿菜，始终觉得和那个女孩没有什么不同！但是，我毕竟发见真理了！我们的孩子所以高贵，正因为我们不曾出卖他们，而那个女孩所以低贱，正因为她是被出卖的；这就是她只值七毛钱的缘故了！呀，聪明的真理！</p>\n</blockquote>\n<p>原载《我们的七月》</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["阅读"],"tags":[]},{"title":"统计字典序元音字符串的数目","url":"http://jocolorful.com/2021/06/25/算法-统计字典序元音字符串的数目/","content":"<p><a href=\"https://leetcode-cn.com/problems/count-sorted-vowel-strings/\" target=\"_blank\" rel=\"noopener\">LC1641:统计字典序元音字符串的数目</a></p>\n<p>感觉有点像全排列的数学题</p>\n<a id=\"more\"></a>\n\n<h1 id=\"方法一：暴力\"><a href=\"#方法一：暴力\" class=\"headerlink\" title=\"方法一：暴力\"></a>方法一：暴力</h1><h1 id=\"方法二：动态规划\"><a href=\"#方法二：动态规划\" class=\"headerlink\" title=\"方法二：动态规划\"></a>方法二：动态规划</h1><p><a href=\"https://www.youtube.com/watch?v=gdH4yfgfwiU\" target=\"_blank\" rel=\"noopener\">Fisher Coder</a></p>\n<h1 id=\"方法二：数学\"><a href=\"#方法二：数学\" class=\"headerlink\" title=\"方法二：数学\"></a>方法二：数学</h1><p>fn = (n + 4) * (n + 3) * (n + 2) * (n + 1) / 24</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["算法"],"tags":[]},{"title":"React18 所需要知道的","url":"http://jocolorful.com/2021/06/23/前端-React-18-所需要知道的/","content":"<p><a href=\"https://javascript.plainenglish.io/what-you-need-to-know-about-react-18-54070f6bc4a1\" target=\"_blank\" rel=\"noopener\">What You Need to Know About React 18</a></p>\n<h1 id=\"自动的批量更新\"><a href=\"#自动的批量更新\" class=\"headerlink\" title=\"自动的批量更新\"></a>自动的批量更新</h1><a id=\"more\"></a>\n<p>批量更新：React 会尝试将同一上下文中触发的多个更新合并为一个好处是：</p>\n<ol>\n<li>避免页面重复渲染</li>\n<li>状态按顺序处理，不会出现竞争态问题，最终触发渲染的是异步流程。</li>\n</ol>\n<p>但值得注意的是，在一<font color=\"red\">异步的方法回调</font>中，React 并不能进行批量更新。<br>（这里可以尝试用看似同步的方式调用 async/await 的调用，是什么效果）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this code will be re-render-twice</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> handleClick =<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">  fetch().then().catch(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">    setCount(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c+<span class=\"number\">1</span>)</span><br><span class=\"line\">    setF(<span class=\"function\"><span class=\"params\">f</span>=&gt;</span> !f)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解释：React 的批量更新只在浏览器的 event 中生效（比如点击时间），但是上面的代码更新状态是事件已经处理完成，在 fetch 的回调中。<br>那么V18 以后，状态管理无论是在哪里，只会被更新一次。</p>\n<h2 id=\"不需要批量更新\"><a href=\"#不需要批量更新\" class=\"headerlink\" title=\"不需要批量更新\"></a>不需要批量更新</h2><p>使用 <code>flushSync</code> 去重新渲染组件</p>\n<h1 id=\"SSR-support-for-Suspense\"><a href=\"#SSR-support-for-Suspense\" class=\"headerlink\" title=\"SSR support for Suspense\"></a>SSR support for Suspense</h1><p>对典型 SSR 的基本扩展。在一个典型的 React SSR 应用中，流程基本上是：</p>\n<ol>\n<li>服务端获取 UI 相关的展示数据</li>\n<li>服务端渲染整个 APP 的 HTML 发送给客户端</li>\n<li>客户端除了 HTML 以外，还需下载 JS bundle 部分</li>\n<li>在最后一步，客户端连接 JS 的逻辑和 HTML 绑定。（称之为：脱水）</li>\n</ol>\n<p>缺点：在下一步可以开始之前，整个应用程序的每个步骤都必须立即完成。这样会导致在初始化时加载时长变慢。</p>\n<p>React 18 中     <code>&lt;Suspense&gt;</code> 组件已经以这样的方式进行了革命性的变更：</p>\n<p>它将应用程序分解为更小的独立单元，这些单元再经历上面提及的每一部分。</p>\n<p>因此：这样一旦用户看到内容，都将是可交互的。</p>\n<h1 id=\"Transition\"><a href=\"#Transition\" class=\"headerlink\" title=\"Transition\"></a>Transition</h1><p>这是即将发布的令人难以置信的功能。它可以让用户解决大屏幕频繁更新的问题。<br>例如，考虑在过滤数据列表的输入字段中键入。您需要将字段的值存储在 state 中，以便您可以过滤数据并控制该输入字段的值。您的代码可能如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Update the input value and search results</span></span><br><span class=\"line\">setSearchQuery(input)</span><br></pre></td></tr></table></figure>\n\n<p>在这里，每当用户键入一个字符时，我们都会更新输入值并使用新值来搜索列表并显示结果。</p>\n<p>对于大屏幕更新，这可能会导致页面在呈现所有内容时出现延迟，从而使打字或其他交互感觉缓慢且无响应。即使列表不是太长，列表项本身也可能很复杂，每次击键都不同，并且可能没有明确的方法来优化它们的呈现.</p>\n<p>从概念上讲，问题在于需要进行两种不同的更新。</p>\n<p>第一次是紧急更新，用于更改输入字段的值<br>第二个是显示搜索结果的不太紧急的更新</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Urgent: Show what was typed</span><br><span class=\"line\">setInputValue(input)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Not urgent: Show the results</span><br><span class=\"line\">setSearchQuery(input)</span><br></pre></td></tr></table></figure>\n\n<p>新的 <code>startTransition</code> API 通过让您能够将更新标记为「过渡」来解决这个问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; startTransition &#125; from &#39;react&#39;;</span><br><span class=\"line\">&#x2F;&#x2F; Urgent: Show what was typed</span><br><span class=\"line\">setInputValue(input);</span><br><span class=\"line\">&#x2F;&#x2F; Mark any state updates inside as transitions</span><br><span class=\"line\">startTransition(() &#x3D;&gt; &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; Transition: Show the results</span><br><span class=\"line\">  setSearchQuery(input);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":["React"]},{"title":"工具集","url":"http://jocolorful.com/2021/06/23/工具集/","content":"<h1 id=\"编辑器-Sublime-Text\"><a href=\"#编辑器-Sublime-Text\" class=\"headerlink\" title=\"编辑器 Sublime Text\"></a>编辑器 Sublime Text</h1><ul>\n<li>TrailingSpacer：高亮显示多余的空格和Tab：</li>\n<li>Gitblame： 展示 git history。以方便有 bug 的时候找相应的开（reng）发（guo）</li>\n<li>Emmet：快速生产 html 的template。其实用框架久了很久不写原生。但有时写写 Demo 会用到</li>\n<li>Babel：关于 ES6、React 代码展示高亮用到</li>\n<li>HTML/CSS/JS prettyfy：格式化代码</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"Chrome-插件\"><a href=\"#Chrome-插件\" class=\"headerlink\" title=\"Chrome 插件\"></a>Chrome 插件</h1><ul>\n<li><p>JSONView</p>\n</li>\n<li><p>Charset</p>\n</li>\n<li><p>OctoTree</p>\n</li>\n<li><p><a href=\"https://deps.dev/\" target=\"_blank\" rel=\"noopener\">dev</a></p>\n</li>\n<li><p><a href=\"https://github.com/tinyhttp/malibu\" target=\"_blank\" rel=\"noopener\">malibu：csrf</a></p>\n</li>\n</ul>\n<h1 id=\"绘图工具\"><a href=\"#绘图工具\" class=\"headerlink\" title=\"绘图工具\"></a>绘图工具</h1><ul>\n<li><a href=\"https://github.com/adrai/flowchart.js\" target=\"_blank\" rel=\"noopener\">Flowchart</a></li>\n<li><a href=\"https://excalidraw.com/\" target=\"_blank\" rel=\"noopener\">Excalidraw</a></li>\n<li><a href=\"https://www.processon.com/\" target=\"_blank\" rel=\"noopener\">Processon</a></li>\n</ul>\n<h1 id=\"网站谷歌分析\"><a href=\"#网站谷歌分析\" class=\"headerlink\" title=\"网站谷歌分析\"></a>网站谷歌分析</h1><ul>\n<li><a href=\"https://analytics.google.com/analytics/web\" target=\"_blank\" rel=\"noopener\">谷歌分析</a></li>\n<li><a href=\"https://mdnice.com/\" target=\"_blank\" rel=\"noopener\">微信公众号排版</a></li>\n<li><a href=\"https://deps.dev/\" target=\"_blank\" rel=\"noopener\">https://deps.dev/</a></li>\n<li><a href=\"https://github.com/tinyhttp/malibu\" target=\"_blank\" rel=\"noopener\">malibu：csrf</a></li>\n<li><a href=\"https://bbc.github.io/react-transcript-editor/iframe.html?id=demo--default\" target=\"_blank\" rel=\"noopener\">react-transcript-editor</a> 太厉害了，文字居然可以跟随语音高亮</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["工具"],"tags":[]},{"title":"比特位计数","url":"http://jocolorful.com/2021/06/23/算法-比特位计数/","content":"<p><a href=\"https://leetcode-cn.com/problems/counting-bits/\" target=\"_blank\" rel=\"noopener\">LC338: 比特位计数</a></p>\n<h2 id=\"方法一：Brian-Kernighan-算法\"><a href=\"#方法一：Brian-Kernighan-算法\" class=\"headerlink\" title=\"方法一：Brian Kernighan 算法\"></a>方法一：Brian Kernighan 算法</h2><a id=\"more\"></a>\n<p>算法：对任何一个数 n，n &amp; ( n − 1 ) 的结果是 n 的比特位<font color=\"red\">最右端的 1 </font>变为 0。</p>\n<p>例如，n = 12 , n − 1 = 11 , 11 &amp; 12 = 8 </p>\n<center><img src=\"/images/Brian-Kernighan.jpeg\" width=\"600px\" /></center>\n\n<p>解释：结果 8 的 2 进制中，右边第三位为 1，因此经过 「Brian Kernighan」计算变为了 0</p>\n<p>因此只要重复计算对 n 进行重复计算, 直到 n 为 0，其中操作的次数，即为 1 的个数</p>\n<p>伪代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">while (n &gt; 0)</span><br><span class=\"line\">  n &#x3D; n &amp; (n - 1)</span><br><span class=\"line\">  count ++</span><br></pre></td></tr></table></figure>\n\n<p><strong>位运算：妙不可言！</strong></p>\n<h2 id=\"方法二：dp-最高有效位\"><a href=\"#方法二：dp-最高有效位\" class=\"headerlink\" title=\"方法二：dp 最高有效位\"></a>方法二：dp 最高有效位</h2><p>最高有效位：对于正整数 x 而言，如果存在最大的正整数满足： </p>\n<p><code>y &lt;= x 并且 y 是 2 的整数次幂</code></p>\n<p>则称 y 为 x 的最高有效位。</p>\n<p>最高有效位的特性包括：</p>\n<ul>\n<li>最高位是 1，其余位均为 0，因此 y &amp; (y - 1) = 0</li>\n</ul>\n<p>如何判断一个正整数是不是 2 的整数次幂，可以利用方法一提到的位与运算的性质，如果正整数 y 是 2的整数次幂，则 y 的二进制中只有最高位是 1，其余为 0.<br>因此当且仅当 <code>y &amp; (y - 1)  = 0</code>， y 为 2 的整数次幂</p>\n<p>对于题目</p>\n<ul>\n<li>如果 i &amp; (i - 1) = 0，则令 highBit =i，更新当前的最高有效位</li>\n<li>i 比 i - highBit 的「一比特数」多 1，由于是从小到大遍历每个整数，因此遍历到 i 时，i − highBit 的「一比特数」已知。</li>\n</ul>\n<p>看不懂 QAQ</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["算法"],"tags":["位运算 动态规划"]},{"title":"Node.js 调试 - Debugger","url":"http://jocolorful.com/2021/06/21/Node-debugger/","content":"<p><a href=\"https://nodejs.org/docs/latest-v12.x/api/debugger.html\" target=\"_blank\" rel=\"noopener\">原生 Debugger</a></p>\n<ol>\n<li>使用参数 <code>inspect</code> 即可进入 debug 模式</li>\n<li>使用参数 <code>--inspect</code> 即可进入 V8 调试模式，Node 也是调用了 CDP 协议。同 Chrome 的开发者工具</li>\n<li>使用参数 <code>--inspect-brk</code> 即可进入 V8 debug 模式</li>\n</ol>\n<p>说明：<br>通过 <code>http://localhost:9229/json/list</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    description: \"node.js instance\",</span><br><span class=\"line\">    devtoolsFrontendUrl: \"chrome-devtools://devtools/bundled/js_app.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:9229/49972c2d-0d1e-4a1c-ac69-0b249b83fe01\",</span><br><span class=\"line\">    devtoolsFrontendUrlCompat: \"chrome-devtools://devtools/bundled/inspector.html?experiments=true&amp;v8only=true&amp;ws=127.0.0.1:9229/49972c2d-0d1e-4a1c-ac69-0b249b83fe01\",</span><br><span class=\"line\">    faviconUrl: \"https://nodejs.org/static/images/favicons/favicon.ico\",</span><br><span class=\"line\">    id: \"49972c2d-0d1e-4a1c-ac69-0b249b83fe01\",</span><br><span class=\"line\">    title: \"start.js\",</span><br><span class=\"line\">    type: \"node\",</span><br><span class=\"line\">    url: \"file:///Users/jojo/Developer/ecom/apps/parker/server/start.js\",</span><br><span class=\"line\">    webSocketDebuggerUrl: \"ws://127.0.0.1:9229/49972c2d-0d1e-4a1c-ac69-0b249b83fe01\"</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>可以看到相应信息。其中 id 为 uuid，是一个特定的标识，每一个进程都会分配一个 uuid，因此每一次调用会有出现不同的结果。<code>devtoolsFrontendUrl</code> 则为我们要访问的 chrome 地址，新窗口打开这个地址即可调试 (新版：devtools://xxx)。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["Node.js"],"tags":[]},{"title":"Node.js 单测框架","url":"http://jocolorful.com/2021/06/21/Node-断言/","content":"<h1 id=\"assert-断言\"><a href=\"#assert-断言\" class=\"headerlink\" title=\"assert - 断言\"></a>assert - 断言</h1><h2 id=\"Node-原生-assert-模块\"><a href=\"#Node-原生-assert-模块\" class=\"headerlink\" title=\"Node 原生 assert 模块\"></a>Node 原生 assert 模块</h2><a id=\"more\"></a>\n\n<ul>\n<li>Node 的原生模块 <a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\" rel=\"noopener\">assert</a></li>\n<li>基于 Node assert 测试框架: <a href=\"https://github.com/power-assert-js/power-assert\" target=\"_blank\" rel=\"noopener\">power-assert</a></li>\n</ul>\n<h1 id=\"单测的意义：\"><a href=\"#单测的意义：\" class=\"headerlink\" title=\"单测的意义：\"></a>单测的意义：</h1><p><a href=\"https://eggjs.org/zh-cn/core/unittest.html\" target=\"_blank\" rel=\"noopener\">Egg.js 单元测试</a></p>\n<h1 id=\"单测框架对比\"><a href=\"#单测框架对比\" class=\"headerlink\" title=\"单测框架对比\"></a>单测框架对比</h1><blockquote>\n<p>从 npm 搜索 <a href=\"https://www.npmjs.com/search?q=test%20framework&page=1&ranking=popularity\" target=\"_blank\" rel=\"noopener\">test framework</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>测试库</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"noopener\">Mocha</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/avajs/ava\" target=\"_blank\" rel=\"noopener\">AVA</a></td>\n<td>简单的 API 测试</td>\n<td>测试 case 本身比较复杂</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/power-assert-js/power-assert\" target=\"_blank\" rel=\"noopener\">power-assert</a></td>\n<td>基于原生的 assert 模块</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/visionmedia/supertest\" target=\"_blank\" rel=\"noopener\">SuperTest</a></td>\n<td>适合接口测试</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://jestjs.io/zh-Hans/\" target=\"_blank\" rel=\"noopener\">Jest</a></td>\n<td>elegant！simple！</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/power-assert-js/power-assert\" target=\"_blank\" rel=\"noopener\">power-assert</a></td>\n<td>基于原生</td>\n<td>异步支持不优好</td>\n</tr>\n</tbody></table>\n<p>社区使用情况<br><img src=\"/images/test.png\"  width=\"500px\"/></p>\n<p>基于 Jest + supertest 一般可以打造出单测利器出来</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>如果让我重新选择测试单测框架，我会优先选择 Mocha + SuperTest</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["Node.js"],"tags":[]},{"title":"晴雅集","url":"http://jocolorful.com/2021/06/20/晴雅集/","content":"<h2 id=\"2021-书单\"><a href=\"#2021-书单\" class=\"headerlink\" title=\"2021 书单\"></a>2021 书单</h2><ul>\n<li><a href=\"https://book.douban.com/subject/3576486/\" target=\"_blank\" rel=\"noopener\">《小狗钱钱》</a> 推荐指数：🌟🌟🌟🌟</li>\n<li><a href=\"/2021/07/14/阅读-咖啡咖啡\">《咖啡咖啡》</a> 推荐指数：🌟🌟🌟</li>\n<li><a href=\"/2021-07-13/阅读-一个人的好天气/\">《一个人的好天气》</a> 推荐指数：🌟🌟🌟🌟🌟</li>\n<li><a href=\"/2021/07/08/阅读-PeterPan/\">《PeterPan》</a> 推荐指数：🌟🌟🌟</li>\n<li><a href=\"https://book.douban.com/subject/26422275/\" target=\"_blank\" rel=\"noopener\">《向死而生》</a> 作者：李开复 ｜ 推荐指数：🌟🌟🌟</li>\n<li><a href=\"https://book.douban.com/subject/11524204/\" target=\"_blank\" rel=\"noopener\">《围城》</a> 作者：钱钟书 ｜ 推荐指数：🌟🌟🌟</li>\n<li><a href=\"https://book.douban.com/subject/26278687/\" target=\"_blank\" rel=\"noopener\">《皮囊》</a> 作者：蔡崇达 ｜ 推荐指数：🌟🌟🌟🌟</li>\n</ul>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>海藏不住，也圈不住。对待海最好的办法，就是让每个人自己去寻找到和它相处的方式。每片海，沉浮着不同的景致，也翻滚着各自的危险。生活也是，人的欲望也是。以前以为节制或者自我用逻辑框住，甚至掩耳盗铃地掩藏住，是最好的方法，然而，无论如何，它终究永远在那躁动起伏</p>\n</blockquote>\n<h2 id=\"2021-观影记录\"><a href=\"#2021-观影记录\" class=\"headerlink\" title=\"2021 观影记录\"></a>2021 观影记录</h2><h3 id=\"推荐指数：🌟🌟🌟🌟🌟\"><a href=\"#推荐指数：🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"推荐指数：🌟🌟🌟🌟🌟\"></a>推荐指数：🌟🌟🌟🌟🌟</h3><ul>\n<li><a href=\"https://movie.douban.com/subject/24733428/\" target=\"_blank\" rel=\"noopener\">《心灵奇旅》</a> 治愈：一次心灵的奇幻旅程<blockquote>\n<p>Indeed a million golden arrows were pointing it out to the children, all directed by their friend the sun, who wanted them to be sure of their way before leaving them for the night.</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>Moonlight was  staring to shine across the waters，and the weew no other sounds but the mameraid calling to the moon.</p>\n</blockquote>\n<blockquote>\n<p>To die will be awful big adventure.</p>\n</blockquote>\n<blockquote>\n<p>None of them knew what was to come. perhaps it was best no to know. Beacause they did not to konw what was to come, they had one more happy hour to play.</p>\n</blockquote>\n<p><a href=\"https://movie.douban.com/subject/30176790/\" target=\"_blank\" rel=\"noopener\">《梅艳芳》</a></p>\n<blockquote>\n<p>也许是过于感性，泪水浸润了口罩</p>\n</blockquote>\n<p><a href=\"https://movie.douban.com/subject/30346880/\" target=\"_blank\" rel=\"noopener\">《银行家》</a></p>\n<blockquote>\n<p>喜欢这部片子的原因是因为我喜欢钱，黑人为了 liberty 而放弃了财富，他们是为了同一个肤色的民族而奋斗，如果是我会怎么选择呢？</p>\n</blockquote>\n<p><a href=\"https://movie.douban.com/subject/35144311/\" target=\"_blank\" rel=\"noopener\">《雄狮少年》</a></p>\n<blockquote>\n<p>当迈向擎天柱的那一刻，无论你是否越过障碍，你是成功的，在戏谑之上，在尊严之巅。</p>\n</blockquote>\n<p><a href=\"https://movie.douban.com/subject/35625249/\" target=\"_blank\" rel=\"noopener\">《无尽攀登》</a></p>\n<hr />\n\n<h3 id=\"推荐指数：🌟🌟🌟🌟\"><a href=\"#推荐指数：🌟🌟🌟🌟\" class=\"headerlink\" title=\"推荐指数：🌟🌟🌟🌟\"></a>推荐指数：🌟🌟🌟🌟</h3><p><a href=\"https://movie.douban.com/subject/32493124/\" target=\"_blank\" rel=\"noopener\">《悬崖之上》</a> 主演：刘浩存<br><a href=\"https://movie.douban.com/subject/1652587/\" target=\"_blank\" rel=\"noopener\">《阿凡达》</a> 地区：🇺🇸<br><a href=\"https://movie.douban.com/subject/33454993/\" target=\"_blank\" rel=\"noopener\">《晴雅集》</a><br><a href=\"https://movie.douban.com/subject/30466931/\" target=\"_blank\" rel=\"noopener\">《波斯语课》</a> 地区： ｜ 短评：暗红色的回忆涌动着挣扎、救赎<br><a href=\"https://movie.douban.com/subject/1293172/\" target=\"_blank\" rel=\"noopener\">《末代皇帝》</a> 主演：尊龙。🉑<br><a href=\"https://movie.douban.com/subject/25697098/\" target=\"_blank\" rel=\"noopener\">《裁缝》</a><br><a href=\"https://movie.douban.com/subject/24719063/\" target=\"_blank\" rel=\"noopener\">《烈日灼心》</a><br><a href=\"https://movie.douban.com/subject/26996619/\" target=\"_blank\" rel=\"noopener\">《古董局中局》</a> 主演：雷大头<br><a href=\"https://movie.douban.com/subject/35422807/\" target=\"_blank\" rel=\"noopener\">《扬名立万》</a> 主演：尹正<br><a href=\"https://movie.douban.com/subject/35205446/\" target=\"_blank\" rel=\"noopener\">《铁道英雄》</a> 主演：范伟<br><a href=\"https://www.douban.com/location/drama/35666424/\" target=\"_blank\" rel=\"noopener\">《危险而甜蜜》</a> 这是一部乱入的话剧，第一次看话剧还不错。</p>\n<hr />\n\n<h3 id=\"推荐指数：🌟🌟🌟\"><a href=\"#推荐指数：🌟🌟🌟\" class=\"headerlink\" title=\"推荐指数：🌟🌟🌟\"></a>推荐指数：🌟🌟🌟</h3><p><a href=\"https://movie.douban.com/subject/3001114/\" target=\"_blank\" rel=\"noopener\">《沙丘》</a> 地区：🇺🇸<br><a href=\"https://movie.douban.com/subject/29984000/\" target=\"_blank\" rel=\"noopener\">《热带往事》</a>  主演：彭于晏 ｜ 短评：暗红色的回忆涌动着挣扎、救赎<br><a href=\"https://movie.douban.com/subject/1920805/\" target=\"_blank\" rel=\"noopener\">《成为简·奥斯汀》</a> 主演：安妮海瑟薇<br><a href=\"https://movie.douban.com/subject/1418200/\" target=\"_blank\" rel=\"noopener\">《傲慢与偏见》</a> 地区：🇺🇸 ｜ 短评：一个傲慢，一个偏见。玛丽苏式的爱情故事<br><a href=\"https://movie.douban.com/subject/35158160/\" target=\"_blank\" rel=\"noopener\">《我的姐姐》</a> 主演：张子枫 ｜演技拉满,剧情 emmm，一般有病都要治<br><a href=\"https://movie.douban.com/subject/26425063/\" target=\"_blank\" rel=\"noopener\">《无双》</a> 主演：郭富城 「美术系学生看了会沉默，金融系学生看了会流泪」<br><a href=\"https://movie.douban.com/subject/26762744/\" target=\"_blank\" rel=\"noopener\">《你是凶手》</a> 主演：宋佳 ｜ 冯远征<br><a href=\"https://movie.douban.com/subject/1291872/\" target=\"_blank\" rel=\"noopener\">《苔丝》</a> 「被上帝同时给予贫穷和美貌的姑娘，几乎都是悲剧胚子。」<br><a href=\"https://movie.douban.com/subject/35073565/\" target=\"_blank\" rel=\"noopener\">《门锁》</a><br><a href=\"https://movie.douban.com/subject/35376457/\" target=\"_blank\" rel=\"noopener\">《爱情神话》</a> 主演：马伊琍 ｜ 徐峥</p>\n<h3 id=\"推荐指数：🌟🌟\"><a href=\"#推荐指数：🌟🌟\" class=\"headerlink\" title=\"推荐指数：🌟🌟\"></a>推荐指数：🌟🌟</h3><p><a href=\"https://movie.douban.com/subject/26816376/\" target=\"_blank\" rel=\"noopener\">《超级的我》</a> 主演：王大陆 ｜ 盗版盗梦空间、很无聊<br><a href=\"https://movie.douban.com/subject/1292215/\" target=\"_blank\" rel=\"noopener\">《天使爱美丽》</a> 原谅我真的不喜欢这种风格的电影，不过法式女装真的漂亮<br><a href=\"https://movie.douban.com/subject/33454993/\" target=\"_blank\" rel=\"noopener\">《名侦探柯南：绯色的子弹》</a><br><a href=\"https://movie.douban.com/subject/26342391/\" target=\"_blank\" rel=\"noopener\">《紧急救援》</a>  主演：彭于晏 ｜「国际级的动作戏，乡镇级的感情线」<br><a href=\"https://movie.douban.com/subject/35096844/\" target=\"_blank\" rel=\"noopener\">《送你一朵小红花》</a> 「剧情真没啥亮点 看到旁边哭的稀里哗啦我腔都不敢开」</p>\n<h2 id=\"2021-旅行途中\"><a href=\"#2021-旅行途中\" class=\"headerlink\" title=\"2021 旅行途中\"></a>2021 旅行途中</h2><h3 id=\"北京\"><a href=\"#北京\" class=\"headerlink\" title=\"北京\"></a>北京</h3><ul>\n<li><a href=\"https://zh.wikipedia.org/zh-hans/%E6%98%8E%E5%8D%81%E4%B8%89%E9%99%B5\" target=\"_blank\" rel=\"noopener\">北京十三陵</a> ｜推荐指数：🌟🌟🌟🌟</li>\n<li>黑龙潭 - 风铃节 ｜ 推荐指数：🌟🌟🌟</li>\n<li>居庸关 - 北京市郊铁路S2线  推荐指数：🌟🌟🌟</li>\n<li>北京后花园 - 白虎涧 ｜ 推荐指数：🌟🌟🌟🌟</li>\n<li>黄花梁 - 高山草甸 ｜ 推荐指数：🌟🌟🌟🌟</li>\n</ul>\n<h3 id=\"辽宁\"><a href=\"#辽宁\" class=\"headerlink\" title=\"辽宁\"></a>辽宁</h3><ul>\n<li>葫芦岛 - 东戴河 ｜ 推荐指数：🌟🌟🌟</li>\n</ul>\n<h3 id=\"海南\"><a href=\"#海南\" class=\"headerlink\" title=\"海南\"></a>海南</h3><ul>\n<li>三亚 ｜ 推荐指数：🌟🌟🌟🌟</li>\n</ul>\n<h3 id=\"阅读书单\"><a href=\"#阅读书单\" class=\"headerlink\" title=\"阅读书单\"></a>阅读书单</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.zhihu.com/pub/book/119565177\" target=\"_blank\" rel=\"noopener\">咖啡咖啡</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.zhihu.com/pub/book/119648496\" target=\"_blank\" rel=\"noopener\">算法（第 4 版)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://book.douban.com/subject/5355281/\" target=\"_blank\" rel=\"noopener\">数学与生活</a></li>\n</ul>\n<h2 id=\"2021-观影记录-1\"><a href=\"#2021-观影记录-1\" class=\"headerlink\" title=\"2021 观影记录\"></a>2021 观影记录</h2><h3 id=\"推荐指数：🌟🌟🌟🌟-1\"><a href=\"#推荐指数：🌟🌟🌟🌟-1\" class=\"headerlink\" title=\"推荐指数：🌟🌟🌟🌟\"></a>推荐指数：🌟🌟🌟🌟</h3><p><a href=\"https://movie.douban.com/subject/3430271/\" target=\"_blank\" rel=\"noopener\">《沙漠之花》</a> 主演：安妮海瑟薇 ｜ 推荐指数：🌟🌟🌟🌟<br><a href=\"https://movie.douban.com/subject/32493124/\" target=\"_blank\" rel=\"noopener\">《悬崖之上》</a> 主演：刘浩存 ｜ 推荐指数：🌟🌟🌟🌟<br><a href=\"https://movie.douban.com/subject/1652587/\" target=\"_blank\" rel=\"noopener\">《阿凡达》</a> 地区：🇺🇸 ｜ 推荐指数：🌟🌟🌟🌟<br><a href=\"https://movie.douban.com/subject/33454993/\" target=\"_blank\" rel=\"noopener\">《晴雅集》</a> 推荐指数：🌟🌟🌟🌟<br><a href=\"https://movie.douban.com/subject/30466931/\" target=\"_blank\" rel=\"noopener\">《波斯语课》</a> 地区： ｜ 短评：暗红色的回忆涌动着挣扎、救赎 ｜ 推荐指数：🌟🌟🌟🌟<br><a href=\"https://movie.douban.com/subject/1293172/\" target=\"_blank\" rel=\"noopener\">《末代皇帝》</a> 推荐指数：🌟🌟🌟🌟</p>\n<hr />\n\n<h3 id=\"推荐指数：🌟🌟🌟-1\"><a href=\"#推荐指数：🌟🌟🌟-1\" class=\"headerlink\" title=\"推荐指数：🌟🌟🌟\"></a>推荐指数：🌟🌟🌟</h3><p><a href=\"https://movie.douban.com/subject/29984000/\" target=\"_blank\" rel=\"noopener\">《热带往事》</a>  主演：彭于晏 ｜ 短评：暗红色的回忆涌动着挣扎、救赎<br><a href=\"https://movie.douban.com/subject/1920805/\" target=\"_blank\" rel=\"noopener\">《成为简·奥斯汀》</a> 主演：安妮海瑟薇<br><a href=\"https://movie.douban.com/subject/1418200/\" target=\"_blank\" rel=\"noopener\">《傲慢与偏见》</a> 地区：🇺🇸 ｜ 短评：一个傲慢，一个偏见。玛丽苏式的爱情故事<br><a href=\"https://movie.douban.com/subject/35158160/\" target=\"_blank\" rel=\"noopener\">《我的姐姐》</a> 主演：张子枫<br><a href=\"https://movie.douban.com/subject/26816376/\" target=\"_blank\" rel=\"noopener\">《超级的我》</a> 主演：王大陆</p>\n<h3 id=\"电影\"><a href=\"#电影\" class=\"headerlink\" title=\"电影\"></a>电影</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://movie.douban.com/subject/3430271/\" target=\"_blank\" rel=\"noopener\">《沙漠之花》</a> 主演：安妮海瑟薇</li>\n</ul>\n<h2 id=\"金基德\"><a href=\"#金基德\" class=\"headerlink\" title=\"金基德\"></a>金基德</h2><blockquote>\n<p>导演 <a href=\"https://movie.douban.com/celebrity/1031241/\" target=\"_blank\" rel=\"noopener\">金基德</a> 值得拥有单独板块！</p>\n</blockquote>\n<ul>\n<li><a href=\"\">人间，空间，时间和人</a><br>又名「畸欲伊甸园」，一贯符合金基德重口、欲望风格；还有男神张根硕（有些发福的时候拍摄，没有少年气）。<br>人间、时间、空间 和 人；蒙太奇式的剪辑方式将人性最赤裸的部分揭示。善良、邪恶都是轮回。<br>推荐指数：🌟🌟🌟🌟</li>\n</ul>\n<h2 id=\"闲暇时\"><a href=\"#闲暇时\" class=\"headerlink\" title=\"闲暇时\"></a>闲暇时</h2><ul>\n<li>博文整理…</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["晴雅集"],"tags":[]},{"title":"留言板","url":"http://jocolorful.com/2021/06/19/留言板/","content":"<blockquote>\n<p>hi~，很高兴见到你！期待这里能留下你的足迹！</p>\n</blockquote>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"Weekly","url":"http://jocolorful.com/2021/06/19/Weekly/","content":"<h4 id=\"2022-03-20-2021-04-01\"><a href=\"#2022-03-20-2021-04-01\" class=\"headerlink\" title=\"2022.03.20 - 2021.04.01\"></a>2022.03.20 - 2021.04.01</h4><ul>\n<li><p><a href=\"https://github.com/rome/tools\" target=\"_blank\" rel=\"noopener\">rome</a></p>\n<ol>\n<li>Rome 是一个格式化/lint/打包的工具，可支持 JavaScript/TypeScript/JSON/HTML/Markdown/CSS<br>is a formatter, linter, bundler, and more for JavaScript, TypeScript, JSON, HTML, Markdown, and CSS.</li>\n<li>Rome 旨在取代Babel/ESLint/webpack/Prettier/Jest…</li>\n<li>统一多种工具，建立在一个共享的基础上，为代码处理/错误展示/并行研发/缓存和配置提供一种内聚的体验。</li>\n<li>有很强的约定，旨在具有最小的配置。</li>\n<li>使用 Rust 书写</li>\n</ol>\n</li>\n<li><p><a href=\"https://github.com/goldbergyoni/javascript-testing-best-practices/blob/master/readme-zh-CN.md\" target=\"_blank\" rel=\"noopener\">Javascript 测试的组件时间</a></p>\n</li>\n<li><p><a href=\"https://github.com/redwoodjs/redwood\" target=\"_blank\" rel=\"noopener\">Redwood</a></p>\n<ul>\n<li>可以研究下源码</li>\n</ul>\n</li>\n<li><p><a href=\"https://2ality.com/2022/04/shadow-realms.html\" target=\"_blank\" rel=\"noopener\">ShadowRealms ECMA的新提案，更好的 eval</a></p>\n</li>\n<li><p><a href=\"https://www.huy.rocks/everyday/04-01-2022-typescript-how-the-compiler-compiles\" target=\"_blank\" rel=\"noopener\">TS 是如何编译的</a></p>\n</li>\n</ul>\n<h4 id=\"2022-03-20-2021-04-01-1\"><a href=\"#2022-03-20-2021-04-01-1\" class=\"headerlink\" title=\"2022.03.20 - 2021.04.01\"></a>2022.03.20 - 2021.04.01</h4><ul>\n<li><a href=\"https://reactjs.org/blog/2022/03/29/react-v18.html\" target=\"_blank\" rel=\"noopener\">React 18 is released</a></li>\n<li><a href=\"https://www.zhenghao.io/posts/react-rerender\" target=\"_blank\" rel=\"noopener\">When Does React Render Your Component?</a></li>\n</ul>\n<h4 id=\"2022-03-14-2021-03-20\"><a href=\"#2022-03-14-2021-03-20\" class=\"headerlink\" title=\"2022.03.14 - 2021.03.20\"></a>2022.03.14 - 2021.03.20</h4><ul>\n<li><a href=\"https://alexkondov.com/tao-of-node/\" target=\"_blank\" rel=\"noopener\">Tao of Node - Design, Architecture &amp; Best Practices</a></li>\n<li><a href=\"https://fettblog.eu/how-not-to-learn-typescript/\" target=\"_blank\" rel=\"noopener\">How to learn TypeScript</a></li>\n</ul>\n<h4 id=\"2022-03-14-2021-03-20-1\"><a href=\"#2022-03-14-2021-03-20-1\" class=\"headerlink\" title=\"2022.03.14 - 2021.03.20\"></a>2022.03.14 - 2021.03.20</h4><ul>\n<li><a href=\"https://bejamas.io/blog/remix-vs-nextjs/\" target=\"_blank\" rel=\"noopener\">Remix VS Next.js</a></li>\n<li><a href=\"https://betterprogramming.pub/the-future-of-micro-frontends-2f527f97d506\" target=\"_blank\" rel=\"noopener\">微前端的未来</a></li>\n<li><a href=\"https://fettblog.eu/how-not-to-learn-typescript/\" target=\"_blank\" rel=\"noopener\">如何学习 TypeScript</a></li>\n<li><a href=\"https://auth0.com/blog/using-https-in-your-development-environment/\" target=\"_blank\" rel=\"noopener\">如何在本地搭建一个 HTTPS 的服务</a></li>\n<li><a href=\"https://www.adamcollier.co.uk/blog/moving-from-next-to-remix\" target=\"_blank\" rel=\"noopener\">从 Next 迁移到 Remix….</a>真是瞎折腾啊 😅</li>\n<li><a href=\"https://www.chakshunyu.com/blog/a-fundamental-guide-to-react-suspense/\" target=\"_blank\" rel=\"noopener\">A Fundamental Guide To React Suspense</a></li>\n</ul>\n<h4 id=\"2022-03-7-2021-03-13\"><a href=\"#2022-03-7-2021-03-13\" class=\"headerlink\" title=\"2022.03.7 - 2021.03.13\"></a>2022.03.7 - 2021.03.13</h4><ul>\n<li><a href=\"https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html\" target=\"_blank\" rel=\"noopener\">React18 Release Candidate</a></li>\n<li><a href=\"https://tympanus.net/codrops/2022/03/04/creating-native-web-components/\" target=\"_blank\" rel=\"noopener\">Creating Native Web Components</a></li>\n<li><a href=\"https://github.com/exhibitionist-digital/ultra\" target=\"_blank\" rel=\"noopener\">💎 Ultra：Deno + React</a> 🌟 Modern Streaming React Framework in Deno</li>\n</ul>\n<h4 id=\"2022-02-21-2021-02-27\"><a href=\"#2022-02-21-2021-02-27\" class=\"headerlink\" title=\"2022.02.21 - 2021.02.27\"></a>2022.02.21 - 2021.02.27</h4><ul>\n<li><a href=\"https://github.com/nodejs/node/commit/ba639d052b\" target=\"_blank\" rel=\"noopener\">Node 远程 import commit</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2022/02/develop-text-editor-web/\" target=\"_blank\" rel=\"noopener\">如何去开发一个文本编辑器</a></li>\n<li><a href=\"https://blog.logrocket.com/running-commands-with-execa-in-node-js/\" target=\"_blank\" rel=\"noopener\">在 Node.js 中使用 execa</a></li>\n</ul>\n<h4 id=\"2022-02-13-2021-02-20\"><a href=\"#2022-02-13-2021-02-20\" class=\"headerlink\" title=\"2022.02.13 - 2021.02.20\"></a>2022.02.13 - 2021.02.20</h4><ul>\n<li><a href=\"https://2021.stateofjs.com/zh-Hans/libraries/build-tools\" target=\"_blank\" rel=\"noopener\">前端 2021 😄</a></li>\n<li><a href=\"https://turborepo.org/docs/features/pipelines\" target=\"_blank\" rel=\"noopener\">🌟🌟 Turborepo</a></li>\n<li><a href=\"https://monorepo.tools/\" target=\"_blank\" rel=\"noopener\">Understanding Monorepos</a></li>\n</ul>\n<h4 id=\"2022-02-07-2022-02-13\"><a href=\"#2022-02-07-2022-02-13\" class=\"headerlink\" title=\"2022.02.07 - 2022.02.13\"></a>2022.02.07 - 2022.02.13</h4><ul>\n<li><a href=\"https://fusebit.io/blog/node-fetch/\" target=\"_blank\" rel=\"noopener\">高版本支持 fetch 了</a></li>\n<li><a href=\"https://blog.appsignal.com/2022/02/02/use-streams-to-build-high-performing-nodejs-applications.html\" target=\"_blank\" rel=\"noopener\">使用 stream 构建性能的 Node 应用</a></li>\n<li><a href=\"https://wattenberger.com/blog/react-and-d3\" target=\"_blank\" rel=\"noopener\">React and D3</a></li>\n</ul>\n<h4 id=\"2022-01-31-2022-02-06\"><a href=\"#2022-01-31-2022-02-06\" class=\"headerlink\" title=\"2022.01.31 - 2022.02.06\"></a>2022.01.31 - 2022.02.06</h4><ul>\n<li><a href=\"https://2ality.com/2022/01/pipe-operator.html\" target=\"_blank\" rel=\"noopener\">关于 pipe 操作符</a></li>\n<li><a href=\"https://thenewstack.io/will-2022-be-a-golden-age-for-full-stack-javascript/\" target=\"_blank\" rel=\"noopener\">2022 年会是全栈 JavaScript 的黄金时代吗?</a></li>\n<li><a href=\"https://www.chakshunyu.com/blog/what-you-should-definitely-look-out-for-in-react-in-2022/\" target=\"_blank\" rel=\"noopener\">React 2022 的趋势</a><ul>\n<li>Remix</li>\n<li>Server-Side Rendering</li>\n<li>Concurrent Rendering</li>\n<li>Behaviour Testing</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2022-01-24-2022-01-30\"><a href=\"#2022-01-24-2022-01-30\" class=\"headerlink\" title=\"2022.01.24 - 2022.01.30\"></a>2022.01.24 - 2022.01.30</h4><ul>\n<li><a href=\"https://2ality.com/2022/01/structured-clone.html\" target=\"_blank\" rel=\"noopener\">structured-clone</a> 面试官要是让我手写 clone，我就一个 structuredClone 扔过去 😁</li>\n<li><a href=\"https://blog.plasmic.app/posts/how-react-server-components-work/\" target=\"_blank\" rel=\"noopener\">React Server Component</a></li>\n<li><a href=\"https://fusebit.io/blog/run-nodejs-from-google-sheets/\" target=\"_blank\" rel=\"noopener\">run-nodejs-from-google-sheets/</a></li>\n</ul>\n<h4 id=\"2022-01-17-2022-01-23\"><a href=\"#2022-01-17-2022-01-23\" class=\"headerlink\" title=\"2022.01.17 - 2022.01.23\"></a>2022.01.17 - 2022.01.23</h4><ul>\n<li><a href=\"https://blog.replit.com/code-editors\" target=\"_blank\" rel=\"noopener\">编辑器之争：Ace、CodeMirror、Monaco</a></li>\n<li><a href=\"https://parceljs.org/blog/parcel-css/\" target=\"_blank\" rel=\"noopener\">parcel-css</a></li>\n<li><a href=\"https://remix.run/blog/react-router-v6\" target=\"_blank\" rel=\"noopener\">ReactRouterV6 is released</a></li>\n<li><a href=\"https://www.robinwieruch.de/react-event-bubbling-capturing/\" target=\"_blank\" rel=\"noopener\">React 的冒泡和捕获</a></li>\n<li><a href=\"https://blog.saeloun.com/2022/01/13/react-18-usedefferedvalue-hook\" target=\"_blank\" rel=\"noopener\">Sneak peek into React 18 useDeferredValue hook</a></li>\n<li><a href=\"https://isamatov.com/react-reusable-components/\" target=\"_blank\" rel=\"noopener\">使 React 组件高度复用的六条建议</a><ol>\n<li><a href=\"https://isamatov.com/react-reusable-components/#use-container-component-pattern\" target=\"_blank\" rel=\"noopener\">renderChilden</a></li>\n<li><a href=\"https://isamatov.com/react-reusable-components/#generic-versus-specialized-components\" target=\"_blank\" rel=\"noopener\">使用特定组件复用通用组件 😅，大概就是包装一层的意思</a></li>\n<li><a href=\"https://isamatov.com/react-reusable-components/#be-mindful-about-what-your-components-get-to-decide\" target=\"_blank\" rel=\"noopener\">业务不要注入 UI 判断，将判断数据的逻辑前置</a></li>\n<li>Flatten your props</li>\n<li>Props fallback 机制</li>\n<li>避免解构</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"2022-01-10-2022-01-16\"><a href=\"#2022-01-10-2022-01-16\" class=\"headerlink\" title=\"2022.01.10 - 2022.01.16\"></a>2022.01.10 - 2022.01.16</h4><ul>\n<li><a href=\"https://h3manth.com/ES2021/\" target=\"_blank\" rel=\"noopener\">ES2021 小结</a></li>\n<li><a href=\"https://www.jackfranklin.co.uk/blog/comparing-svelte-and-react-javascript/\" target=\"_blank\" rel=\"noopener\">Svelte VS React</a></li>\n<li><a href=\"https://github.com/facebook/create-react-app/releases/tag/v5.0.0\" target=\"_blank\" rel=\"noopener\">🌟 CRA 5.0</a></li>\n<li><a href=\"https://www.charpeni.com/blog/array-prototype-group-by-to-the-rescue\" target=\"_blank\" rel=\"noopener\">Array.prototype.groupBy</a></li>\n<li><a href=\"https://github.com/visionmedia/supertest\" target=\"_blank\" rel=\"noopener\">SuperTest6.2</a></li>\n</ul>\n<h4 id=\"2022-12-03-2022-01-09\"><a href=\"#2022-12-03-2022-01-09\" class=\"headerlink\" title=\"2022.12.03 - 2022.01.09\"></a>2022.12.03 - 2022.01.09</h4><ul>\n<li><a href=\"https://calendar.perfplanet.com/2021/plugging-memory-leaks-in-your-app/\" target=\"_blank\" rel=\"noopener\">内存泄漏的工具</a><br>  npx fuite /</li>\n<li><a href=\"https://github.com/chartjs/Chart.js\" target=\"_blank\" rel=\"noopener\">Chart.js</a></li>\n<li><a href=\"https://github.com/parallax/jsPDF\" target=\"_blank\" rel=\"noopener\">JSPDF</a></li>\n<li><a href=\"https://try.javascript.org.pl/\" target=\"_blank\" rel=\"noopener\">JS 命令行黑魔法</a></li>\n</ul>\n<h4 id=\"2021-12-27-2022-01-02\"><a href=\"#2021-12-27-2022-01-02\" class=\"headerlink\" title=\"2021.12.27 - 2022.01.02\"></a>2021.12.27 - 2022.01.02</h4><ul>\n<li><a href=\"https://www.tines.com/blog/understanding-why-our-build-got-15x-slower-with-webpack-5\" target=\"_blank\" rel=\"noopener\">Webpack 5 导致的性能下降问题</a><br>  一个小技巧：node –inspect-brk ./node_modules/.bin/webpack 排查<br>  原因大概是因为：💡如果 Symbol.IsConcatSpreadable 在应用程序的任何位置、任何对象上设置了任何值，那么任何后续的使用都 concat 将在 Node 和 Chrome 上变慢。(这是否意味着，在构建过程成，我们可以移除关于 Symbol.IsConcatSpreadable 的操作)或者开启 <a href=\"https://webpack.js.org/configuration/experiments/#experimentsbackcompat\" target=\"_blank\" rel=\"noopener\">backCompat模式</a></li>\n<li><a href=\"https://jvns.ca/blog/2021/11/15/esbuild-vue/\" target=\"_blank\" rel=\"noopener\">esbuild-vue</a></li>\n</ul>\n<h4 id=\"2021-12-20-2021-12-26\"><a href=\"#2021-12-20-2021-12-26\" class=\"headerlink\" title=\"2021.12.20 - 2021.12.26\"></a>2021.12.20 - 2021.12.26</h4><ul>\n<li><a href=\"https://github.com/BuilderIO/mitosis#readme\" target=\"_blank\" rel=\"noopener\">🌟🌟🌟 Mitosis:Write components once, run everywhere</a></li>\n<li><a href=\"https://floating-ui.com/\" target=\"_blank\" rel=\"noopener\">floating-ui</a></li>\n</ul>\n<h4 id=\"2021-11-29-2021-12-05\"><a href=\"#2021-11-29-2021-12-05\" class=\"headerlink\" title=\"2021.11.29 - 2021.12.05\"></a>2021.11.29 - 2021.12.05</h4><ul>\n<li><a href=\"https://joshcollinsworth.com/blog/introducing-svelte-comparing-with-react-vue\" target=\"_blank\" rel=\"noopener\">svelte VS reactand vue</a></li>\n<li><a href=\"https://leerob.io/blog/rust\" target=\"_blank\" rel=\"noopener\">Rust Is The Future of JavaScript Infrastructure ？</a></li>\n<li><a href=\"https://www.gatsbyjs.com/blog/whats-new-in-gatsby-4/\" target=\"_blank\" rel=\"noopener\">GatsbyV4</a></li>\n<li><a href=\"https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">JavaScript 的数据结构和算法</a></li>\n</ul>\n<h4 id=\"2021-11-08-2021-11-14\"><a href=\"#2021-11-08-2021-11-14\" class=\"headerlink\" title=\"2021.11.08 - 2021.11.14\"></a>2021.11.08 - 2021.11.14</h4><ul>\n<li><a href=\"https://dev.to/mbarzeev/converting-a-react-component-to-typescript-15cl\" target=\"_blank\" rel=\"noopener\">将 React 的组件转换成 TypeScript </a></li>\n<li><a href=\"https://react.statuscode.com/link/114809/web\" target=\"_blank\" rel=\"noopener\">如何检测 React 的慢渲染</a></li>\n<li><a href=\"https://developer.chrome.com/docs/devtools/recorder/\" target=\"_blank\" rel=\"noopener\">Record, replay and measure user flow</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=XEt09iK8IXs\" target=\"_blank\" rel=\"noopener\">A coding InterView to Dan</a></li>\n</ul>\n<h4 id=\"2021-10-25-2021-10-31\"><a href=\"#2021-10-25-2021-10-31\" class=\"headerlink\" title=\"2021.10.25 - 2021.10.31\"></a>2021.10.25 - 2021.10.31</h4><ul>\n<li><a href=\"https://nextjs.org/blog/next-12\" target=\"_blank\" rel=\"noopener\">Next12</a></li>\n<li><a href=\"https://reflect.run/articles/reflection-at-reflect/\" target=\"_blank\" rel=\"noopener\">Reflection at Reflect: The Reflect and Proxy APIs</a></li>\n<li><a href=\"https://css-tricks.com/web-streams-everywhere-and-fetch-for-node-js/\" target=\"_blank\" rel=\"noopener\">Web Streams Everywhere</a></li>\n<li><a href=\"https://jsxgraph.org/wp/index.html\" target=\"_blank\" rel=\"noopener\">jsxGraph</a></li>\n</ul>\n<h4 id=\"2021-10-08-2021-10-15\"><a href=\"#2021-10-08-2021-10-15\" class=\"headerlink\" title=\"2021.10.08 - 2021.10.15\"></a>2021.10.08 - 2021.10.15</h4><ul>\n<li><a href=\"https://remix.run/blog/react-router-v6\" target=\"_blank\" rel=\"noopener\">react-router-v6</a></li>\n<li><a href=\"https://overreacted.io/why-do-react-elements-have-typeof-property/\" target=\"_blank\" rel=\"noopener\">为什么 React 有一个 $$typeof 属性</a></li>\n<li><a href=\"https://overreacted.io/zh-hans/how-does-react-tell-a-class-from-a-function/\" target=\"_blank\" rel=\"noopener\">React 如何区分 class 和 function</a></li>\n<li><a href=\"https://www.zhihu.com/question/29504639\" target=\"_blank\" rel=\"noopener\">如何理解虚拟 DOM</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/web-components/shadowdom?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">Shadow DOM</a>没看 😳</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// React 内部</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;&#125;</span><br><span class=\"line\">Component.isReactClass = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们可以像这样检查它</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeting</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Greeting.isReactClass); <span class=\"comment\">// ✅ 是的</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/facebook/react/pull/13905/commits/67771d411a854da673fb7a872921c0c2d2640564\" target=\"_blank\" rel=\"noopener\">相关 commit</a></p>\n<h4 id=\"2021-10-08-2021-10-15-1\"><a href=\"#2021-10-08-2021-10-15-1\" class=\"headerlink\" title=\"2021.10.08 - 2021.10.15\"></a>2021.10.08 - 2021.10.15</h4><ul>\n<li><a href=\"how-to-cancel-an-http-request-in-node-js\">how-to-cancel-an-http-request-in-node-js</a></li>\n<li><a href=\"https://nodejs.org/en/blog/release/v17.0.0/\" target=\"_blank\" rel=\"noopener\">Node 17 Released</a></li>\n<li><a href=\"https://www.taniarascia.com/understanding-map-and-set-javascript/\" target=\"_blank\" rel=\"noopener\">understanding-map-and-set-javascript</a></li>\n</ul>\n<h4 id=\"2021-09-29-2021-10-07\"><a href=\"#2021-09-29-2021-10-07\" class=\"headerlink\" title=\"2021.09.29 - 2021.10.07\"></a>2021.09.29 - 2021.10.07</h4><ul>\n<li><a href=\"https://jakearchibald.com/2021/cors/\" target=\"_blank\" rel=\"noopener\">How to win at CORS</a></li>\n<li><a href=\"https://blog.bitsrc.io/is-deno-still-a-thing-a-look-at-the-status-of-the-node-killer-884d47981d09\" target=\"_blank\" rel=\"noopener\">is-deno-still-a-thing</a></li>\n<li><a href=\"https://simonplend.com/guidelines-for-choosing-a-node-js-framework/\" target=\"_blank\" rel=\"noopener\">guidelines-for-choosing-a-node-js-framework</a></li>\n</ul>\n<h4 id=\"2021-09-21-2021-09-28\"><a href=\"#2021-09-21-2021-09-28\" class=\"headerlink\" title=\"2021.09.21 - 2021.09.28\"></a>2021.09.21 - 2021.09.28</h4><ul>\n<li><a href=\"https://kentcdodds.com/blog/how-i-built-a-modern-website-in-2021\" target=\"_blank\" rel=\"noopener\">how-i-built-a-modern-website-in-2021</a></li>\n<li><a href=\"https://yagmurcetintas.com/journal/whats-new-in-react-18\" target=\"_blank\" rel=\"noopener\">what’s new in React 18….</a></li>\n<li><a href=\"https://github.com/glennreyes/react-countup\" target=\"_blank\" rel=\"noopener\">react-countup</a></li>\n</ul>\n<h4 id=\"2021-09-06-2021-09-12\"><a href=\"#2021-09-06-2021-09-12\" class=\"headerlink\" title=\"2021.09.06 - 2021.09.12\"></a>2021.09.06 - 2021.09.12</h4><ul>\n<li><p><a href=\"https://blog.bitsrc.io/common-npm-mistakes-every-developer-should-avoid-60ab0642d8f9\" target=\"_blank\" rel=\"noopener\">Common NPM Mistakes Every Developer Should Avoid</a></p>\n<ul>\n<li>手动给 package.json 添加依赖</li>\n<li>Locking your peer dependencies to a specific patch version</li>\n<li>Publishing multiple modules as a single package</li>\n<li>Publishing sensitive data by accident</li>\n<li>Providing a regular authentication token</li>\n<li>Upgrading for the sake of upgrading</li>\n<li>Deleting package-lock.json</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.zenrows.com/blog/web-scraping-with-javascript-and-nodejs#introduction\" target=\"_blank\" rel=\"noopener\">Web Scraping with Javascript and Node.js</a></p>\n<ul>\n<li>using-javascripts-async 感觉比较有意思</li>\n</ul>\n</li>\n<li><p><a href=\"https://web.dev/bundling-non-js-resources/\" target=\"_blank\" rel=\"noopener\">无打包的愿景</a></p>\n</li>\n</ul>\n<h4 id=\"2021-09-30-2021-09-05\"><a href=\"#2021-09-30-2021-09-05\" class=\"headerlink\" title=\"2021.09.30 - 2021.09.05\"></a>2021.09.30 - 2021.09.05</h4><ul>\n<li><a href=\"https://developer.51cto.com/art/202109/680671.htm\" target=\"_blank\" rel=\"noopener\">即将到来的 ECMAScript 2022标准吗</a></li>\n<li><a href=\"https://blog.appsignal.com/2021/09/01/best-practices-for-logging-in-nodejs.html\" target=\"_blank\" rel=\"noopener\">log 在 Node 中的最佳实践</a></li>\n<li><a href=\"https://docschina.org/weekly/react/docs/244\" target=\"_blank\" rel=\"noopener\">docschina</a></li>\n<li><a href=\"https://github.com/jwagner/smartcrop.js\" target=\"_blank\" rel=\"noopener\">smartcrop</a></li>\n</ul>\n<h4 id=\"2021-08-16-2021-08-23\"><a href=\"#2021-08-16-2021-08-23\" class=\"headerlink\" title=\"2021.08.16 - 2021.08.23\"></a>2021.08.16 - 2021.08.23</h4><ul>\n<li><a href=\"https://moderncss.dev/practical-uses-of-css-math-functions-calc-clamp-min-max/\" target=\"_blank\" rel=\"noopener\">Practical Uses of CSS Math Functions: calc, clamp, min, max</a></li>\n<li><a href=\"https://web.dev/accent-color\" target=\"_blank\" rel=\"noopener\">CSS accent-color</a></li>\n<li><a href=\"https://web.dev/building-a-switch-component\" target=\"_blank\" rel=\"noopener\">building-a-switch-componen</a></li>\n</ul>\n<h4 id=\"2021-08-09-2021-08-15\"><a href=\"#2021-08-09-2021-08-15\" class=\"headerlink\" title=\"2021.08.09 - 2021.08.15\"></a>2021.08.09 - 2021.08.15</h4><ul>\n<li><a href=\"https://2ality.com/2021/08/iteration-helpers.html\" target=\"_blank\" rel=\"noopener\">JavaScript needs more helper functions for iteration</a></li>\n<li><a href=\"https://nextjs.org/blog/next-11-1\" target=\"_blank\" rel=\"noopener\">Next.js 11.1</a></li>\n<li><a href=\"https://nodejs.org/en/blog/vulnerability/aug-2021-security-releases/\" target=\"_blank\" rel=\"noopener\">August 2021 Security Releases</a></li>\n<li><a href=\"https://snyk.io/blog/how-to-publish-node-js-docker-images-to-docker-hub-registry-using-github-actions/\" target=\"_blank\" rel=\"noopener\">How to publish Node.js Docker images to Docker Hub registry using GitHub Actions</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2021/08/react-children-iteration-methods/\" target=\"_blank\" rel=\"noopener\">React Children And Iteration Methods</a></li>\n</ul>\n<h4 id=\"2021-07-28-2021-08-08\"><a href=\"#2021-07-28-2021-08-08\" class=\"headerlink\" title=\"2021.07.28 - 2021.08.08\"></a>2021.07.28 - 2021.08.08</h4><ul>\n<li><a href=\"https://dmitripavlutin.com/promise-all-settled/\" target=\"_blank\" rel=\"noopener\">How to Use Promise.allSettled()</a></li>\n<li><a href=\"https://felixgerschau.com/react-hooks-separation-of-concerns/\" target=\"_blank\" rel=\"noopener\">Separation of Concerns with React Hooks </a></li>\n<li><a href=\"https://nodejs.org/en/blog/release/v16.6.0/\" target=\"_blank\" rel=\"noopener\">Node v16.6.0</a></li>\n<li><a href=\"https://dev.to/arcanis/yarn-3-0-performances-esbuild-better-patches-e07\" target=\"_blank\" rel=\"noopener\">Yarn 3.0</a></li>\n</ul>\n<h4 id=\"2021-07-20-2021-07-27\"><a href=\"#2021-07-20-2021-07-27\" class=\"headerlink\" title=\"2021.07.20 - 2021.07.27\"></a>2021.07.20 - 2021.07.27</h4><ul>\n<li><a href=\"https://betterprogramming.pub/5-code-smells-react-beginners-should-avoid-480c97799162\" target=\"_blank\" rel=\"noopener\">React: 五种不好的编程方式</a></li>\n<li><a href=\"https://javascript.plainenglish.io/es12-is-going-to-make-your-life-easier-6be8d131e117\" target=\"_blank\" rel=\"noopener\">ES2021</a><ul>\n<li>replaceAll 已经用上了</li>\n<li>&amp;&amp;=，||=，和??=</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/tannerlinsley/react-virtual\" target=\"_blank\" rel=\"noopener\">react-virtual</a></li>\n<li><a href=\"https://www.xiaoheidiannao.com/213903.html\" target=\"_blank\" rel=\"noopener\">视频防盗链技术方案研究与讲解</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-92\" target=\"_blank\" rel=\"noopener\">v8-release-92</a></li>\n</ul>\n<h4 id=\"2021-07-12-2021-07-19\"><a href=\"#2021-07-12-2021-07-19\" class=\"headerlink\" title=\"2021.07.12 - 2021.07.19\"></a>2021.07.12 - 2021.07.19</h4><ul>\n<li><a href=\"https://v8.dev/blog/v8-release-92\" target=\"_blank\" rel=\"noopener\">V8 release v9.2</a></li>\n<li><a href=\"https://github.com/tannerlinsley/react-virtual\" target=\"_blank\" rel=\"noopener\">react-virtual</a></li>\n<li><a href=\"https://epicreact.dev/one-react-mistake-thats-slowing-you-down/\" target=\"_blank\" rel=\"noopener\">One React mistake that’s slowing you down</a></li>\n</ul>\n<h4 id=\"2021-07-12-2021-07-19-1\"><a href=\"#2021-07-12-2021-07-19-1\" class=\"headerlink\" title=\"2021.07.12 - 2021.07.19\"></a>2021.07.12 - 2021.07.19</h4><ul>\n<li><p><a href=\"https://www.smashingmagazine.com/2021/06/web-workers-2021/\" target=\"_blank\" rel=\"noopener\">The State Of Web Workers In 2021</a></p>\n</li>\n<li><p><a href=\"https://jakearchibald.com/2021/export-default-thing-vs-thing-as-default/\" target=\"_blank\" rel=\"noopener\">export default thing is different to export { thing as default }</a></p>\n</li>\n<li><p><a href=\"https://jsisweird.com/\" target=\"_blank\" rel=\"noopener\">JS Is Weird</a> 我挺讨厌这个网站的</p>\n</li>\n<li><p><a href=\"https://jakearchibald.com/2021/encoding-data-for-post-requests/\" target=\"_blank\" rel=\"noopener\">Encoding data for POST requests</a></p>\n<ul>\n<li><p>URLSearchParams</p>\n<ul>\n<li>URLSearchParams 做为请求体的 body，Content-Type 头部会自动设置为「application/x-www-form-urlencoded」</li>\n</ul>\n</li>\n<li><p>FormData</p>\n<ul>\n<li>最主要的是文件的传递</li>\n<li>formData 做为请求体：Content-Type 头部会自动设置为「multipart/form-data」</li>\n<li>FormData 可以转换为 URLSearchParams， 但含有文件时会抛错：application/x-www-form-urlencoded 不能代表文件数据</li>\n</ul>\n</li>\n<li><p>Other Fetch bodies</p>\n<ul>\n<li>Blobs</li>\n<li>Strings：Content-Type：「text/plain;charset=UTF-8」</li>\n<li>Buffers：需要自己设置 Content-Type 的值</li>\n<li>Streams：不要试图处理 multipart/form-data或application/x-www-form-urlencoded，使用 FormData 和 URLSearchParams</li>\n</ul>\n</li>\n<li><p>Bonus round: Converting Form Data to JSON</p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://medium.com/geekculture/react-5-things-that-might-surprise-you-ddefd9fbac0f\" target=\"_blank\" rel=\"noopener\">React — 5 Things That Might Surprise You</a></p>\n<ul>\n<li>previous state is unpredictable</li>\n<li>use useRef to store a static variable</li>\n<li>使用 key 强制重新挂载一个组件</li>\n<li>Context API 会导致所有的的组件重新渲染，可以使用第三方库：<a href=\"https://github.com/dai-shi/use-context-selector\" target=\"_blank\" rel=\"noopener\">use-context-selector</a></li>\n<li>关于 Children 的 api：toArray、map、forEach、count、only</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2021-07-05-2021-07-11\"><a href=\"#2021-07-05-2021-07-11\" class=\"headerlink\" title=\"2021.07.05 - 2021.07.11\"></a>2021.07.05 - 2021.07.11</h4><ul>\n<li><p><a href=\"https://www.robinwieruch.de/react-usecontext-hook\" target=\"_blank\" rel=\"noopener\">How to useContext in React</a></p>\n</li>\n<li><p><a href=\"https://bootcamp.uxdesign.cc/you-have-to-start-using-this-css-property-in-your-websites-7353f46def79\" target=\"_blank\" rel=\"noopener\">You have to start using this CSS property in your websites</a></p>\n<ul>\n<li>我们的项目一直都有「safe-area」但我一直以为是通过 postCSS 定义的。其实在 iOS 上是原生的，安卓上可能有的手机有（我除了菜一无所有）</li>\n</ul>\n</li>\n<li><p><a href=\"https://medium.com/dev-bits/writing-memory-efficient-software-applications-in-node-js-5575f646b67f#id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6IjFiZjhhODRkM2VjZDc3ZTlmMmFkNWYwNmZmZDI2MDcwMWRkMDZkOTAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJuYmYiOjE2MjU3MTQyMjIsImF1ZCI6IjIxNjI5NjAzNTgzNC1rMWs2cWUwNjBzMnRwMmEyamFtNGxqZGNtczAwc3R0Zy5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzkxNDcyODA1ODg3NDA4MDA4NyIsImVtYWlsIjoiaW5remhvdUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXpwIjoiMjE2Mjk2MDM1ODM0LWsxazZxZTA2MHMydHAyYTJqYW00bGpkY21zMDBzdHRnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwibmFtZSI6IuWRqOmiliIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS9BQVRYQUp4YmhlVVJOWUlWNVlZNVpiUk8xQW9jMzgtSl9WVUViSUVRal9DYT1zOTYtYyIsImdpdmVuX25hbWUiOiLpopYiLCJmYW1pbHlfbmFtZSI6IuWRqCIsImlhdCI6MTYyNTcxNDUyMiwiZXhwIjoxNjI1NzE4MTIyLCJqdGkiOiI4MjdmMzY4OGEyYWQ4NjViYjhjNGNmOGE3OGUyMzY2ZjI2MTI4MjZiIn0.wMiYJApJEbHbF-sg_7tPXHZ9ZzoSR8V3yBlQeCjGYKVCOSfvKIBkugRqmMX96oVyqdFz5tU849Yx0hkGZHfif_ExtAzYcdmiyxs1eV5DiLZ3ieI_yDwaWrtpvdrkHfvT-3iE1ahsd_wrs6S2CGJB2H6gupBKmrtKrBFC1jfTz9DlrsJk88YFJyvLydoPxit8s1gc4nRa3xQt2VyMW4IMUjqbNyhx4yNjWaXuYbJ8J2eMKv8hBdOOx80sVRPEHDzOmM7GqV1iewgrUS3nBKFCJlGxaEV4HuIOuqyGeUx3fcG2E9HUEQJGXRcQRF7-O-cFEoxSkFUKDzg2kSieVjoGsQ\" target=\"_blank\" rel=\"noopener\">Writing memory efficient software applications in Node.js</a></p>\n<ul>\n<li>RAM（Random Access Memory）对于大文件的操作一不小心就 OOM，可以从 Node.js 提供的「流」和「缓冲」进行优化</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2021-06-28-2021-07-04\"><a href=\"#2021-06-28-2021-07-04\" class=\"headerlink\" title=\"2021.06.28 - 2021.07.04\"></a>2021.06.28 - 2021.07.04</h4><ul>\n<li><a href=\"https://2ality.com/2021/06/temporal-api.html\" target=\"_blank\" rel=\"noopener\">Temporal：JavaScript’s new date time API</a></li>\n<li><a href=\"https://dl.acm.org/doi/pdf/10.1145/3386327\" target=\"_blank\" rel=\"noopener\">JavaScript: The First 20 Years</a></li>\n<li><a href=\"https://kentcdodds.com/blog/super-simple-start-to-es-modules-in-node-js\" target=\"_blank\" rel=\"noopener\">Super Simple Start to ESModules in Node.js</a></li>\n<li><a href=\"https://dev.to/ryansolid/solidjs-official-release-the-long-road-to-1-0-4ldd\" target=\"_blank\" rel=\"noopener\">SolidJS Official Release: The long road to 1.0</a></li>\n<li><a href=\"https://javascript.plainenglish.io/how-to-use-throttle-or-debounce-with-react-hook-776e402a5fac\" target=\"_blank\" rel=\"noopener\">How to use Throttle or Debounce with React Hook</a></li>\n<li><a href=\"https://www.scottohara.me/blog/2021/05/28/disabled-links.html?utm_source=CSS-Weekly&utm_campaign=Issue-464&utm_medium=web\" target=\"_blank\" rel=\"noopener\">Disabling a link</a></li>\n<li><a href=\"https://css-tricks.com/using-performant-next-gen-images-in-css-with-image-set/?utm_source=CSS-Weekly&utm_campaign=Issue-464&utm_medium=web\" target=\"_blank\" rel=\"noopener\">Using Performant Next-Gen Images in CSS with image-set</a></li>\n</ul>\n<h4 id=\"2021-06-21-2021-06-27\"><a href=\"#2021-06-21-2021-06-27\" class=\"headerlink\" title=\"2021.06.21 - 2021.06.27\"></a>2021.06.21 - 2021.06.27</h4><ul>\n<li><a href=\"/2021/06/23/前端-React-18-所需要知道的/\">关于 React 18 你所需要知道的</a></li>\n<li><a href=\"https://h3manth.com/ES2021/\" target=\"_blank\" rel=\"noopener\">ES2021 Features!</a></li>\n<li><a href=\"https://nodejs.org/en/blog/release/v16.4.0/\" target=\"_blank\" rel=\"noopener\">Node v16.4.0 (Current) Released </a><ul>\n<li>AsyncLocalStorage 作用，使用场景？</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lirantal/nodejs-cli-apps-best-practices\" target=\"_blank\" rel=\"noopener\">28 (And Counting) Node CLI App Best Practices</a></li>\n<li><a href=\"https://dmitripavlutin.com/ecmascript-modules-dynamic-import/\" target=\"_blank\" rel=\"noopener\">How to Dynamically Import ECMAScript Modules</a></li>\n<li><a href=\"https://shubham-pandey.medium.com/pdf-generation-with-serverless-aws-and-puppeteer-cac3442b1c95\" target=\"_blank\" rel=\"noopener\">PDF generation with Serverless + AWS Lambda and Puppeteer.</a></li>\n</ul>\n<h4 id=\"2021-06-14-2021-06-20\"><a href=\"#2021-06-14-2021-06-20\" class=\"headerlink\" title=\"2021.06.14 - 2021.06.20\"></a>2021.06.14 - 2021.06.20</h4><p><a href=\"https://blog.webpagetest.org/posts/benchmarking-javascript-memory-usage/\" target=\"_blank\" rel=\"noopener\">JS 内存使用的基准测试</a></p>\n<ol>\n<li>根据v8 团队的研究：网络上 35% 的内存分配与 JavaScript 相关；10% 用于表示内存中的 DOM 元素；剩下的 55% 是图像。<a href=\"https://web.dev/monitor-total-page-memory-usage/\" target=\"_blank\" rel=\"noopener\">measureUserAgentSpecificMemory</a> API 目前仅限于 JS 和 DOM 相关信息，但确实也占据页面实际内存使用量的很大一部分（约 45%）。</li>\n</ol>\n<p>总结</p>\n<ol>\n<li>内存仍然是 Web 性能的一个尚未开发的主要领域，但这可能需要改变。随着发布的 JavaScript 数量不断增加，内存使用量也在增加。</li>\n<li>我们仍然需要更多信息来完善全貌。在任何时间点，浏览器实际可用的内存有多少？内存与关键业务和用户参与度指标有何关联？什么是内存的使用不与JavaScript和DOM的复杂性？</li>\n<li>虽然今天使用真实用户监控为您的站点获取这些数据可能存在挑战，但我在此处进行测试所采用的相同方法（一些 Chrome 标志与自定义指标配对）使您可以开始将内存相关数据提取到您的测试结果今天，我也喜欢看到人们这样做只是所以我们可以更多地了解我们是如何做的今天，其意义是什么，以及如何开始好转。</li>\n</ol>\n<p><a href=\"https://developer.chrome.com/blog/memory-inspector/\" target=\"_blank\" rel=\"noopener\">memory-inspector for chrome</a></p>\n<h4 id=\"2021-06-07-2021-06-11\"><a href=\"#2021-06-07-2021-06-11\" class=\"headerlink\" title=\"2021.06.07 - 2021.06.11\"></a>2021.06.07 - 2021.06.11</h4><p><a href=\"https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly\" target=\"_blank\" rel=\"noopener\">Making JavaScript run fast on WebAssembly</a><br><a href=\"https://jsonmatic.com/\" target=\"_blank\" rel=\"noopener\">https://jsonmatic.com/</a><br><a href=\"https://domevents.dev/\" target=\"_blank\" rel=\"noopener\">https://domevents.dev/</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"此时此刻","url":"http://jocolorful.com/2021/06/15/生活-此时此刻/","content":"<ul>\n<li>想干的越多，越不知道从哪里入手。心情便越是烦闷，如此恶性循环。</li>\n<li>不喜欢吃苹果，苹果味儿的汽水依然不喜欢</li>\n<li>执着于规划自己的生活，不知道干什么的时候最为恐怖</li>\n</ul>\n<hr />\n\n<ul>\n<li><p>2021-06-16：上班路上也挺美好，看见道路边的小公园，叶子都开了。新绿、嫩绿、浅绿、翠绿、深绿。终于有了些夏天繁茂的样子。路上上班的人很多，想想自己也是他们普通中的一员，也许他们和我也会有同样的想法吧：我们都是普通人。关注了知乎一个问题<a href=\"https://www.zhihu.com/question/288017836\" target=\"_blank\" rel=\"noopener\">「既然所有的生命都要死亡，那么生命的意义是什么?」</a></p>\n</li>\n<li><p>2021-06-19：部落格被装扮得花花绿绿，我还挺喜欢！</p>\n</li>\n<li><p>2021-06-23 14:33:00：我在摸鱼，还有点困 🥱 ，但是老板给我发了工资，我得想想干点啥以便对得起我的劳务费！</p>\n</li>\n<li><p>甜甜圈 🍩、冰淇淋 🍦、巧克力 🍫、曲奇 🍪、黑森林小蛋糕、布丁 🍮… 我可太喜欢甜食了 🍰</p>\n</li>\n<li><p>灰：你是不是长胖了？我：嗯！从 86 到 88 了。灰：你可是要把人气死！</p>\n</li>\n</ul>\n<hr />\n\n<ul>\n<li><p>如果这种在技术上没有什么突破，带队就沦落成了一周的「里程碑」。总想把自己学到的东西运用到工作当中去，是不是太功利了些？</p>\n</li>\n<li><p>如果这周没 breaking point，就会觉得白过。</p>\n</li>\n<li><p>关于算法：龟速地刷着题。感觉现在的方式有些问题。我决定换成兔子的方式：看了题五分钟没思路一定要直接看答案。<br>周赛太费事调试的一定要换个题做。不能太呆板了，不然题都看不完。周赛完事后一定要复盘。</p>\n</li>\n</ul>\n<hr />\n\n<ul>\n<li>2021-07-03 运动会冠军 🏆，我也没想获得冠军，既然参加了那么认真对待呗。</li>\n</ul>\n<hr />\n\n<p><a href=\"https://www.zhihu.com/question/275351176/answer/437253983\" target=\"_blank\" rel=\"noopener\">我选择死亡</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"微前端相关知识","url":"http://jocolorful.com/2021/06/14/前端-微前端相关知识/","content":"<p>目前 <a href=\"https://qiankun.umijs.org/zh\" target=\"_blank\" rel=\"noopener\">qiankun</a> <a href=\"https://zhuanlan.zhihu.com/p/78362028\" target=\"_blank\" rel=\"noopener\">可能</a>是更好的微前端解决方案</p>\n<ol>\n<li><a href=\"https://juejin.cn/post/6844904162509979662\" target=\"_blank\" rel=\"noopener\">微前端-最容易看懂的微前端知识</a></li>\n</ol>\n<p>大应用涵盖子应用</p>\n<a id=\"more\"></a>\n\n<ol>\n<li>技术隔离、样式隔离</li>\n<li>基座配置</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"CSP","url":"http://jocolorful.com/2021/03/30/前端-CSP/","content":"<p>PM 要求将 iframe 里面的某个元素，对 window 进行定位。<br>主要解决思路：我参考了👉<a href=\"https://blog.csdn.net/hejiancsdn/article/details/80495333\" target=\"_blank\" rel=\"noopener\">解决 iframe 中 fixed 失效的问题</a>。</p>\n<a id=\"more\"></a>\n\n<p>这个过程主要分为两步：</p>\n<ol>\n<li>使该元素 fixed。并且计算出相对真实 window 的 marginTop 值</li>\n<li>监听 window 的滚动事件，滚动偏移量即是 fixed 的 top 值</li>\n</ol>\n<p>在实践的过程中，我主要遇到了以下问题</p>\n<h3 id=\"Q1-iframe-通信问题\"><a href=\"#Q1-iframe-通信问题\" class=\"headerlink\" title=\"Q1: iframe 通信问题\"></a>Q1: iframe 通信问题</h3><p>在本地开发模式中，由于a、b 两个项目，端口号不同，根据浏览器的同源策略，在 iframe 中监听上层 window 时报错如图下：</p>\n<h3 id=\"A1-解决方案\"><a href=\"#A1-解决方案\" class=\"headerlink\" title=\"A1: 解决方案\"></a>A1: 解决方案</h3><p>直接暴力启动一个允许跨域的浏览器，先保证开发正常进行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">open -n -a /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --args --user-data-dir=<span class=\"string\">\"/tmp/chrome_dev_test\"</span> --<span class=\"built_in\">disable</span>-web-security</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"深入-CSP\"><a href=\"#深入-CSP\" class=\"headerlink\" title=\"深入 CSP\"></a>深入 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP\" target=\"_blank\" rel=\"noopener\">CSP</a></h2><p>既然问题出现，那就再深入一点，多剖析一下 CSP 相关内容：</p>\n<p>Content Secure Policy：内容安全策略</p>\n<h3 id=\"如何使用：\"><a href=\"#如何使用：\" class=\"headerlink\" title=\"如何使用：\"></a>如何使用：</h3><ol>\n<li><p>通过添加 <code>Content-Security-Policy</code> 头部指定</p>\n</li>\n<li><p>通过 <code>meta</code> 标签来指定</p>\n</li>\n</ol>\n<h3 id=\"主要目标：\"><a href=\"#主要目标：\" class=\"headerlink\" title=\"主要目标：\"></a>主要目标：</h3><ol>\n<li>CSP 的主要目标是减少和报告 XSS 攻击 ，XSS 攻击利用了浏览器对于从服务器所获取的内容的信任。</li>\n<li>数据包嗅探攻击：除加载域以外，还可以限制协议。如：https</li>\n</ol>\n<h3 id=\"相关策略\"><a href=\"#相关策略\" class=\"headerlink\" title=\"相关策略\"></a>相关策略</h3><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/default-src\" target=\"_blank\" rel=\"noopener\">default-src</a>: 这个是为其他以下几个指令提供 fallback 机制</li>\n<li>img-src</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src\" target=\"_blank\" rel=\"noopener\">connect-src</a> a 标签、fetch、ajax</li>\n<li>frame-src</li>\n<li>mailto</li>\n<li>script-src</li>\n<li>style-src</li>\n</ul>\n<h3 id=\"上报机制\"><a href=\"#上报机制\" class=\"headerlink\" title=\"上报机制\"></a>上报机制</h3><p>通过 <code>report-uri</code> 进行一个 post 上报</p>\n<p>开源的 <a href=\"https://github.com/helmetjs/helmet/blob/042ee406c753c492a84d7c771010e38477f8c5cb/middlewares/content-security-policy/index.ts#L213\" target=\"_blank\" rel=\"noopener\">koa-hemlet</a>本质也就是设置 Content-Secuiry-Policy</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>CSP 只是作为一种为网站策略增强的一种手段。和 iframe 通信并没有什么联系。只是可以控制网站加载 iframe 的源。所以我应该还去了解并且动手实现跨域的情况下，如何实现 window 和 iframe 的通信。(答案是 postMessage)</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"About","url":"http://jocolorful.com/2021/03/02/about/","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"不耐烦的 JSer","url":"http://jocolorful.com/2021/03/02/前端-操作符篇-不耐烦的JSer/","content":"<h2 id=\"11-运算符\"><a href=\"#11-运算符\" class=\"headerlink\" title=\"11. 运算符\"></a>11. 运算符</h2><a id=\"more\"></a>\n\n<h3 id=\"11-1-运算符两个重要的规则\"><a href=\"#11-1-运算符两个重要的规则\" class=\"headerlink\" title=\"11.1. 运算符两个重要的规则\"></a>11.1. 运算符两个重要的规则</h3><pre><code>1. 强制让运算数变为合适的类型\n2. 大多数运算符只对原始类型有效</code></pre><h4 id=\"11-1-1-运算符两个重要的规则\"><a href=\"#11-1-1-运算符两个重要的规则\" class=\"headerlink\" title=\"11.1.1. 运算符两个重要的规则\"></a>11.1.1. 运算符两个重要的规则</h4><p>一个运算符操作的的数据类型不匹配， JS基本不会抛出异常。相反，它会自动进行强制类型转换。以便于这样看起来是<code>正常</code>运算的。让我们来看下面两个例子。</p>\n<p>首先，一个乘法运算只可以让两个数字正常工作，因此，在相乘之前，他会将字符转换成数字。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'7'</span> * <span class=\"string\">'3'</span></span><br><span class=\"line\"><span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n\n<p>其次， 用于访问对象属性的操作符[]只能处理字符串或者symbol。其他的值会被强制转换成字符串。其他的字都会转换成字符串。</p>\n<h4 id=\"11-1-2-大多数运算符只对原始类型起作用\"><a href=\"#11-1-2-大多数运算符只对原始类型起作用\" class=\"headerlink\" title=\"11.1.2. 大多数运算符只对原始类型起作用\"></a>11.1.2. 大多数运算符只对原始类型起作用</h4><blockquote>\n<p>对于JS操作符需要要记住的规则是：大多数运算符只对原始类型起作用</p>\n</blockquote>\n<p>如果运算数是<code>对象</code>，则经常会被强制转换成基本类型。</p>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>] + [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"string\">'1,2,34,5,6'</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么？因为 <code>+</code>操作符会首先将运算数转换成原始类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">String</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"string\">'1,2,3'</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">String</span>([<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\"><span class=\"string\">'4,5,6'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-2-加号plus\"><a href=\"#11-2-加号plus\" class=\"headerlink\" title=\"11.2. 加号plus\"></a>11.2. 加号plus</h3><p>在JS中，加号按以下方式工作：首先它会将运算数转换成基本类型，然后它会切到两种模式之一：</p>\n<ul>\n<li>字符串模式：如果一个被转换成的基本类型有一个是字符串，那么另外一个也会被转换成字符串，最后字符串会进行连接。</li>\n<li>数字模式：除此之外，两边的运算数会被转换成数字，然后进行相加。</li>\n</ul>\n<p>字符串模式可以让你使用<code>+</code>去连接字符串。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">'There are '</span> + <span class=\"number\">3</span> + <span class=\"string\">' items'</span></span><br><span class=\"line\"><span class=\"string\">'There are 3 items'</span></span><br></pre></td></tr></table></figure>\n\n<p>数字模式意味着如果。如果运算数两边都不是数字（或者一个对象变成了字符串）那么都会被变成数字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; 4 + true</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-3-赋值运算符\"><a href=\"#11-3-赋值运算符\" class=\"headerlink\" title=\"11.3. 赋值运算符\"></a>11.3. 赋值运算符</h3><h4 id=\"11-3-1-基本的赋值运算符\"><a href=\"#11-3-1-基本的赋值运算符\" class=\"headerlink\" title=\"11.3.1. 基本的赋值运算符\"></a>11.3.1. 基本的赋值运算符</h4><ul>\n<li><p>x = value</p>\n<p>  给一个声明的变量赋值</p>\n</li>\n<li><p>const x = value<br>  同时进行声明和复制</p>\n</li>\n<li><p>obj.propKey = value<br>  给一个属性赋值</p>\n</li>\n<li><p>arr[index] = value<br>  给数组的某个元素赋值</p>\n</li>\n</ul>\n<h4 id=\"11-3-2-复合赋值运算符\"><a href=\"#11-3-2-复合赋值运算符\" class=\"headerlink\" title=\"11.3.2. 复合赋值运算符\"></a>11.3.2. 复合赋值运算符</h4><p>给出的运算符工作时，以下两种方式是相同的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">myvar op= value</span><br><span class=\"line\">myvar = myvar op value</span><br></pre></td></tr></table></figure>\n\n<p>举例来说，复合<code>+</code>，然后我们可以得到运算符<code>+=</code>它会像下面的工作：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\">str += <span class=\"string\">'&lt;b&gt;'</span>;</span><br><span class=\"line\">str += <span class=\"string\">'Hello!'</span>;</span><br><span class=\"line\">str += <span class=\"string\">'&lt;/b&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">assert.equal(str, <span class=\"string\">'&lt;b&gt;Hello!&lt;/b&gt;'</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"11-3-3-所有可复合的运算符\"><a href=\"#11-3-3-所有可复合的运算符\" class=\"headerlink\" title=\"11.3.3. 所有可复合的运算符\"></a>11.3.3. 所有可复合的运算符</h4><p>数学运算：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">+= -= *= <span class=\"regexp\">/= %= **=</span></span><br></pre></td></tr></table></figure>\n\n<p>+= 同样对字符串连接有效</p>\n<p>按位运算符：</p>\n<h3 id=\"11-4-相等运算-VS\"><a href=\"#11-4-相等运算-VS\" class=\"headerlink\" title=\"11.4. 相等运算: == VS ===\"></a>11.4. 相等运算: == VS ===</h3><p>JS 有两种等号运算符:宽松相等(==)和严格相等(===)，推荐总是使用后者判断是否相等。</p>\n<h4 id=\"11-4-1-宽松相等-and\"><a href=\"#11-4-1-宽松相等-and\" class=\"headerlink\" title=\"11.4.1. 宽松相等(== and !=)\"></a>11.4.1. 宽松相等(== and !=)</h4><p>宽松相等是JS的特性之一。它经常会强制转换操作数，有些强制转换是起作用的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">'123'</span> == <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; <span class=\"literal\">false</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>大多数情况下意义不大：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"string\">''</span> == <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>对象被强制转换成基本类型。当且只当另外一个运算数是基本类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] == <span class=\"string\">'1,2,3'</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>] == <span class=\"string\">'1,2,3'</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>如果两个操作数都是对象，当他们是同一个对象时才相等：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] == [<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>]</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\">&gt; [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; <span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&gt; arr == arr</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，== 允许了undefined和null相等</p>\n<h4 id=\"11-4-2-严格相等-and\"><a href=\"#11-4-2-严格相等-and\" class=\"headerlink\" title=\"11.4.2. 严格相等 (=== and !==)\"></a>11.4.2. 严格相等 (=== and !==)</h4><p>严格相等从不会类型转换。两个相等的值一定会有相同的类型。让我们复习一遍之前的<code>==</code>运算符，然后看<code>===</code>是怎样工作的</p>\n<p>如果两个运算数都是对象，当他们是同一个对象时才相等：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; [1, 2, 3] &#x3D;&#x3D;&#x3D; &#39;1,2,3&#39;</span><br><span class=\"line\">false</span><br><span class=\"line\">&gt; [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;] &#x3D;&#x3D;&#x3D; &#39;1,2,3&#39;</span><br><span class=\"line\">false</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; [1, 2, 3] &#x3D;&#x3D;&#x3D; [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</span><br><span class=\"line\">false</span><br><span class=\"line\">&gt; [1, 2, 3] &#x3D;&#x3D;&#x3D; [1, 2, 3]</span><br><span class=\"line\">false</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; const arr &#x3D; [1, 2, 3];</span><br><span class=\"line\">&gt; arr &#x3D;&#x3D;&#x3D; arr</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n\n\n<p><code>===</code> 运算符不允许undefined和null相等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"literal\">undefined</span> === <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-4-3-推荐：总是使用严格模式\"><a href=\"#11-4-3-推荐：总是使用严格模式\" class=\"headerlink\" title=\"11.4.3. 推荐：总是使用严格模式\"></a>11.4.3. 推荐：总是使用严格模式</h4><p>推荐总是使用<code>===</code>。他会让你的代码可读性更高。把你从不得不思考怪异的<code>==</code>中解脱出来。<br>让我们看一下两个case：使用==的和我推荐的替代方案.</p>\n<h5 id=\"11-4-3-1-使用-比较一个数字和字符串\"><a href=\"#11-4-3-1-使用-比较一个数字和字符串\" class=\"headerlink\" title=\"11.4.3.1. 使用 ==:比较一个数字和字符串\"></a>11.4.3.1. 使用 ==:比较一个数字和字符串</h5><p>== 让你去判断一个值x是一个数字，或者作为字符串的数字，通过单个的比较：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x == <span class=\"number\">123</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// x is either 123 or '123'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我更喜欢以下两种替代方案：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x === <span class=\"number\">123</span> || x === <span class=\"string\">'123'</span>) ···</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>(x) === <span class=\"number\">123</span>) ···</span><br></pre></td></tr></table></figure>\n<p>你也可以在第一次遇见他的时候将它进行类型转换：</p>\n<h5 id=\"11-4-3-2-比较undefined-和-null\"><a href=\"#11-4-3-2-比较undefined-和-null\" class=\"headerlink\" title=\"11.4.3.2 ==: 比较undefined 和 null\"></a>11.4.3.2 ==: 比较undefined 和 null</h5><p>使用==的另外一个case是比较undefined 或 null</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// x is either null or undefined</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的问题在于，你无法保证是其他人也会用这种方式判断，或者有人有用meant === null的方式。</p>\n<p>我更喜欢一下两者任意替代方式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (x &#x3D;&#x3D;&#x3D; undefined || x &#x3D;&#x3D;&#x3D; null) ···</span><br><span class=\"line\">if (x) ···</span><br></pre></td></tr></table></figure>\n\n<p>第二种替代方式是相对更常见，但是塔毁坏了一些在JS中的一些模式。<br>在 <a href=\"http://exploringjs.com/impatient-js/ch_operators.html/ch_booleans.html#falsiness-truthiness\" target=\"_blank\" rel=\"noopener\">the chapter on booleans</a>会解释到, 我们会看到现象与本质。</p>\n<h3 id=\"11-5-排序运算\"><a href=\"#11-5-排序运算\" class=\"headerlink\" title=\"11.5. 排序运算\"></a>11.5. 排序运算</h3><p>Table 2: JavaScript’s ordering operators.</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n</tbody></table>\n<p>JS的比较运算符规则(tbl. <a href=\"http://exploringjs.com/impatient-js/ch_operators.html/#tbl:ordering_operators\" target=\"_blank\" rel=\"noopener\">2</a>) 对字符串和数字同样生效。</p>\n<p>警告：这些运算符在比较人类语言中的文本（大写、重音等）时效果不佳。有关详细信息，请参阅[字符串章节](<a href=\"http://exploringjs.com/unatint\" target=\"_blank\" rel=\"noopener\">http://exploringjs.com/unatint</a> js/ch_operators.html/ch_strings.html比较字符串)。</p>\n<h3 id=\"11-6-其他的运算符\"><a href=\"#11-6-其他的运算符\" class=\"headerlink\" title=\"11.6. 其他的运算符\"></a>11.6. 其他的运算符</h3><ul>\n<li><p><a href=\"http://speakingjs.com/es5/ch09.html#comma_operator\" target=\"_blank\" rel=\"noopener\">逗号运算符</a>: a, b</p>\n</li>\n<li><p><a href=\"http://speakingjs.com/es5/ch09.html#void_operator\" target=\"_blank\" rel=\"noopener\">void 运算符</a>: void 0</p>\n</li>\n</ul>\n<ul>\n<li>对于布尔，字符串，数组或对象在本书其他章节也有提到。</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"Babel","url":"http://jocolorful.com/2020/12/18/前端-babel/","content":"<p>最好的学习当然是从看官方文档，如果英文不行那就来份<a href=\"https://www.babeljs.cn/\" target=\"_blank\" rel=\"noopener\">中文文档</a>的 🤦‍♀️</p>\n<p>从官方文档来看，总共五个方面：指南、概览、用法、预设以及工具。</p>\n<h1 id=\"指南\"><a href=\"#指南\" class=\"headerlink\" title=\"指南\"></a>指南</h1><a id=\"more\"></a>\n\n<ol>\n<li>是什么：Babel 的作用是将「先进」的 ES 语法进行降级，编译成较低版本的浏览器能够识别的语法。</li>\n</ol>\n<h1 id=\"插件-amp-预设\"><a href=\"#插件-amp-预设\" class=\"headerlink\" title=\"插件 &amp; 预设\"></a>插件 &amp; 预设</h1><p>插件的作用就是 translate，预设的作用是启用一组插件</p>\n<h2 id=\"短名称\"><a href=\"#短名称\" class=\"headerlink\" title=\"短名称\"></a>短名称</h2><ol>\n<li><p>插件 babel-plugin- 可忽略<br> eg: babel-plugin-lodash 等同于 lodash</p>\n<p> 可适用冠名 @org/</p>\n</li>\n<li><p>预设 babel-preset- 可忽略<br> eg: babel-preset-myPreset 等同于 myPreset</p>\n<p> 可适用冠名 @org/</p>\n</li>\n</ol>\n<p>##. 顺序<br>2. 插件顺序：从左往右</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [<span class=\"string\">\"transform-decorators-legacy\"</span>, <span class=\"string\">\"transform-class-properties\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>预设顺序：从右往左</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AttachMent\"><a href=\"#AttachMent\" class=\"headerlink\" title=\"AttachMent\"></a>AttachMent</h2><h3 id=\"Polyfills-可按需引入\"><a href=\"#Polyfills-可按需引入\" class=\"headerlink\" title=\"Polyfills 可按需引入\"></a>Polyfills 可按需引入</h3><p><a href=\"https://betgar.github.io/2019/07/30/babel6-loose-mode/\" target=\"_blank\" rel=\"noopener\">loose 参数</a></p>\n<p>即松散模式：转换为简单的 ES5 实现。<br>而严格模式：转换时尽可能遵循、接近 ES6 语义。</p>\n<p>可全局配置添加预设，也可给每个 plugin 设置参数</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"进击的 NPM","url":"http://jocolorful.com/2020/12/10/Node.js-进击的-NPM/","content":"<h1 id=\"NPM2\"><a href=\"#NPM2\" class=\"headerlink\" title=\"NPM2\"></a>NPM2</h1><p>优点：完整的依赖拓扑图<br>缺点：很暴力，重复依赖</p>\n<a id=\"more\"></a>\n\n<h1 id=\"NPM3\"><a href=\"#NPM3\" class=\"headerlink\" title=\"NPM3\"></a>NPM3</h1><p>公共依赖提升，但是由于下载顺序问题，最极端情况下还是 npm2，并不能完全解决依赖重复</p>\n<h1 id=\"NPM4\"><a href=\"#NPM4\" class=\"headerlink\" title=\"NPM4\"></a>NPM4</h1><p>npm-shrinkwrap.json 被认为是完整的安装清单，但是 npm2 就有 npm-shrinkwrap.json</p>\n<h1 id=\"NPM5\"><a href=\"#NPM5\" class=\"headerlink\" title=\"NPM5\"></a>NPM5</h1><h2 id=\"lockfile\"><a href=\"#lockfile\" class=\"headerlink\" title=\"lockfile\"></a>lockfile</h2><table style=\"width:100%\">\n  <tr>\n    <th width=\"500px\">npm@5 以前：npm-shrinkwrap.json</th>\n    <th width=\"500px\">npm@5 以后：package-lock.json</th>\n  </tr>\n  <tr>\n    <td>发布包时如果有锁定需求，可用 npm shrinkwrap 命令把 package-lock.json 转为 npm-shrinkwrap.json 随包发布（向下兼容）</td>\n    <td>开发时提交和使用，来保证不同环境、人员安装依赖的一致性。</td>\n  </tr>\n</table>\n\n<h2 id=\"cache-优化\"><a href=\"#cache-优化\" class=\"headerlink\" title=\"cache 优化\"></a>cache 优化</h2><table style=\"width:100%\">\n  <tr>\n    <th></th>\n    <th width=\"500px\">npm@5 以前</th>\n    <th width=\"500px\">npm@5 以后</th>\n  </tr>\n  <tr>\n    <th width=\"120px\">缓存路径</td>\n    <td>~/.npm 文件夹中以模块名的形式直接存储 <br/>eg: koa 模块存储在 ~/.npm/koa </td>\n    <td>路径存放在 ~/.npm/_cacache</td>\n  </tr>\n  <tr>\n    <th width=\"120px\">缓存管理</td>\n    <td></td>\n    <td>由系统统一管理，数据发生错误就会重新获取，除非需要释放磁盘空间。需要 --force 参数</td>\n  </tr>\n</table>\n\n<h2 id=\"文件下载优化\"><a href=\"#文件下载优化\" class=\"headerlink\" title=\"文件下载优化\"></a>文件下载优化</h2><p>如果将本地目录作为依赖来安装</p>\n<p>npm@5 before：将会把文件目录作为「副本拷贝」到 node_modules 中。</p>\n<p>npm@5 after： symlinks 的方式来实现（使用本地 tarball 包除外），而不再执行文件拷贝。这将会提升安装速度：</p>\n<ol start=\"2\">\n<li>安装耗时打印</li>\n<li>新的 [package-lock.json] 文件锁</li>\n<li>发包模块不包含 lock 文件</li>\n<li>install 时默认 –save，除非使用 –no-save</li>\n</ol>\n<h2 id=\"npx\"><a href=\"#npx\" class=\"headerlink\" title=\"npx\"></a>npx</h2><p>npx 一个随着 npm 5.2.0 发布的命令，会帮你执行依赖包里的二进制文件。比如对于没有全局安装的命令你想执行的话就只能 ./node_modules/.bin/webpack -v，有 npx 之后就可以直接使用 npx webpack -v。</p>\n<h1 id=\"NPM6\"><a href=\"#NPM6\" class=\"headerlink\" title=\"NPM6\"></a>NPM6</h1><p>解决安全相关问题</p>\n<p>npm audit：这个命令本地试过，但是貌似已经没撒用了 🤔</p>\n<h1 id=\"NPM7\"><a href=\"#NPM7\" class=\"headerlink\" title=\"NPM7\"></a>NPM7</h1><ol>\n<li>npm workspace</li>\n<li>自动安装 「对等依赖」（有些意思 🤔）</li>\n<li>lock 文件格式向 yarn 看齐</li>\n</ol>\n<h2 id=\"breaking-Changes\"><a href=\"#breaking-Changes\" class=\"headerlink\" title=\"breaking Changes\"></a>breaking Changes</h2><ol>\n<li>npx 被「npm exec」重写</li>\n</ol>\n<p>相关文章</p>\n<p><a href=\"https://github.com/Kimi-Gao/Program-Blog/issues/112\" target=\"_blank\" rel=\"noopener\">npm@5 新特性使用指南</a><br><a href=\"https://medium.com/npm-inc/announcing-npm-6-5d0b1799a905\" target=\"_blank\" rel=\"noopener\">Announcing npm@6</a><br><a href=\"https://blog.npmjs.org/post/173239798780/beyond-npm6-the-future-of-the-npm-cli\" target=\"_blank\" rel=\"noopener\">npm blog V6</a><br><a href=\"https://blog.npmjs.org/post/626173315965468672/npm-v7-series-beta-release-and-semver-major\" target=\"_blank\" rel=\"noopener\">npm blog V7</a><br><a href=\"https://www.youtube.com/watch?v=7gFaBjY7fHs\" target=\"_blank\" rel=\"noopener\">Youtube: V7 Released</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["Node.js"],"tags":[]},{"title":"Pause","url":"http://jocolorful.com/2020/12/09/生活-Pause/","content":"<p>时间似乎按下了暂停键，快到年底了。</p>\n<p>我在 new 这篇文章的时候收到了两封邮件，一封是来自我的产品 zhaojin 的产品 RFC 邮件提示，另外一封是 老张的。</p>\n<p>前几天 zhaojin 在群里问什么是内卷，他已经开始要走傻白甜的路线了么？</p>\n<a id=\"more\"></a>\n\n<ol>\n<li>去厦门玩耍了一趟</li>\n<li>隔壁室友搬家，我大概再也不想见到那对情侣了，新室友很好至少不做饭，不会把厨房弄得乱糟糟的。公共的区域给我保留了放鞋的地方。冰箱也不会有臭臭的味道，毕竟他们跟我一样没什么东西。</li>\n</ol>\n<p>我似乎长胖了一点，不过也是好事，太干巴巴也不好看。</p>\n<p>奥，我的 OKR 似乎有了一点点新的进展，姑且评估为 30%，写的时候真的挺痛苦，没撒帮手，小群内的人几乎不说话。我和 lvbin 私聊的时候说了进展然后说接下来的打算，问他可不可以来搭把手，他很爽快地答应了，然后还说「We are a team ！」这种话简直太令人喜欢了，周会上还说似乎很久没见着我的样子。</p>\n<p>另外我的批量上传其实成功了，但是产品方案实际上变了，我几乎花了一周空闲的时间研究阿里云的 OSS SDK。也没觉得彭 🐱 封装的「中间层」好用，反而觉得是累赘。🐱 喜欢过度封装。但是事实上他的思路很好，很多都是我想不到的。机智的 🐱🐱。</p>\n<p>我还给企业微信群添加了机器人，执行定时任务给大家讲笑话撒的，我似乎对这种大家都觉得无趣的事情充满了热情，明明就很有趣啊！</p>\n<p>所以这个月除了出去玩，我还是学到了不少东西。</p>\n<ol>\n<li>批量上传 + 断点续传</li>\n<li>爬虫 + 定时任务</li>\n</ol>\n<p>发哥对侯老师说的 npm 管理似乎有些误解，但是我没有找到相关的文章，所以我应该花个时间研究一下 npm 的 CHANGELOG。果真给自己积 TODO 还是有用。工作的第三年开始了，加油了喂！</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"PPT 准备与演讲技巧","url":"http://jocolorful.com/2020/10/29/软技能-准备与演讲技巧/","content":"<blockquote>\n<p>这周给老板们做了「无头浏览器」相关的分享，我终于可以放心写代码了！</p>\n</blockquote>\n<a id=\"more\"></a>\n<center>\n    <img src=\"/images/talk.png\"  width=\"400px\" />\n</center>\n\n<p>演讲是否足够精彩，我想观众们的掌声已经给了答案。在这之前，我做过的分享都是自己准备，这个准备的过程，侯老师帮我 review 了很多，从准备到演讲这个过程都是收获满满。</p>\n<p>我记录这些希望除了在分享以外我能够收获学习到更多。</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>PPT 是 Talk 中最重要的一个环节之一。特别是对于技术分享来说，你的观众可能不会在意你的长相穿着，但是你的 PPT 却尤为重要。做好 PPT 的演讲主要有以下几个方面：</p>\n<ol>\n<li>主题确定</li>\n<li>围绕主题，梳理大纲内容</li>\n<li>从大纲出发，进行发散</li>\n<li>演讲的总结</li>\n</ol>\n<h1 id=\"主题的确定\"><a href=\"#主题的确定\" class=\"headerlink\" title=\"主题的确定\"></a>主题的确定</h1><p>侯老师让我剖析「posterMan」。这其实是 Node 很小的一个应用。本质是利用了 puppter 的无头浏览器技术来实现一个截图的功能。当遇见一个新鲜的事物时总是能学到许多有意思的事情👇：</p>\n<p>这分析这个工程的代码时，我先把他跑起来。在通过    package.json 分析相关依赖并剖析依赖的作用。这个过程我把有疑问的点全部记录了下来并且逐一分析。</p>\n<p>这样大致下来就能知道</p>\n<p>其中我发现了「Puppter」以及 「gerneric pool」这俩重点包。</p>\n<ol>\n<li><p>「纵向挖掘」，作为一个不造轮子的好开发：可以用来做什么 &gt;&gt; 实现原理</p>\n</li>\n<li><p>「横向对比」：前端同样可以截屏，和前端截屏的对比，以及各方优势</p>\n</li>\n</ol>\n<h1 id=\"大纲确定\"><a href=\"#大纲确定\" class=\"headerlink\" title=\"大纲确定\"></a>大纲确定</h1><ol>\n<li>自我介绍</li>\n<li>演讲目录介绍</li>\n<li>内容（横向与纵向对比内容）</li>\n<li>未来及展望</li>\n<li>演讲总结</li>\n</ol>\n<h1 id=\"演讲的幽默\"><a href=\"#演讲的幽默\" class=\"headerlink\" title=\"演讲的幽默\"></a>演讲的幽默</h1><p>大概就是多打打比方，写写比喻句～</p>\n<h1 id=\"重复练习\"><a href=\"#重复练习\" class=\"headerlink\" title=\"重复练习\"></a>重复练习</h1><p>不要觉得自己准备的过程已经熟悉了内容，真实的演讲需要用「口述」和预想的差异会很大。所以需要注意多练习几次，其中包括 PPT 的内容完整性，衔接流畅。只有对内容做到了熟悉这样在演讲的过程才不会紧张。</p>\n<p>AnyWay，演讲还是多找找有经验的人帮忙多多 review。自己也要多准备多思考～</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":["软技能"]},{"title":"做一颗饱满的麦穗","url":"http://jocolorful.com/2020/10/22/生活-做一颗饱满的麦穗/","content":"<p>今天是农历九月初九。(所以待会儿一定要给爸爸妈妈打电话！)</p>\n<p>先将思绪简单整理下吧。可爱的人啊，开心烦恼的事啊，靡间生长繁而茂盛。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h1><p>这周和侯老师 one on one。今年的工作也算是得到了侯老师的认可，其实我自己本身对技术不太自信，我自己不太喜欢研究太过底层的东西（因为我知道我学了就忘）。今年年初交付团队的时候只有三个前端，我使劲儿把从章辰、雨豪身上学到的东西给用上了。（我在 Qunar 都学撒了？🤦‍♀️）那段时间 CRM 没有用户，可劲儿裸奔不断提代码的感觉真的挺爽。我跟侯老师说想要做没有做过的需求。他问我什么是没有做过的呢，C端？我说能够使我自我怀疑，我到底能不能做好的需求。后来我思考了一下，觉得自己有些幼稚。毕竟自己是个「打工人」，公司都是以结果为导向，我为自己这个想法感到些许的羞愧…</p>\n<p>然后第二件事是自测不足。哎，我实在不喜欢做自测。一股脑儿把代码合了，要命。一定要改改改！！</p>\n<p>侯老师突然让我准备分享。是关于 puppter 的。在我印象中做过几次分享</p>\n<ol>\n<li>koa 的爬虫 @36kr</li>\n<li>http 协议 @Qunar</li>\n<li>CSS 的六种命名 @Qunar</li>\n<li>基于 Webpack 分装 FFP 插件的解决思路 @zhihu</li>\n</ol>\n<p>没有很好的口才以及天赋，思维还特别跳跃。那就只能好好准备了，有时候我思考一个问题能联想特别多的东西，脱口而出别人就会一脸懵逼… …</p>\n<p>看来下次可以写写「技术分享」的经验以及总结，即便我的分享经验很少。</p>\n<p>这次主题是「Headless」在大前端的应用。我的观众是技术 leader ，所以我的周末没了… … 侯老师对我的帮助真的很大，无论从 PPT 知乎三巨头格，结构内容以及讲解的高度都有一个质的提升。虽然我在知乎的日子真的很舒服。但我收获了以前两年工作经历都换不到的宝贵财富。算一算，第四个年头就要开启了，莫等闲以及感恩珍惜。</p>\n<h2 id=\"不要高估自己的执行力\"><a href=\"#不要高估自己的执行力\" class=\"headerlink\" title=\"不要高估自己的执行力\"></a>不要高估自己的执行力</h2><p>我以为周末可以至少一天去学画画，另外一天可以准备 PPT 顺便看牙。</p>\n<p>真实的周末是花了一天改 bug（恰好 1024 那天，有趣）一天准备 PPT。改 bug 的时间把衣服都洗了，被子也晒了（Mark 一下最好的晒被子时间是 11 点 ～ 14 点）。希望晚上能够睡一个好觉。</p>\n<p>不过我还是一直在拖延，比如我的 👙 还没洗，🦷 也没看… 说好要把公司的组件整理到至少 50%。我就整理了五个，害…真的是没有技术含量的工作啊，难受。</p>\n<p>来日并不方长 …</p>\n<h1 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h1><p>遇见了可爱的人，翼巧的表妹来我们公司实习。不过她可能不会在北京呆很久。1023 的夜晚她陪我去逛街买格子衫，我说过节要有仪式感，可能至 16 年以来就没有女生陪我逛街了。本来是她陪我，但是她自己逛得好开心，虽然我不咋喜欢商场里的东西并且还让我帮她抱衣服，被人使唤的感觉还是可以的。至少觉得自己是被需要的。</p>\n<p>跟老公吵架了 … 虽然不是那种大声嚷嚷地吵架，这种矛盾更加可怕吧。台湾人的想法和大陆的真的不太一致吗？好像他们更加烂漫些，然鹅我现在已经快活生生变成一个物质的人了。谁不是在现实的毒打中过生活呢？</p>\n<p>夜色逐渐降临，我闭了下眼睛：摩托车，汽车的鸣笛。窗外有小孩的尖叫。我得去洗衣服了。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"无头浏览器在前端的应用场景","url":"http://jocolorful.com/2020/10/21/Node-无头浏览器在前端的应用场景/","content":"<blockquote>\n<p>无头浏览器 from wikipedia： A headless browser is a web browser without a graphical user interface。无头实际上是指无界面地运行浏览器<br>我们在终端或者代码层，使用无头浏览器的技术来可以模拟用户在网页端的浏览及操作。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"一、无头浏览器的相关应用\"><a href=\"#一、无头浏览器的相关应用\" class=\"headerlink\" title=\"一、无头浏览器的相关应用\"></a>一、无头浏览器的相关应用</h1><ol>\n<li>E2E 测试：无需打开UI界面，即可完成对应的测试内容。模拟表单提交，键盘输入，点击等行为</li>\n<li>网络爬虫 、SSR 服务端渲染</li>\n<li>网页截图生成海报或  PDF</li>\n<li>捕获网站时间线，帮助诊断性能问题（Lighthouse 就是使用了无头浏览器的技术的性能测量工具，他可生成各种性能数据以及网页加载时的快照，以辅助前端做一些性能优化</li>\n</ol>\n<p>以上，无头浏览器的作用非常强大；今天就以 posterMan 这个比较简单但是很有代表性的服务，来讲一下在前端的具体应用。</p>\n<h1 id=\"二、posterMan-简介\"><a href=\"#二、posterMan-简介\" class=\"headerlink\" title=\"二、posterMan 简介\"></a>二、posterMan 简介</h1><p>类似于网抑云音乐，知乎的划线笔记。用户在截屏时可以生成封面海报。</p>\n<center><img src=\"/images/poster.jpg\" width=\"320px\" /></center>\n\n<p>posterMan 是一个 Node 服务。当我们提供一个 url 链接给到 posterMan 时，即可生成相应的封面截图。</p>\n<h2 id=\"2-1-海报生成链路\"><a href=\"#2-1-海报生成链路\" class=\"headerlink\" title=\"2.1 海报生成链路\"></a>2.1 海报生成链路</h2><center><img src=\"/images/link.png\" width=\"640px\" /></center>\n\n<h2 id=\"2-2-Puppteer-相关介绍\"><a href=\"#2-2-Puppteer-相关介绍\" class=\"headerlink\" title=\"2.2 Puppteer 相关介绍\"></a>2.2 Puppteer 相关介绍</h2><blockquote>\n<p>译：木偶；基于 CDP（Chrome devtools-protocol） 封装的 Node 库</p>\n</blockquote>\n<p>原理:</p>\n<ol>\n<li>基于 WebSocket，利用 WebSocket 实现与浏览器内核的快速数据通道；</li>\n<li>CDP 分为多个域，每个域中都定义了相关的命令和事件（Commands and Events）；</li>\n<li>基于 CDP 封装一些工具对 Chrome 浏览器进行调试及分析。</li>\n</ol>\n<h2 id=\"2-3-Puppeteer-VS-Phantomjs\"><a href=\"#2-3-Puppeteer-VS-Phantomjs\" class=\"headerlink\" title=\"2.3 Puppeteer VS Phantomjs\"></a>2.3 Puppeteer VS Phantomjs</h2><table style=\"width:100%\">\n  <tr>\n    <th></th>\n    <th>puppeteer</th>\n    <th>phantomjs</th>\n  </tr>\n  <tr>\n    <td>环境依赖</td>\n    <td>依赖 Node</td>\n    <td>Linux: GLIBCXX_3.4.9 和 GLIBC_2.7</td>\n  </tr>\n  <tr>\n    <td>更新进度</td>\n    <td>持续更新（V1.8）</td>\n    <td>停止更新（V2.1）</td>\n  </tr>\n  <tr>\n    <td>JavaScript 标准</td>\n    <td>新的ES 标准</td>\n    <td>ES5</td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">整体优点</td>\n    <td>持续更新，功能性能可期</td>\n    <td>部署快捷方便，基本上达到了开箱即用</td>\n  </tr>\n  <tr>\n    <td>使用新ES标准，对异步事件处理更简便</td>\n    <td>脚本语言更适合原生开发，学习成本低</td>\n  </tr>\n  <tr>\n    <td>支持chrome插件</td>\n    <td></td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">整体缺点</td>\n    <td>部署相对复杂，且需要翻墙</td>\n    <td>已经停更</td>\n  </tr>\n  <tr>\n    <td>Java 端调用仍需使用 CMD 和 Shell 调用，Node 端可直接使用</td>\n    <td>只能通过 CMD 和 Shell 调用</td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>开放的 api 较少, 且调试过程复杂</td>\n  </tr>\n</table>\n\n<h2 id=\"2-4-Puppeteer-模拟用户操作\"><a href=\"#2-4-Puppeteer-模拟用户操作\" class=\"headerlink\" title=\"2.4 Puppeteer 模拟用户操作\"></a>2.4 Puppeteer 模拟用户操作</h2><center><img src=\"/images/op.png\" width=\"640px\" /></center>\n\n<h2 id=\"2-5-链接池-Generic-pool\"><a href=\"#2-5-链接池-Generic-pool\" class=\"headerlink\" title=\"2.5 链接池 Generic pool\"></a>2.5 链接池 Generic pool</h2><p>当用户访问调用 posterMan 时，就会创建一个 Puppteer 的实例子，但是当我们的服务访问量巨大的时候，频繁的创建和销毁连接会产生非常大的系统开销。这个时候，链接池 Generic pool 就隆重登场了。</p>\n<h3 id=\"2-5-1-线程池-合理配置\"><a href=\"#2-5-1-线程池-合理配置\" class=\"headerlink\" title=\"2.5.1 线程池-合理配置\"></a>2.5.1 线程池-合理配置</h3><center><img src=\"/images/pool.png\" width=\"300px\" /></center>\n\n<ol>\n<li>合理设置连接池数；posterMan 阈值（min：2；Max：10）;</li>\n<li>尽可能利用缓存，减少对数据库的查询；</li>\n<li>使用完一个数据库连接后，尽快释放给管理池。</li>\n</ol>\n<h1 id=\"三、纯前端实现\"><a href=\"#三、纯前端实现\" class=\"headerlink\" title=\"三、纯前端实现\"></a>三、纯前端实现</h1><h2 id=\"3-1-利用CanvasAPI-（html2Canvas）\"><a href=\"#3-1-利用CanvasAPI-（html2Canvas）\" class=\"headerlink\" title=\"3.1 利用CanvasAPI （html2Canvas）\"></a>3.1 利用CanvasAPI （html2Canvas）</h2><ol>\n<li>递归取出目标模版的所有 DOM 节点，填充到一个 rederList，并附加是否为顶层元素/包含内容的容器 等信息</li>\n<li>通过 z-index postion float等css属性和元素的层级信息将 rederList 排序，计算出一个 canvas 的 renderQueue</li>\n<li>遍历 renderQueue，将 css 样式转为 setFillStyle 可识别的参数，依据 nodeType 调用相对应 canvas 方法，如文本则调用 fillText，图片 drawImage，设置背景色的 div 调用 fillRect 等</li>\n<li>将画好的canvas填充进页面</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>无法渲染跨域资源(支持同域)</li>\n<li>无法渲染 iframe和 Flash 内容</li>\n<li>大量的递归和计算会非常缓慢</li>\n</ol>\n<h2 id=\"3-2-SVG\"><a href=\"#3-2-SVG\" class=\"headerlink\" title=\"3.2 SVG\"></a>3.2 SVG</h2><ol>\n<li>首先，我们要声明一个基础的svg模版，这个模版需要一些基础的描述信息，最重要的，它要有<foreignObject></foreignObject>这对标签</li>\n<li>将要渲染的 DOM 模版模版嵌入 foreignObject</li>\n<li>利用 Blob 构建 SVG 图像</li>\n<li>取出 URL</li>\n</ol>\n<p>一个最为严肃的问题在于：SVG 无法加载外部资源，也就是说，在 SVG 里面，无论是还是 或者 CSS 中的背景图, 这些资源都是无法加载的。在使用 canvas 实现时，因为我们使用 Node 去绘制，所以不存在资源引用的问题。但使用 SVG  实现，相当于我们把文档交给 SVG 再来渲染，这对于我们来说是其实是无法控制的黑盒操作，是受 SVG 限制的。</p>\n<center>\n    <img src=\"/images/diff.png\" width=\"700px\" />\n</center>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["Node.js"],"tags":[]},{"title":"一件悲伤的事","url":"http://jocolorful.com/2020/09/28/生活-一件悲伤的事/","content":"<p>有一个梦我做了很多遍：就是牙齿蛀掉了一拔就拔出来了，没有一点疼痛，然后我就把所有的牙都拔光了。梦醒之后我甚至在网上搜了「梦见自己蛀牙意味着什么」，周公解梦大多都是负面消极的解答。</p>\n<p>这个梦真的不止一次出现了，这大概是驱使我认真刷牙的动力。即便不是这个梦的意味带来的影响，为了吃饭倍棒我也要好好刷牙。</p>\n<p>可是现实中的这一天还是来了，没有一丝丝防备 😫</p>\n<a id=\"more\"></a>\n\n<p>大牙旁边的那颗牙齿，以前从外面看就不太健康，不是一般牙齿通透的白，能够很明显感受到里面黑乎乎的存在。以前问医生说是黑色素的沉淀。</p>\n<p>忧患最终还是变成了现实，今天它崩了，几乎有四分之一都没了漏出了狰狞的黑洞🧎‍♀️。我想里面健康完整的部分可能不剩可怜的一半。</p>\n<p>在大陆补牙实在太贵，如果在台湾有健保的话可能不到十元 RMB 就能补好牙齿。不过幸好今天它崩了，因为以他蛀虫的趋势，里面变得更大再崩可能就没有机会补了。</p>\n<center>\n--------------------------------- 2020.10.07---------------------------------</center>\n\n<p>该来的还是来了，10.01 拍了牙片，我要做根管治疗了（回家我把嘴张给爸爸看，确实要做治疗了）。7 号回北京医生说我的洞蛀得太大需要打桩。oh my baby father！我… … 其实我爸是牙医，对于牙科材料的成本我爸是最清楚的（除了肉痛还有羞耻，作为牙医的女儿，不爱护好牙齿，牙齿还需要其他人来做，我… …）补吧，第一次麻药让我第二天睡到了十点，没有想象中的那么恐怖。值得欣慰的是，医生说我的其他牙齿都很健康。</p>\n<p>奥，回家的时候看了老家的房子，7k+，可惜时间太短前期功课做得也很不充分就不了了之，不过家里的环境真的要比帝都好太多，爸爸看到我去看房了非常开心，不过和以前回家不同的是，他们都会催我快点回去工作，这次居然没催我，反而让我好好呆在北京 🤔 我不想成为一个不稳定因素，即使我的心是向往自由。只有在一个地方稳定持续的发展才是对自己的人生有利的吧。可是我又挺想回去了，带着我的百万宝宝。孤独感都是从回家到机场，下地铁到出租屋这段路上，工作的时间会冲淡这种感觉。回到北京的出租屋里，金百万正在睡觉。她并没有我想象中的那么想我, 过了好一阵子才表现出亲昵。</p>\n<p>假期我给炉石组了新的卡组，感觉用得还挺顺手的，能够冲到黄金 8 了, 之前都是白银3、4徘徊 😂，我居然象小学生一样沉迷网游了, hhhhh</p>\n<p>自己感兴趣的东西也挺多，不过确实也得精简下注意力了。</p>\n<p>「想做的梦从不怕别人看见」</p>\n<p>自己搞的 weekly 还挺有用，至少会在工作上提醒我下一周应该做哪些工作。我是不是改搞一个生活 weekly，interesting。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"关于疯狂输出与摸 🐟","url":"http://jocolorful.com/2020/09/27/生活-关于疯狂输出与摸🐟/","content":"<p>最近自己搞了一个 weekly，每周五的时候自己总结本周的输出以及下周 todo，放在自己空间下还挺有成就感的。不过以后带不走就很尴尬。</p>\n<a id=\"more\"></a>\n\n<p>参加了 HR 的画画活动，希望能拿到两份小奖品，嘻嘻。</p>\n<p>北漂看山带着月饼踏上了回家之路，TA 要回去看亲爱的爸爸妈妈</p>\n<center><img src=\"/images/kanshan-moon.jpg\" width=\"350px\" /></center>\n\n<p>两只兔子遥望地球许下了心愿，希望她们的愿望能够成真。</p>\n<center><img src=\"/images/moon.jpg\"  width=\"500px\" /></center>\n\n<p>33th 🌟 是要吃一次螺蛳粉，打开外卖盖子那一刻臭味迎面扑来，我毫不犹豫地说了句「WOC」。我很怀疑自己能吃得下去并且开始有些佩服吃螺蛳粉的人。赶紧把汤汁倒进粉里，臭味压下去了一些。然后开始搅拌起来，鼻子逐渐接受了这个味道。捞起来尝了一根很不错。嗨，想念铜梁的手工酸辣粉了。忍不住对比起来，各有特色，不过辣劲还是老家的给劲儿。北京的变态辣对我来说都是变态咸或者变态油。</p>\n<p>这个月我爸买了新车 🚗。本来打算一起陪他去看的，但是他前一天说「我明天要去买车了」，结果第二天他就把车开回了家（这就是我爸雷厉风行，一次性全款毫不心疼）。新车是五座的，我得好好让他规划一下国庆带我们去哪里玩。（我还是自己规划好了，我估计他会把大把时间花在麻将桌上……</p>\n<p>30 号的高铁回重庆，有些期待 🐶</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"Redis 那些事","url":"http://jocolorful.com/2020/09/06/后端-Redis那些事/","content":"<blockquote>\n<p>纸上得来终觉浅，绝知此事要躬行</p>\n</blockquote>\n<p>2008 年，一家意大利创业公司嫌弃 MySQL 的性能，所以就自己搞了套数据库：Redis。这个个人开发的数据库究竟有哪些特性吸引着开发者？我将一一研读探秘：</p>\n<a id=\"more\"></a>\n\n<h1 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h1><h2 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h2><p>Redis 的全称是 Remote Dictionary Server（远程字典服务器）</p>\n<p>Redis 的键值除了是字符串还可以是其他数据类型：</p>\n<ol>\n<li>字符串</li>\n<li>散列</li>\n<li>列表</li>\n<li>集合</li>\n<li>有序集合</li>\n</ol>\n<h2 id=\"内容存储与持久化\"><a href=\"#内容存储与持久化\" class=\"headerlink\" title=\"内容存储与持久化\"></a>内容存储与持久化</h2><p>所有的数据都存储在内存中，内存的读写速度快于硬盘，一秒内可读写超过十万个键值。</p>\n<h2 id=\"功能丰富\"><a href=\"#功能丰富\" class=\"headerlink\" title=\"功能丰富\"></a>功能丰富</h2><p>键值的 TTL 、单线程模型、可实现队列</p>\n<h2 id=\"简单稳定\"><a href=\"#简单稳定\" class=\"headerlink\" title=\"简单稳定\"></a>简单稳定</h2><h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><h2 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h2><p>字符串类型是 Redis 中最基本的类型，它能存储任何形式的字符串，包括二进制数据。是其他 4 种数据类型的基础，一个字符串类型键最大哦的容量是 512 MB。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET key value</span><br><span class=\"line\">GET key</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"散列类型\"><a href=\"#散列类型\" class=\"headerlink\" title=\"散列类型\"></a>散列类型</h2><p>散列即 hash，其存储了字段 field 和 字段值的映射，「但字段值只能是字符串」，不支持其他数据类型。所以散列类型不能嵌套其他数据类型。</p>\n<img src=\"/images/hash.png\"  width=\"500px\"/>\n\n<p>命名规范一般遵守：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">key: 对象类型:id</span><br><span class=\"line\">field: 属性</span><br><span class=\"line\">value: 字段值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">HSET key field value</span><br><span class=\"line\">HGET key field</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"列表类型\"><a href=\"#列表类型\" class=\"headerlink\" title=\"列表类型\"></a>列表类型</h2><p>Redis 列表类型内部使用双向链表（double linked list）实现，越接近两端速度越快，常用操作是两列表两端添加元素，或者获取列表片段。列表类型适合用来记录日志或者网站新鲜事。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">LPUSH key value or RPUSH key value</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集合类型\"><a href=\"#集合类型\" class=\"headerlink\" title=\"集合类型\"></a>集合类型</h2><p>集合：不保证顺序、唯一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">SADD key member</span><br><span class=\"line\">SREM key member</span><br></pre></td></tr></table></figure>\n<h2 id=\"有序集合\"><a href=\"#有序集合\" class=\"headerlink\" title=\"有序集合\"></a>有序集合</h2><ol>\n<li>内部是通过散列表和跳跃表实现的，所以即使读取中间的数据速度也很快（O(log(N))）</li>\n<li>列表对于位置的调整不太方便，但有序集合可以（更改元素分数即可）</li>\n<li>有序集合更消耗内存</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZADD key score memeber</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型对比\"><a href=\"#类型对比\" class=\"headerlink\" title=\"类型对比\"></a>类型对比</h2><table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">使用场景</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">string</td>\n<td align=\"left\">用于存储普通数据，int，string等等类型的基本类型数据</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">hash</td>\n<td align=\"left\">通常用于存储数据对象类型</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">list</td>\n<td align=\"left\">用于存储一些有序列表</td>\n<td align=\"left\">双端操作较快，适用于日志、 可实现队列（其实我也没实践过，哭</td>\n</tr>\n<tr>\n<td align=\"left\">set</td>\n<td align=\"left\">无序集合</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">sort set</td>\n<td align=\"left\">有序集合</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>有些关于 Redis Key 命名的设计规范，我借鉴了 <a href=\"https://www.infoq.cn/article/lxpytc3KckJPi72E8L3P\" target=\"_blank\" rel=\"noopener\">Redis 开发设计规范及案例分析</a> 做了以下总结，并且在实际场景中有所运用</p>\n<ol>\n<li>可读性： 以业务名为前缀，用冒号分隔，可使用业务名：子业务名：id 的结构命名，子业务下多单词可再用下划线分隔。</li>\n<li>简洁性：这里需要控制 key 的长度，key 的占用内存不容忽视。</li>\n<li>不包含转义：不包含空格、换行、单双引号以及其他转义字符。</li>\n</ol>\n<h1 id=\"一些高级用法\"><a href=\"#一些高级用法\" class=\"headerlink\" title=\"一些高级用法\"></a>一些高级用法</h1><h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>事务是「一组命令」的集合：要么执行，要么都不执行。只有所有的命令都执行完成才能得到每个结果的返回值。</p>\n<h3 id=\"事务的错误：\"><a href=\"#事务的错误：\" class=\"headerlink\" title=\"事务的错误：\"></a>事务的错误：</h3><ol>\n<li>语法错误：只要有一个错误就会不会执行。</li>\n<li>运行错误：如果某条命令错误，那么其他命令会继续执行。（Redis 并没有事务回滚 rollback 的功能</li>\n</ol>\n<h3 id=\"WATCH\"><a href=\"#WATCH\" class=\"headerlink\" title=\"WATCH\"></a>WATCH</h3><p>防止竞态：在 GET 获得键值后不被其他客户端修改。直到函数完成后才允许其他客户端修改。</p>\n<p>请出事务家族的另外一位成员「WATCH」</p>\n<p>WATCH 命令可以监控一个或者多个键，一旦其中一个键被修改或删除之后的事务就不再执行。监控直到 EXEC 执行。</p>\n<h2 id=\"过期时间\"><a href=\"#过期时间\" class=\"headerlink\" title=\"过期时间\"></a>过期时间</h2><p>通过 EXPIRE 设置某个 key 的过期时间</p>\n<h2 id=\"访问频次限制\"><a href=\"#访问频次限制\" class=\"headerlink\" title=\"访问频次限制\"></a>访问频次限制</h2><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":["Redis"]},{"title":"Hackathon","url":"http://jocolorful.com/2020/09/06/生活-Hackathon/","content":"<p>令人快乐的事：这周 Hackthon 我们拿了 final！</p>\n<center><img src=\"/images/127A0435.JPG\" width=\"600px\" /></center>\n\n<p>今年的 Hackthon 的主题是「聚焦创作者」</p>\n<p>（我想金亚哥哥考试成绩一定很好，因为他押题很准，毕竟船长在海盗船里一直传递这个想法）</p>\n<a id=\"more\"></a>\n\n<p>我们的战队名字叫PPA（Power Point Athon）回头来看了眼群公告：里面的内容包括了 「联调沙盒」、「立项」、「PPT」、「数据摸底」、「设计文档」… 不知道其他团队的公告是什么样的，但从公告里看得出我们确实做了充分的准备。</p>\n<h1 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a>Day 1</h1><p>主题「聚焦创作者」发送至各个海盗邮箱。脑暴开始，大家把自己的 idea 写进了 Google 文档。我想的 idea 是创作者成团和内容分发相关，以下👇</p>\n<p>来个鸡汤：一个人可以走很快，但一群人可以走很远。为什么普通的创作者死得快，因为他们没有专业的技能。<br>但是一个团队就不一样了，每个人只要发挥自己的特长就行。我们打造一个「成团榜单」即可，就像 Hackthon 吧。（PS，即便是快手、抖音应该也有专业的团队来运营这些号。但是，他们有专门的系统来帮助他们成团并且运营吗？我不知道。。。hhhh）</p>\n<h1 id=\"Day-2\"><a href=\"#Day-2\" class=\"headerlink\" title=\"Day 2\"></a>Day 2</h1><p>晚上「快闪课堂」idea 筛选。从晚 7 点 到 晚 9 点。各抒己见之后决定利用百度云的 SDK</p>\n<ol>\n<li>基于视频检索，提供视频素材检索能力</li>\n<li>搜索框可以搜索到视频，提供一个视频搜索产品方案</li>\n<li>视频素材热度趋势排行榜</li>\n</ol>\n<h1 id=\"Day-3\"><a href=\"#Day-3\" class=\"headerlink\" title=\"Day 3\"></a>Day 3</h1><p>基于 idea 产出产品原型，明确分工。同时还分析出了我们的成本其中包括人力成本、推广成本、技术成本（媒体分析 百度云 单价6元/小时、服务器、CDN、数据库…）</p>\n<ol>\n<li>PM: 老张、双男、张湃</li>\n<li>运营：程赛</li>\n<li>设计：静远</li>\n<li>前端：周颖、德镇</li>\n<li>后端：茗一、后斌</li>\n<li>数据分析：舒鸿</li>\n<li>演讲家：侯策</li>\n<li>整体进度：金亚</li>\n</ol>\n<p>金亚哥哥看上去像一个 CEO（只有傻子才等到周四才开始想）。前端利用已有的项目 xen 搭建了一个小页面。大家还脑暴了产品名字：积木计划！</p>\n<h1 id=\"Day-4\"><a href=\"#Day-4\" class=\"headerlink\" title=\"Day 4\"></a>Day 4</h1><p>比赛拉开序幕后，大家开始写码。其他组似乎还在脑暴 idea，我们组看起来格外的轻松。我甚至边写还边溜达，Hackthon 的伙食不错：各类小食，饮料，水果。写码不是件难事，难的是 iead 的产出和设计（静远老师相当给力）当然演讲是最重要的一环。侯老师和舒鸿也在认真准备 PPT。（舒鸿是耐看型的，侯老师眼光不错）</p>\n<h1 id=\"Day-5\"><a href=\"#Day-5\" class=\"headerlink\" title=\"Day 5\"></a>Day 5</h1><p>The last day。</p>\n<p>早上八点多我就到公司暗中观察，这些年轻小伙子们太理智了，居然没人通宵！</p>\n<p>xen 的 app 实在太多，构建非常耗时。导致交付前两小时有些凌乱。我抱着我的猪排饭紧盯着 zae 的构建，吃饭时甚至不敢讲话。当构建完成后，我和德镇的 Demo 终于能够串联起来，我俩终于松了口气。然后我就拎着不知道谁的滑板出去玩了。</p>\n<center><img src=\"/images/huaban\" width=\"300px\" /></center>\n\n<p>我也是没心没肺，回来时已经是带着受伤的猪蹄。德镇还在处理好物推荐的 bug，侯老师他们找了个小黑屋准备演讲。我拿着冰块敷着猪蹄 … 吃着鸡米花。我自嘲道，我这个样子怎么上台领奖呢？</p>\n<p>下午三点是作品 Battle Time。说实话，没有几个作品给我留下了深刻的印象，即便是获得人气奖的「摘星计划」</p>\n<p>今天公布第一名的时候，我看到积木计划愣了几秒，感觉有些陌生（我心里一直想的是 PPA 战队，后来反应过来，确实是我们嘛）。主持人说我们组看上去是比赛过程中最悠闲的一组，还拿着自己的手环到处交换颜色，确实也是如此 🤦‍♀️</p>\n<center><img src=\"/images/127A1071.JPG\" width=\"500px\" /></center>\n\n<center><img src=\"/images/money.jpg\" width=\"500px\" /></center>\n\n\n<center>同时周五也是我登船一周年的纪念日。</center>\n\n<p>我在 Qunar 也参加了很多的活动，什么趣味运动会、1024 视频活动、Code Review …每次想拿个奖都费了很大的力气。而这次大家都付出了努力，致敬每一位认真对待的参赛者！</p>\n<p>Hackthon 已经过去两天，当我回顾这次旅程时我的心情依旧感到快乐并且难以平静。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"🧗‍♀️当我爬山时，我在想什么？","url":"http://jocolorful.com/2020/08/29/生活-爬山/","content":"<p>作为一个户外的领队，我可以很自豪的说我爬过这些山： 东北灵，凤凰岭 妙峰山 阳台山（三山穿越）、百花山、玉渡山、五台（东台）、坡峰岭… …实在太多就不一一罗列。那当爬山时我在想些什么？</p>\n<a id=\"more\"></a>\n\n<p>一开始接触户外时，我就走了一个三峰（连续爬三座山，完事儿后还逛了个商场吃了个火锅）此时我发现我骨骼惊奇，开始有空就出门爬山。后来参加青青的次数太多觉得不划算，索性自己也当个领队好了。</p>\n<h1 id=\"初来乍到\"><a href=\"#初来乍到\" class=\"headerlink\" title=\"初来乍到\"></a>初来乍到</h1><p>其实作为一名合格的社畜，周末有时间爬山是非常难能可贵的。上一家公司加班尤为严重，所以刚开始接触爬山时，经过了一周的职场 PUA，在爬升的过程中我满脑子都是「我为什么就不能在家里睡个懒觉，非要跟这群不认识的人爬山？」、「这群人为什么走得这么快，我太弱了… …」、「这到底什么时候才是个头啊？」</p>\n<p>作为一个审慎的弱 🐔，在看见陡峭的岩石时会她会在心里暗暗盘算：我接下来应该这么走以便于好下脚；当手脚并用的爬过一段山路时，她会感到非常得意！当她一不小心摔了个屁股：害，糗大了！当她第一次拿到手台进行调频和其他人进行沟通时：哇，这个好神奇啊！香港电影的保安也用这个！</p>\n<h1 id=\"弱鸡进化时\"><a href=\"#弱鸡进化时\" class=\"headerlink\" title=\"弱鸡进化时\"></a>弱鸡进化时</h1><p>山爬多了，弱鸡不再是弱鸡。她俨然成了一只魔王小鸡… …山路崎岖、风景独秀已经不再能让魔王鸡感到振奋以及新奇。那是什么支撑着魔王鸡爬山呢？</p>\n<p>最简单的理由是习惯吧！当然完美地进行一次徒步或者攀登，弱鸡队员们对魔王鸡表示的感谢同样也鼓舞着她继续带队。</p>\n<p>一个人爬山和一群人爬山途中的想法会略有不同：</p>\n<p>今天恰好一个人爬了香八拉，在登好汉坡的时候我告诉自己：既然已经出来了，就不用过多地追求速度，而是应该享受爬山的过程。当我爬到快山顶回头望时，风景是真真地好。</p>\n<center><img src=\"/images/xiangbala.jpg\"  width=\"300px\" /></center>\n\n<p>如果我没有爬过这里的经验，我有勇气带队员来这里吗？我的答案是否定的，因为人生总是充满了意外。作为组织者，如果有任何意外我都必须负起一定的责任。</p>\n<p>出门前我带了两瓶速溶，作为一个咖啡因患者，喝咖啡是我的习惯。但是爬山的时候我真正需要的是矿泉水。所以更应该关注：「你需要什么，而不是你喜欢什么」</p>\n<p>有一条小道我走叉了，因为我顾着和群里聊天忘记看路了… 幸好及时修正了过来</p>\n<p>“如果小熊在，她肯定又要走一些奇奇怪怪的路。”</p>\n<p>“阿凯也曾经一个人走过这条路线”</p>\n<p>… …</p>\n<p>当我一个人在爬山时，我在想什么👆？爬完之后我感觉更加的笃定，心情也相应地平静下来。</p>\n<p>那一群人爬山时，我在想什么？</p>\n<p>（这个人怎么还不走？这个人体力太差了，应该多锻炼多锻炼；这个小孩子太皮了，管都管不住。这个队员会不喜欢我今天的表现吗？… …）</p>\n<p>一群人爬山时也有一群人的快乐，比如今年就认识了废物无限的元老成员，当个废物没有什么不好。一群人爬山不会给个人留太多的思考时间，我们会一起聊天、唱歌拍照，会做游戏会做一切令人快乐的事。也经常会遇到同行，我们会有共同的语言：Javascript！</p>\n<p>趁着心血来潮就先写到这里，我也不知道该写些什么了。当我爬山时，下一次我希望什么都不用想… …</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"如何优雅地处理前端异常？","url":"http://jocolorful.com/2020/07/09/前端-catch-error/","content":"<p>原文：<a href=\"https://zhuanlan.zhihu.com/p/51800345\" target=\"_blank\" rel=\"noopener\">如何优雅处理前端异常？</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"异常的种类\"><a href=\"#异常的种类\" class=\"headerlink\" title=\"异常的种类\"></a>异常的种类</h1><ol>\n<li>JS 语法错误、代码异常</li>\n<li>Ajax 请求异常</li>\n<li>静态资源加载异常</li>\n<li>Promise 异常</li>\n<li>iframe 异常</li>\n<li>跨域 Script error</li>\n<li>崩溃和卡顿</li>\n</ol>\n<p>对于第二点：Ajax 异常，我更偏好称之为 http 异常；对于第四点：Promise 异常，我更偏好称之为异步异常。</p>\n<h1 id=\"异常的处理\"><a href=\"#异常的处理\" class=\"headerlink\" title=\"异常的处理\"></a>异常的处理</h1><p>针对以上异常的种类，我们来看一下怎么处理：</p>\n<h2 id=\"try-catch-的误区\"><a href=\"#try-catch-的误区\" class=\"headerlink\" title=\"try-catch  的误区\"></a>try-catch  的误区</h2><blockquote>\n<p>try-catch 只能捕获到同步的运行时错误，对语法和异步错误却无能为力</p>\n</blockquote>\n<h2 id=\"window-onerror-并不是万能的\"><a href=\"#window-onerror-并不是万能的\" class=\"headerlink\" title=\"window.onerror 并不是万能的\"></a>window.onerror 并不是万能的</h2><ol>\n<li>同步异常可捕获</li>\n<li>语法错误不能捕获</li>\n<li>异步异常可捕获</li>\n</ol>\n<blockquote>\n<p>onerror 最好写在所有 JS 脚本的前面，否则有可能捕获不到错误；onerror 无法捕获语法错误；</p>\n</blockquote>\n<h2 id=\"window-addEventListener\"><a href=\"#window-addEventListener\" class=\"headerlink\" title=\"window.addEventListener\"></a>window.addEventListener</h2><p>当静态资源加载失败会触发 error 事件。由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。</p>\n<h2 id=\"Promise-Catch\"><a href=\"#Promise-Catch\" class=\"headerlink\" title=\"Promise Catch\"></a>Promise Catch</h2><p>promise 的 catch 可以非常容易地捕获异步的错误。</p>\n<p>没有 catch 的 Promise 中抛出的错误无法被 onError 或 try-catch 捕获到。所以务必要写 catch 处理抛出异常。</p>\n<p>解决方案： 为了防止有漏掉的 Promise 异常，建议在全局增加一个对 unhandledrejection 的监听，用来全局监听 Uncaught Promise Error。</p>\n<p>使用方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"unhandledrejection\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>那如果对 Promise 不进行 catch 呢:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"unhandledrejection\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  e.preventDefault()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'捕获到异常：'</span>, e)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  reject(<span class=\"string\">'jartto: promise error'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"red\">如果去掉控制台的异常显示，需要加上：</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">event.preventDefault()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"React-的异常处理\"><a href=\"#React-的异常处理\" class=\"headerlink\" title=\"React 的异常处理\"></a>React 的异常处理</h2><p>UI 的某部分引起的 JS 错误不应该破坏整个程序，为了帮 React的使用者解决这个问题，React 16介绍了一种关于错误边界</p>\n<p>注意： error boundaries并不会捕捉这些错误：</p>\n<ol>\n<li><p>事件处理器</p>\n</li>\n<li><p>异步代码</p>\n</li>\n<li><p>服务端的渲染代码</p>\n</li>\n<li><p>在 error boundaries 区域内的错误</p>\n</li>\n</ol>\n<h2 id=\"iframe-异常\"><a href=\"#iframe-异常\" class=\"headerlink\" title=\"iframe 异常\"></a>iframe 异常</h2><p>借助 window.onerror</p>\n<h2 id=\"script-异常\"><a href=\"#script-异常\" class=\"headerlink\" title=\"script 异常\"></a>script 异常</h2><h2 id=\"崩溃和卡顿\"><a href=\"#崩溃和卡顿\" class=\"headerlink\" title=\"崩溃和卡顿\"></a>崩溃和卡顿</h2><ol>\n<li>利用 window 对象的 「load」 和 「beforeunload」 事件实现了「网页崩溃」的监控</li>\n<li>使用 Service Worker 来实现网页崩溃的监控：<ol>\n<li>Service Worker 有自己独立的工作线程，与网页区分开，网页崩溃了，Service Worker 下不会崩溃；</li>\n<li>Service Worker 生命周期一般要比网页还要长，可以用来监控网页的状态；</li>\n<li>网页可以通过 navigator.serviceWorker.controller.postMessage API 向掌管自己的 SW 发送消息</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"错误上报\"><a href=\"#错误上报\" class=\"headerlink\" title=\"错误上报\"></a>错误上报</h1><ol>\n<li>利用 Ajax 请求上报</li>\n<li>动态创建 img 标签的形式</li>\n</ol>\n<p>上报时，设置采集率以减少服务器压力</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Reporter.send = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只采集 30%</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.random() &lt; <span class=\"number\">0.3</span>) &#123;</span><br><span class=\"line\">    send(data)      <span class=\"comment\">// 上报错误信息</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"GET 和 POST 的差异","url":"http://jocolorful.com/2020/07/07/2020-POST/","content":"<p>原文：<a href=\"https://segmentfault.com/a/1190000018129846\" target=\"_blank\" rel=\"noopener\">都 9102 年了，还问 GET 和 POST 的区别</a></p>\n<a id=\"more\"></a>\n\n<ol>\n<li><p>GET 和 POST 只是 HTTP 协议中两种请求方式，而 HTTP 协议是基于 TCP/IP 的应用层协议，无论 GET 还是 POST，用的都是同一个传输层协议，所以在传输层上，没有任何区别。</p>\n<ol>\n<li><p>当 GET 和 POST 「不携带参数」时，最大的区别是第一行方法名不同:<br>请求报文第一行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /uri HTTP/1.1 \\r\\n</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /uri HTTP/1.1 \\r\\n</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当 GET 和 POST 「携带参数」时，安装约定 GET 方法的参数应该放在 URL 里，POST 方法的参数应该放在  body 中</p>\n<p>GET 简约版报文</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /index.php?name=qiming.c&amp;age=22 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n\n<p>POST 简约版报文</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /index.php HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">name=qiming.c&amp;age=22</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>「浏览器」的 URL 有长度限制是出于「安全」和「性能」考虑，在解析长 URL 时需防止恶意构造长 URL 来进行攻击，和 HTTP 协议本身没有关系。</p>\n</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"fecth 和 Ajax 的区别","url":"http://jocolorful.com/2020/07/07/前端-Fetch和ajax的区别/","content":"<h1 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h1><p>window 的一个对象, 他是更加底层的一个API。</p>\n<ol>\n<li>默认的请求为get请求 可以使用 method:post 来进行配置</li>\n<li>第一步中的 response 有许多方法 json() text() formData()</li>\n<li>Fetch跨域的时候默认不会带 cookie 需要手动的指定 credentials:’include’</li>\n<li>fetch 是一个 low-level 的 API，所以你需要自己 encode HTTP 请求的 payload，还要自己指定 HTTP Header 中的 Content-Type 字段。</li>\n<li>按照 MDN 的说法，fetch 只有在遇到网络错误的时候才会 reject 这个 promise，比如用户断网或请求地址的域名无法解析等。只要服务器能够返回 HTTP 响应（甚至只是 CORS preflight 的 OPTIONS 响应），promise 一定是 resolved 的状态。</li>\n</ol>\n<h1 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var xml&#x3D;new XMLHttpRequest();</span><br><span class=\"line\">    xml.open(&#39;GET&#39;,&#39;a.json&#39;,true);  &#x2F;&#x2F;第三个参数表示是否异步</span><br><span class=\"line\">    xml.send(null);&#x2F;&#x2F;参数为要给服务器传递的参数  若只是单纯的向服务器取数据  则传递null</span><br><span class=\"line\">  xml.onreadystatechange&#x3D;function () &#123;</span><br><span class=\"line\">      if(xml.readyState&#x3D;&#x3D;4)&#123;</span><br><span class=\"line\">          c onsole.log(11)</span><br><span class=\"line\">          if(xml.status&#x3D;&#x3D;200)&#123;</span><br><span class=\"line\">              console.log(xml.responseText)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"前端性能量化标准读后感","url":"http://jocolorful.com/2020/07/01/前端-性能量化标准读后感/","content":"<p>祭出原 issue 👉 <a href=\"https://github.com/frontend9/fe9-library/issues/7\" target=\"_blank\" rel=\"noopener\">前端性能量化标准</a></p>\n<h1 id=\"它正在发生吗？\"><a href=\"#它正在发生吗？\" class=\"headerlink\" title=\"它正在发生吗？\"></a>它正在发生吗？</h1><a id=\"more\"></a>\n\n<p>FP：First paint 第一个像素绘制时间<br>FCP：First Content paint 首次内容绘制时间</p>\n<ol>\n<li><p>window.performance.getEntriesByType(‘paint’)</p>\n</li>\n<li><p>当然也可以使用 lighthouse，<br>这里我全局安装的 lighthouse</p>\n</li>\n</ol>\n<h1 id=\"它是否有用？\"><a href=\"#它是否有用？\" class=\"headerlink\" title=\"它是否有用？\"></a>它是否有用？</h1><p>FMP： First meaningful paint<br>hero element timing</p>\n<p>Lighthouse 使用的算法是：页面绘制布局「变化」最大的那次绘制（根据 页面高度/屏幕高度 调节权重）</p>\n<h1 id=\"它是否令人愉快的\"><a href=\"#它是否令人愉快的\" class=\"headerlink\" title=\"它是否令人愉快的\"></a>它是否令人愉快的</h1><p>Long tasks。</p>\n<p>JS 线程与 GUI 线程互斥。JS 如果在执行，那么渲染线程就会被阻塞。如果一个 LT 超过 50 ms ，就说明这个线程有问题。</p>\n<h1 id=\"它是否可用-？\"><a href=\"#它是否可用-？\" class=\"headerlink\" title=\"它是否可用 ？\"></a>它是否可用 ？</h1><p>TTI：Time to interactive（页面已经渲染并且可以响应用户交互）。不能响应用户的原因有：</p>\n<ol>\n<li>JS 的资源还未加载完。</li>\n<li>Long Task 阻塞了主线程</li>\n</ol>\n<h1 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h1><p>当然这片文章还提出了一些优化策略，优化过程应该是一个全链路的解决方案。</p>\n<p>关于测量标准记录这些，策略手段我想我的学习清单又是一篇长笔记！</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"CSS 性能优化的 8 个技巧","url":"http://jocolorful.com/2020/06/19/CSS-性能优化的8个技巧/","content":"<blockquote>\n<p>这周周会翼巧同学分享了「内联首屏关键CSS(Critical CSS)」</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>祭出原文👉 <a href=\"https://juejin.im/post/5ece2a1e6fb9a048021466b0?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">CSS性能优化的 8 个技巧</a></p>\n<p>翼巧同学使用的是第一种方式（但不是内联，是内嵌），反正我已经知道怎么做的了，来看看优缺点吧！</p>\n<h1 id=\"关键-CSS\"><a href=\"#关键-CSS\" class=\"headerlink\" title=\"关键 CSS\"></a>关键 CSS</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>内联 CSS 能够使浏览器开始页面渲染的时间提前</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>无法缓存 CSS</li>\n<li>内嵌样式体积需要较小</li>\n</ol>\n<h1 id=\"异步加载-CSS\"><a href=\"#异步加载-CSS\" class=\"headerlink\" title=\"异步加载 CSS\"></a>异步加载 CSS</h1><ol>\n<li>通过 script 标签异步创建 link 标签</li>\n<li></li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"preload\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mystyles.css\"</span> <span class=\"attr\">as</span>=<span class=\"string\">\"style\"</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"this.rel='stylesheet'\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件压缩\"><a href=\"#文件压缩\" class=\"headerlink\" title=\"文件压缩\"></a>文件压缩</h1><h1 id=\"去除无用-CSS\"><a href=\"#去除无用-CSS\" class=\"headerlink\" title=\"去除无用 CSS\"></a>去除无用 CSS</h1><ol>\n<li>保持简单，不要使用嵌套过多过于复杂的选择器</li>\n<li>通配符和属性选择器效率最低，需要匹配的元素最多，尽量避免使用</li>\n<li>不要使用类选择器和 ID 选择器修饰元素标签</li>\n<li>不要为了追求速度而放弃可读性与可维护性</li>\n</ol>\n<p>复习一遍： 为什么 CSS 选择器是从右向左匹配的</p>\n<blockquote>\n<p>CSS 中更多的选择器是不会匹配的，所以在考虑性能问题时，需要考虑的是如何在选择器「不匹配」时提升效率。从右向左匹配就是为了达成这一目的的，通过这一策略能够使得CSS选择器在不匹配的时候效率更高。这样想来，在匹配时多耗费一些性能也能够想的通了</p>\n</blockquote>\n<h1 id=\"减少使用昂贵的属性\"><a href=\"#减少使用昂贵的属性\" class=\"headerlink\" title=\"减少使用昂贵的属性\"></a>减少使用昂贵的属性</h1><h1 id=\"减少重排和避免重绘\"><a href=\"#减少重排和避免重绘\" class=\"headerlink\" title=\"减少重排和避免重绘\"></a>减少重排和避免重绘</h1><h1 id=\"不要使用-import\"><a href=\"#不要使用-import\" class=\"headerlink\" title=\"不要使用 @import\"></a>不要使用 @import</h1><p>使用 @import 引用的 CSS 文件只有在引用它的那个css文件被「下载、解析」之后，浏览器才会知道还有另外一个 CSS 需要下载，这时才去下载，然后下载后开始解析、构建render tree等一系列操作。这就导致浏览器无法并行下载所需的样式文件。</p>\n<p>直接导致的后果：当然是异步加载完的重绘</p>\n<p>That’s All !</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"我的学习清单","url":"http://jocolorful.com/2020/06/19/ReadList/","content":"<h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Mercury</li>\n</ul>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"/2020/05/25/%E6%88%91%E9%9C%80%E8%A6%81%E8%83%8C%E4%BC%9A%E7%9A%84%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/\">css加载会造成阻塞吗</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://juejin.im/post/5c35953ce51d45523f04b6d2\" target=\"_blank\" rel=\"noopener\">不可思议的纯 CSS 滚动进度条效果</a></li>\n</ul>\n<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1><h1 id=\"工程能力\"><a href=\"#工程能力\" class=\"headerlink\" title=\"工程能力\"></a>工程能力</h1><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 前端缓存最佳实践</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"\">前端性能量化标准</a></li>\n</ul>\n<h1 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h1><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> iTerm2 的总结</li>\n<li><input disabled=\"\" type=\"checkbox\"> sublime 配置</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"天空之城","url":"http://jocolorful.com/2020/05/28/生活-天空之城/","content":"<center>\n我是天空里的云\n\n<p>投影在你的城</p>\n<p>你是否看得见</p>\n<a id=\"more\"></a>\n<p>那阵细雨有我的泪</p>\n<p>我放任在天空飞</p>\n<p>随风飘舞任风吹</p>\n<p>你是否还在那座城里</p>\n<p>坚守着我的归期</p>\n<p>不曾后悔爱过你</p>\n<p>你是我最美的回忆</p>\n<p>点点滴滴那些甜蜜抹不去</p>\n<p>全都是你的回忆</p>\n<p>你看那 看那  片天空</p>\n<p>依旧像昨天的蔚蓝</p>\n<p>你听那  听那  一阵风</p>\n<p>风里全都是我的思念</p>\n<p>不曾后悔爱过你</p>\n<p>你是我最美的回忆</p>\n<p>点点滴滴  那些甜蜜抹不去</p>\n<p>全都是你的回忆</p>\n<p>你看那  看那  片天空</p>\n<p>依旧像昨天的蔚蓝</p>\n<p>你听那  听那  一阵风</p>\n<p>风里全都是我的思念</p>\n<p>我是天空里的云</p>\n<p>投影在你的城</p>\n<p>你是否看得见</p>\n<p>那阵细雨有我的泪</p>\n<p>我放任在天空飞</p>\n<p>随风飘舞任风吹</p>\n<p>你是否还在那座城里</p>\n<p>坚守着我的归期 坚守着我的归期</p>\n</center><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"CSS 加载会造成阻塞吗？","url":"http://jocolorful.com/2020/05/25/CSS 加载会造成阻塞吗/","content":"<p><a href=\"https://github.com/Nealyang/PersonalBlog/issues/48\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n<h1 id=\"👉-CSS-加载会造成阻塞吗\"><a href=\"#👉-CSS-加载会造成阻塞吗\" class=\"headerlink\" title=\"👉 CSS 加载会造成阻塞吗\"></a><a href=\"https://juejin.im/post/5b88ddca6fb9a019c7717096\" target=\"_blank\" rel=\"noopener\">👉 CSS 加载会造成阻塞吗</a></h1><a id=\"more\"></a>\n\n<p>读后感：在浏览器引擎渲染的世界里，简单地将 HTML 呈现给用户的方式分为了两个过程：加载以及渲染。</p>\n<p>DOM 树从上至下依次<strike>渲染</strike> 解析。遇到 script 标签时，默认会阻止页面解析并平行下载 JS 文件。所以大部分的文章建议你将 JS 文件放在 body 后面，这样不会影响 HTML 的解析。</p>\n<p>属性 <code>defer</code> 以及 <code>async</code> 不会阻塞页面解析，文档解析完成之后 <code>defer</code> 和 <code>async</code> 脚本执行。</p>\n<p><code>defer</code> 以及 <code>async</code> 的区别在于：<br><code>defer</code> 执行脚本的顺序是加载顺序，而<code>async</code>则不能保证顺序。<br>同时这两个属性都只在外链时生效，即含有 <code>src</code> 属性时生效。</p>\n<p>在看完文章之后，我再次</p>\n<h1 id=\"提问？\"><a href=\"#提问？\" class=\"headerlink\" title=\"提问？\"></a>提问？</h1><p>既然问题是 CSS 是否会造成阻塞，那么阻塞什么内容呢？</p>\n<p>DOM 的解析？DOM 的渲染？JS 的加载？JS的执行？</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>以上我们可以分析出：</p>\n<ol>\n<li>CSS 的加载并不会阻塞 DOM 的解析</li>\n<li>CSS 的加载会阻塞 DOM 的渲染</li>\n<li>CSS 的加载不会阻塞 JS 的加载，JS 加载阻塞和 script 标签的位置以及是否含有 <code>defer</code> 和 <code>async</code> 属性相关</li>\n<li>CSS 的加载会阻塞「后面 JS」语句的执行，（DOMContentLoaded 内容解析完成）因为 JS 有可能需要操作前面 DOM 的样式。其他其他情况下，DOMContentLoaded 都不会等待 CSS 加载，并且 DOMContentLoaded 事件也不会等待图片、视频等其他资源加载。</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"他山之石","url":"http://jocolorful.com/2020/05/23/工具-实用Demo整理/","content":"<h1 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h1><p><a href=\"https://mdnice.com/\" target=\"_blank\" rel=\"noopener\">📓 微信公众号排版</a><br><a href=\"https://carbon.now.sh/\" target=\"_blank\" rel=\"noopener\">🎨 代码界的美图秀秀</a><br><a href=\"https://sequelpro.com/download\" target=\"_blank\" rel=\"noopener\">🐬 MySQL 可视化工具</a></p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p><a href=\"https://codesandbox.io/s/sortabletree-pwrfv\" target=\"_blank\" rel=\"noopener\">👉 使用 react-dnd 实现拖拽 </a><br><a href=\"https://codesandbox.io/s/draft-js-highlight-ir4bd\" target=\"_blank\" rel=\"noopener\">👉 使用 draft.js 实现编辑器文本高亮</a><br><a href=\"https://codesandbox.io/s/3d-hover-effect-hqy6h\" target=\"_blank\" rel=\"noopener\">👉 3D hover 效果</a><br><a href=\"https://bbc.github.io/react-transcript-editor/iframe.html?id=demo--default\" target=\"_blank\" rel=\"noopener\">👉 react-transcript-editor 厉害！文字居然可以跟随视频语音高亮</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space\" target=\"_blank\" rel=\"noopener\">👉 MDN: white-space</a><br><a href=\"https://codesandbox.io/s/sortabletree-pwrfv\" target=\"_blank\" rel=\"noopener\">👉 使用 react-dnd 实现拖拽 </a><br><a href=\"https://codesandbox.io/s/draft-js-highlight-ir4bd\" target=\"_blank\" rel=\"noopener\">👉  使用 draft.js 实现编辑器文本高亮</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["工具"],"tags":[]},{"title":"搬砖公主折腾记","url":"http://jocolorful.com/2020/05/11/生活-搬砖公主折腾记/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这也不知道是我第几次折腾博客了，希望是最后一次！<br>我的博客是基于 Hexo 的静态页面生成<br>在不断折腾博客的时候，我总结了几个坑👇</p>\n<ol>\n<li>源文件经常丢失。</li>\n<li>图片存储在七牛云，强依赖第三方过了几年有些图片已经不能正常显示。🤦‍♀️</li>\n<li>能动性不强，一年也就更个两三篇。</li>\n<li>主题常常跑偏…</li>\n</ol>\n<h1 id=\"回归之路\"><a href=\"#回归之路\" class=\"headerlink\" title=\"回归之路\"></a>回归之路</h1><blockquote>\n<p>给自己提问：为什么要重新记录这个博客？我是否能够坚持？</p>\n</blockquote>\n<p>记录这个博客的原因很简单：</p>\n<ol>\n<li><p>换电脑需要配置一些环境时，我希望能够有一份完善的配置记录，我能够无脑 copy 配置。</p>\n</li>\n<li><p>作为一名前端开发，我希望能够有技术沉淀。将近三年的开发经验让我养成了「问为什么」的习惯。我希望我弄能掌握每个知识点。当然我的我的脸皮足够厚，即便到了第三个工作的年头，我依旧承认有些 HTML 的属性我并不是完全掌握。</p>\n</li>\n<li><p>我能够坚持吗？hhhh，我自己都持怀疑态度，也许有人监督会好一些吧。但是我希望每一篇文章都足够高质量并且用心，有时候并不是为了产出而产出。可能会记更多 bug 以及思考之类的？</p>\n</li>\n</ol>\n<p>暂时只想到这些吧，源文件的丢失导致我得重新生成把以前的博客整理一下</p>\n<p>当然，我希望我的博客不仅仅只有技术，这里也融入了我对生活的态度。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"iTerm2","url":"http://jocolorful.com/2020/05/11/工具-iTerm2/","content":"<p>iTerm2 是我常用的终端工具，每次换电脑安装的第一个软件就是它。青睐于 iTerm 的原因很简单：</p>\n<a id=\"more\"></a>\n\n<ol>\n<li>支持分屏模式</li>\n<li>可配置插件</li>\n<li>颜值 online</li>\n</ol>\n<p>I love this black cat background！</p>\n<img src=\"/images/iterm.png\"  width=\"500px\"/>\n\n<h1 id=\"Shell-冷知识\"><a href=\"#Shell-冷知识\" class=\"headerlink\" title=\"Shell 冷知识\"></a>Shell 冷知识</h1><p>前端开发往往不关心 *nix 内核。Shell 仅仅只是一个「壳」而已。我们借助 Shell 和内核打交道。Mac 自带终端的 Shell 是 bash。常见的 Shell 有 sh、bash、zsh、csh</p>\n<p>通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &#x2F;etc&#x2F;shells</span><br></pre></td></tr></table></figure>\n\n<p>可以查看安装<br><img src=\"/images/cat.png\"  width=\"300px\"/></p>\n<h1 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h1><h2 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<p>换回bash</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"必备插件\"><a href=\"#必备插件\" class=\"headerlink\" title=\"必备插件\"></a>必备插件</h2><p><a href=\"https://github.com/ohmyzsh/ohmyzsh\" target=\"_blank\" rel=\"noopener\">ohmyzsh</a><br>itermpreference.png</p>\n<p>内置了 git 的插件管理 还有一些漂亮的主题，这里不在赘述</p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><p>对于日常开发我常用分屏模式，已经能够满足对于多个窗口的诉求</p>\n<p>command + D<br>command + shift + D</p>\n<h3 id=\"默认打开工作区\"><a href=\"#默认打开工作区\" class=\"headerlink\" title=\"默认打开工作区\"></a>默认打开工作区</h3><p>在 preference 的设置里面，我勾选了 Reuse previous session‘s directory。</p>\n<img src=\"/images/itermpreference.png\"  width=\"300px\"/>\n\n<p>这样每次打开都是从上一个工作区切出来的目录，这对于一个项目需要启动多个端口来说非常友好。</p>\n<h3 id=\"open-Buff\"><a href=\"#open-Buff\" class=\"headerlink\" title=\"open Buff\"></a>open Buff</h3><p>其实这算事 iTerm 的一个 Buff，我给 ~/.zshrc 配置了 open 命令的别名：</p>\n<img src=\"/images/itermalias.png\"  width=\"300px\"/>\n\n<p>这使得我可以使用终端快速打开文件。据我所知 atom 自带了 atom 命令来实现这个效果，但是我更倾向于自己 DIY，而不是依赖 IDE。这也是我选择 sublime 的原因。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">subl &#123;path&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"颜值-Buff\"><a href=\"#颜值-Buff\" class=\"headerlink\" title=\"颜值 Buff\"></a>颜值 Buff</h3><p>做为一只颜狗，我给 iTerm2 配置了背景图，并且设置了默认的行列数，以减少手动放大 iTerm2。</p>\n<img src=\"/images/itermbg.png\"  width=\"300px\"/>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"生活-十三陵","url":"http://jocolorful.com/2020/03/05/生活-十三陵/","content":"<h1 id=\"十三陵\"><a href=\"#十三陵\" class=\"headerlink\" title=\"十三陵\"></a>十三陵</h1><p>三月六号即将去往十三陵，对于这种历史积淀较深的景点自然是不敢怠慢。奈何历史不好，对于明朝的影响无非就是小学看的电视剧《穿越时空的爱恋》，故得好好准备一番。</p>\n<a id=\"more\"></a>\n<p>明朝共有16位皇帝，但北京的明十三陵只有13位皇帝，未入陵者因由各异。明朝开国皇帝朱元璋早年建都于南京，死后葬于南京紫金山的“孝陵”；继位的明太祖朱元璋长孙明惠帝朱允炆，在其叔父燕王朱棣（即后来的明成祖）发起“靖难之役”攻破南京之后下落不明，加上永乐帝不承认其帝位，因此没有帝陵；第七帝明代宗朱祁钰，在其兄明英宗于土木堡之变被瓦剌所俘之后登上帝位。后来明英宗复辟，朱祁钰速死，明英宗不承认其帝位，捣毁其在天寿山修建的寿陵。还有一说，寿陵被改建为在位仅29天的明光宗的陵墓，改名为庆陵。明宪宗以亲王身份将他葬于北京西郊金山的景泰陵。</p>\n<p>大家前往的时候能够看见黄色琉璃屋顶，就知道是皇帝的陵园。但是因为分布众多，再加上交通不便和疫情影响，大部分只去往部分的开放景点，一般人走不完皇帝的最后归处。</p>\n<center><img src=\"/images/wKgEaVyGWPiASqXiAAipDFOOPKI84.jpeg\" width=\"500\" /></center>\n\n<h1 id=\"长陵「明成祖」\"><a href=\"#长陵「明成祖」\" class=\"headerlink\" title=\"长陵「明成祖」\"></a>长陵「明成祖」</h1><p>明长陵为明朝第三位皇帝明成祖朱棣的陵墓。为明十三陵的第一陵，也是主陵。陵内安葬明成祖朱棣和徐皇后。</p>\n<h1 id=\"献陵「明仁宗」\"><a href=\"#献陵「明仁宗」\" class=\"headerlink\" title=\"献陵「明仁宗」\"></a>献陵「明仁宗」</h1><p>明仁宗是明成祖朱棣长子，生母徐皇后为徐达之女。</p>\n<h1 id=\"景陵「明宣宗」\"><a href=\"#景陵「明宣宗」\" class=\"headerlink\" title=\"景陵「明宣宗」\"></a>景陵「明宣宗」</h1><h1 id=\"裕陵「明英宗」朱祁镇\"><a href=\"#裕陵「明英宗」朱祁镇\" class=\"headerlink\" title=\"裕陵「明英宗」朱祁镇\"></a>裕陵「明英宗」朱祁镇</h1><p>明英宗「朱祁镇」是明朝第六任、第八任皇帝（1435—1449年、1457—1464年两次在位）。</p>\n<p>第一次继位称帝，年仅九岁，年号正统。国事全由太皇太后张氏把持，贤臣「三杨」主政。随之，张氏驾崩，三杨去位，宠信太监「王振」，导致宦官专权。</p>\n<p>正统十四年（1449年），发生土木堡之变。</p>\n<p>朱祁镇不顾吏部尚书王直等群臣反对，偕同王振率军五十余万御驾亲征。命皇弟郕王朱祁钰留守京师。此次出征，诏下两日五十万大军即匆忙集结启程，各项准备均不足，上下一片混乱。亲征诏书下达后，英宗对文武大臣的多次劝谏置之不理。英宗虽然名为亲征，但军务大事皆由监军太监王振决定，将领处处受王振节制，无法按己意指挥作战，而王振不懂军事，指挥接连失当，致使明军屡战屡败。</p>\n<p>土木堡之变是明朝由盛转衰的标志性事件。</p>\n<p>朱祁镇北伐瓦剌却惨败被俘的事变，其弟郕王「朱祁钰」登基称帝，遥尊英宗为太上皇，改元景泰。</p>\n<p>后英宗回京，被景泰帝软禁于南宫。景泰八年（1457年），石亨等人发动夺门之变，英宗复位，第二次称帝，改元天顺。</p>\n<p>明英宗复辟，朱祁钰速死，明英宗不承认其帝位，捣毁其在天寿山修建的寿陵。明宪宗以亲王身份将他葬于北京西郊金山的景泰陵。</p>\n<p>朱祁镇前后在位二十二年，在位初期励精图治稳定西南疆域。当初宠信王振，后来又宠信曹吉祥、石亨，政治上虽然有不足之处，但是晚年任用李贤，听信纳谏，仁俭爱民，美善很多。还废除了「殉葬制度」。天顺八年（1464年）明英宗病逝。庙号英宗，谥曰法天立道仁明诚敬昭文宪武至德广孝睿皇帝。葬于明十三陵之裕陵。</p>\n<h1 id=\"茂陵「明宪宗」朱见深\"><a href=\"#茂陵「明宪宗」朱见深\" class=\"headerlink\" title=\"茂陵「明宪宗」朱见深\"></a>茂陵「明宪宗」朱见深</h1><h1 id=\"泰陵「明孝宗」\"><a href=\"#泰陵「明孝宗」\" class=\"headerlink\" title=\"泰陵「明孝宗」\"></a>泰陵「明孝宗」</h1><p>朱祐樘</p>\n<p>明孝在位初期，励精图治、整肃朝纲、改革弊政，罢逐了朝中奸佞之臣、重用贤士，为于谦建祠平冤，减轻赋税、停征徭役、兴修水利、发展农业、繁荣经济，史称「弘治中兴」。</p>\n<p>清朝的学者对弘治中兴一直争论不休，褒扬者有之，怀疑者亦有之。弘治朝的功过是非，有人认为所谓的弘治中兴名不副实，它只是一个短暂、勉强的「治世」</p>\n<p>不为人知的历史趣事：朱祐樘发明家？据美国牙医学会的资料表示，明孝宗于 1498年 把猔毛插进一支 「骨制手把」上制成了牙刷。</p>\n<h1 id=\"康陵「明武宗」\"><a href=\"#康陵「明武宗」\" class=\"headerlink\" title=\"康陵「明武宗」\"></a>康陵「明武宗」</h1><p>武宗是明朝极具争议性的统治者。</p>\n<p>他任情恣性，为人嬉乐胡闹，荒淫无度。有时也抢夺有夫之妇，逸游无度。施政荒诞不经，朝廷乱象四起<br>又信仰密宗、伊斯兰教等，自称忽必烈（蒙古名，元世祖之名）、沙吉熬烂（波斯语，伊斯兰教苏菲派的苏菲师）、苏莱曼沙阿（波斯语）、大宝法王（藏密名，白教首领）。</p>\n<p>另一方面，他为人刚毅果断，，平定安化王、宁王之乱，在<br>「应州之役」中击败达「延汗」，令鞑靼多年不敢深入，并积极学习他国文化，促进中外交流，体现出有为之君的素质，是一位功过参半的皇帝。</p>\n<h1 id=\"永陵「明世宗」\"><a href=\"#永陵「明世宗」\" class=\"headerlink\" title=\"永陵「明世宗」\"></a>永陵「明世宗」</h1><p><a href=\"https://baike.baidu.com/item/%E6%9C%B1%E5%8E%9A%E7%86%9C/2412426?fromtitle=%E5%98%89%E9%9D%96%E7%9A%87%E5%B8%9D&fromid=2374776\" target=\"_blank\" rel=\"noopener\">嘉靖</a>朱厚熜</p>\n<h1 id=\"昭陵「明穆宗」\"><a href=\"#昭陵「明穆宗」\" class=\"headerlink\" title=\"昭陵「明穆宗」\"></a>昭陵「明穆宗」</h1><p>明镜昭廉<br>「明代反贪尚廉历史观光园处」</p>\n<p><a href=\"https://www.dpm.org.cn/court/lineage/226264\" target=\"_blank\" rel=\"noopener\">穆宗隆庆皇帝</a> （唐太宗李世民陵墓也叫昭陵，位于 陕西 省 咸阳 市）</p>\n<p>按照传统的说法，隆庆帝也是一位「节俭仁厚」的君主。在隆庆帝在位期间，几乎没有爆发什么重大的变故，隆庆帝得以稳坐皇位六年且，仅6年，去世时 36 岁。</p>\n<p>这一切与他的童年经历密切相关，因生母杜康妃失宠，又非长子，朱载垕小时很少得到父爱。嘉靖三十二年（1553年），刚满 16 岁的朱载垕就开始了在「裕王邸」的独居生活。在裕王邸 13年 的生活，使朱载垕较多地接触到社会生活各方面，了解到明王朝的各种矛盾和危机，特别是严嵩专政，朝纲颓废，官吏腐败，「南倭北虏」之患，民不聊生之苦，内忧外患使他关心朝局，对他登基后处理政务有着较大的影响。</p>\n<h1 id=\"定陵「明神宗」\"><a href=\"#定陵「明神宗」\" class=\"headerlink\" title=\"定陵「明神宗」\"></a><a href=\"https://baike.baidu.com/item/%E6%98%8E%E5%AE%9A%E9%99%B5/878416?fromtitle=%E5%AE%9A%E9%99%B5&fromid=45384\" target=\"_blank\" rel=\"noopener\">定陵</a>「明神宗」</h1><p>十三陵中最大的三座陵园：成祖长陵、世宗永陵、神宗定陵</p>\n<p>明星没隐私，皇帝没私坟。</p>\n<p>1956年 - 1957 年 对定陵进行了挖掘</p>\n<p>1958 对外发布消息：「明十三陵中定陵已打开……明朝第十三位皇帝朱翊钧和他的两个皇后尸体腐烂，骨架完好，头发软而有光。尸骨周围塞满了无数的金银玉器和成百匹的罗纱织锦… …」一经公布，引发了海内外无数艳羡的目光和赞叹之声。</p>\n<p>1966年，在「文化大革命」期间，定陵却被当做「牛鬼蛇神」批斗，万历皇帝及两位皇后（孝端、孝靖）的尸骨棺椁被毁。且由于当时人们文物保护意识不强和发掘技术有限，使定陵出土的大量丝织品未得到及时有效的保护，迅速风化，因此，定陵的发掘也被认为是考古史上的一大悲剧。</p>\n<p>此后，国家出台政策不再「主动」挖掘帝王陵墓。</p>\n<h1 id=\"庆陵「明光宗」\"><a href=\"#庆陵「明光宗」\" class=\"headerlink\" title=\"庆陵「明光宗」\"></a>庆陵「明光宗」</h1><p>朱常洛 - 一月天子</p>\n<p>该陵墓原为「景泰帝」所建，因景泰帝为英宗复辟时所贬，葬于西郊金山，所以空出一处皇陵。</p>\n<p>由于明光宗在位时间仅 29 天，来不及修建陵墓，故继位的「明熹宗」朱由校将光宗安葬于此陵墓。</p>\n<p><a href=\"http://book.sbkk8.com/lishigushi/zhuchangluo/150447.html#:~:text=%E6%9C%B1%E5%B8%B8%E6%B4%9B%E5%AF%B9%E4%BA%8E%E5%A4%A7%E6%98%8E%E7%8E%8B%E6%9C%9D%E7%9A%84,%E6%9C%80%E7%BB%88%E6%AD%BB%E4%BA%8E%E7%BA%A2%E4%B8%B8%E3%80%82\" target=\"_blank\" rel=\"noopener\">死因</a>莫衷一是，三百余年来，史学家设想了种种答案，但没有一种令人信服</p>\n<h1 id=\"德陵「明熹宗」\"><a href=\"#德陵「明熹宗」\" class=\"headerlink\" title=\"德陵「明熹宗」\"></a>德陵「明熹宗」</h1><p>光宗即位仅一月便驾崩，使朱由校匆匆登基为帝，朱由校当时年仅十四岁，未曾被立为太子，甚至未接受过正规教育，政事皆赖宦官辅佐，后来造就太监魏忠贤等人的干政，与阉党、东林党之党争。</p>\n<h1 id=\"思陵\"><a href=\"#思陵\" class=\"headerlink\" title=\"思陵\"></a><a href=\"https://www.sohu.com/a/415553314_120514979\" target=\"_blank\" rel=\"noopener\">思陵</a></h1><p>明朝最后一位皇帝：崇祯之墓。<br>崇祯上位之时，明朝已经是风雨飘摇，内忧外患。<br>崇祯十五年时，心爱的田贵妃去世，然而此时却是大明王朝最为危难的时刻，这一年明清之间规模最大的一场决战：松锦之战。<br>在东北：九边精锐损失殆尽，一众大将带领投降。<br>在中原：李自成和张献忠不断攻破城池。</p>\n<p>明朝节节败退，大片地区沦陷。</p>\n<p>即便这样的情形，崇祯出于对贵妃的思念还是决定在天平寿山修建陵寝。</p>\n<p>万万没想到的事，时隔两年，这座陵寝却成为崇祯自己的安葬之所。崇祯十七年，李自成攻破北京。李自成入宫后并没有找到崇祯本人,便在北京城内发下搜寻令：</p>\n<blockquote>\n<p>献帝者，赏万金，封伯爵；匿者，灭族</p>\n</blockquote>\n<p>第二天，在景山自缢的崇祯被找到，于是李自成下令，在东华门侧简单收殓了崇祯遗体，并搭建了临时性的灵棚。</p>\n<p>明朝官员生怕受崇祯牵连。谁也不敢前往吊唁，唯有襄城伯「李国桢」一人前往，跪在梓宫前踉跄大哭。</p>\n<p>李自成非常钦佩李国桢的勇气和忠心，于是对其进行了耐心的劝降，希望他能够为自己效力，而李国桢也随即开出了自己的三个“条件”：</p>\n<ul>\n<li><p>其一，对于明朝的皇陵，不仅不能破坏，还要予以防卫和保护；</p>\n</li>\n<li><p>其二，不能损毁崇祯的遗体，并且还要按照帝王规格礼仪进行妥善的安葬；</p>\n</li>\n<li><p>其三，李自成不能加害已经被他俘获的崇祯太子朱慈烺，以及另外两位皇子朱慈炯和朱慈炤，而是要进行善待。</p>\n</li>\n</ul>\n<p>对于上述三点要求，李自成予以了照准，并着手准备崇祯皇帝的安葬工作，而由于此前崇祯并没有为自己修建陵寝，李自成随即决定将崇祯葬入田贵妃墓之中。</p>\n<h2 id=\"思陵现状\"><a href=\"#思陵现状\" class=\"headerlink\" title=\"思陵现状\"></a>思陵现状</h2><p>思陵屡逢劫难，残毁十分严重。地下墓室曾先后两次被当地土匪盗发。1947年，国民党军队为修炮楼，又大规模地拆毁陵园地面建筑。上世纪90年代，十三陵特区曾对明思陵进行过简单的修缮。 思陵并未对外开放，门口的镇宅神兽的头已经不见了，神兽亦被时光磨平了棱角。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["生活随感"],"tags":[]},{"title":"前端","url":"http://jocolorful.com/2019/09/09/前端-a/","content":"<h1 id=\"面试专项\"><a href=\"#面试专项\" class=\"headerlink\" title=\"面试专项\"></a>面试专项</h1><ul>\n<li><p><a href=\"/2022/09/15/前端-面试经历/\">面试经历</a></p>\n</li>\n<li><p><a href=\"/2022/09/16/前端-手写代码/\">手撕代码</a></p>\n<h1 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h1></li>\n<li><p><a href=\"/2021/11/08/%E5%89%8D%E7%AB%AF-%E4%B8%80%E4%BA%9B%E7%94%9F%E5%83%BB%E7%9A%84HTML%E6%A0%87%E7%AD%BE/\">一些生僻的 HTML 标签</a></p>\n</li>\n<li><p><a href=\"/2019/01/29/%E5%89%8D%E7%AB%AF-Web%E5%AD%98%E5%82%A8/\">Web 的存储</a></p>\n</li>\n<li><p><a href=\"/2021/06/14/%E5%89%8D%E7%AB%AF-%E5%BE%AE%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/\">微前端相关知识</a></p>\n</li>\n<li><p><a href=\"/2020/07/07/%E5%89%8D%E7%AB%AF-Fetch%E5%92%8Cajax%E7%9A%84%E5%8C%BA%E5%88%AB/\">fecth 和 Ajax 的区别</a></p>\n</li>\n<li><p><a href=\"/2019/07/21/%E5%89%8D%E7%AB%AF-%E5%90%84%E7%B1%BB%E8%B7%AF%E7%94%B1%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/\">各类路由的优缺点</a></p>\n</li>\n<li><p><a href=\"/2019/04/19/%E5%89%8D%E7%AB%AF-%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8/\">离线存储</a></p>\n</li>\n<li><p><a href=\"/2019/01/29/%E5%89%8D%E7%AB%AF-%E8%B7%A8%E5%9F%9F%E7%AF%87/\">跨域资源共享</a></p>\n</li>\n<li><p><a href=\"/2019/02/27/前端-html/\">HTML 必知必会</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/jiasm/p/7683930.html\" target=\"_blank\" rel=\"noopener\">浅谈script标签中的async和defer</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6969825311361859598\" target=\"_blank\" rel=\"noopener\">script crossorigin 属性</a></p>\n</li>\n</ul>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><ul>\n<li><a href=\"/2022/09/15/CSS-面试常考的%20CSS%20问题/\">面试常考的 CSS 问题</a></li>\n<li><a href=\"/2019/01/29/CSS-BFC/\">BFC</a></li>\n<li><a href=\"/2021/07/28/CSS-%E4%BC%AA%E5%85%83%E7%B4%A0/\">不常见但实用的伪元素</a></li>\n<li><a href=\"/2020/06/19/CSS-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%848%E4%B8%AA%E6%8A%80%E5%B7%A7/\">CSS 性能优化的 8 个技巧</a></li>\n<li><a href=\"/2020/05/25/CSS%20%E5%8A%A0%E8%BD%BD%E4%BC%9A%E9%80%A0%E6%88%90%E9%98%BB%E5%A1%9E%E5%90%97/\">CSS 加载会造成阻塞吗？</a></li>\n<li><a href=\"/2019/01/29/CSS-%E4%BB%A4%E4%BA%BA%E8%BF%B7%E8%8C%AB%E7%9A%84px/\">令人迷茫的 CSS 单位</a></li>\n<li><a href=\"https://juejin.cn/post/7015387929870598158\" target=\"_blank\" rel=\"noopener\">使用 will-change 来提高页面的渲染速度</a></li>\n<li><a href=\"https://www.w3cplus.com/animation/gpu-animation-doing-it-right.html\" target=\"_blank\" rel=\"noopener\">这样使用 GPU 动画</a></li>\n</ul>\n<h1 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h1><ul>\n<li><p><a href=\"https://juejin.cn/post/6940945178899251230\" target=\"_blank\" rel=\"noopener\">高频前端面试题汇总之JavaScript篇（上）</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6940942549305524238\" target=\"_blank\" rel=\"noopener\">高频前端面试题汇总之JavaScript篇（下）</a></p>\n</li>\n<li><p><a href=\"/2017/08/22/%E5%89%8D%E7%AB%AF-clean-code-javascript/\">Javascript 整洁之道</a></p>\n</li>\n<li><p><a href=\"/2019/01/30/%E5%89%8D%E7%AB%AF-Node/\">事件循环</a></p>\n</li>\n<li><p><a href=\"https://chinese.freecodecamp.org/news/javascript-implicit-type-conversion/\" target=\"_blank\" rel=\"noopener\">JavaScript 隐式类型转换，一篇就够了！</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/38313717\" target=\"_blank\" rel=\"noopener\">函数防抖与函数节流</a></p>\n</li>\n<li><p><a href=\"https://es6.ruanyifeng.com/#docs/class\" target=\"_blank\" rel=\"noopener\">Class 的基本语法</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/q/1010000038214851/a-1020000038216812\" target=\"_blank\" rel=\"noopener\">一道面试题的链式调用思考？</a></p>\n</li>\n<li><p><a href=\"https://www.ruanyifeng.com/blog/2015/04/tail-call.html\" target=\"_blank\" rel=\"noopener\">尾调用优化</a></p>\n</li>\n<li><p><a href=\"https://segmentfault.com/a/1190000011447164\" target=\"_blank\" rel=\"noopener\">实现compose的五种思路</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s/xeTBJsW6YKld6VsNoGv_aw\" target=\"_blank\" rel=\"noopener\">面试前读物：EventLoop为何这么设计？</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/267273074\" target=\"_blank\" rel=\"noopener\">当事件循环遇到更新渲染</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6844903999506923528\" target=\"_blank\" rel=\"noopener\">深入理解NodeJS事件循环机制</a></p>\n<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1></li>\n<li><p><a href=\"https://juejin.cn/post/6941546135827775525\" target=\"_blank\" rel=\"noopener\">「2021」高频前端面试题汇总之React篇（上）</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6940942549305524238\" target=\"_blank\" rel=\"noopener\">「2021」高频前端面试题汇总之React篇（下）</a></p>\n</li>\n<li><p><a href=\"/2021/06/23/%E5%89%8D%E7%AB%AF-React-18-%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84/\">React 18 所需要知道的</a></p>\n</li>\n<li><p><a href=\"/2019/01/22/%E5%89%8D%E7%AB%AF-ReactHooks/\">用React Hooks 搭一个 TodoList</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s/VDw0Y6PnSaDEpiu2fb6G9w\" target=\"_blank\" rel=\"noopener\">使用爬虫盘点一下掘金 2021 高赞 React 文章</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6944863057000529933\" target=\"_blank\" rel=\"noopener\">「react进阶」一文吃透react-hooks原理</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/6891577820821061646\" target=\"_blank\" rel=\"noopener\">React Hooks原理探究，看完不懂，你打我</a></p>\n</li>\n</ul>\n<h1 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI/CD\"></a>CI/CD</h1><ul>\n<li><a href=\"/2020/12/18/%E5%89%8D%E7%AB%AF-babel/\">Babel</a></li>\n<li><a href=\"/2019/01/27/Nginx/\">Nginx 命令记录</a></li>\n<li><a href=\"https://developer.aliyun.com/article/783473\" target=\"_blank\" rel=\"noopener\">面对 ESM 的开发模式，webpack 还有还手之力吗？</a></li>\n<li><a href=\"https://juejin.cn/post/6844904094281236487\" target=\"_blank\" rel=\"noopener\">「吐血整理」再来一打Webpack面试题</a></li>\n</ul>\n<h1 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h1><ul>\n<li><a href=\"/2020/07/01/%E5%89%8D%E7%AB%AF-%E6%80%A7%E8%83%BD%E9%87%8F%E5%8C%96%E6%A0%87%E5%87%86%E8%AF%BB%E5%90%8E%E6%84%9F/\">前端性能量化标准读后感</a></li>\n<li><a href=\"/2019/01/22/%E5%89%8D%E7%AB%AF-RN%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88/\">RN - 性能优化手段</a></li>\n<li><a href=\"https://juejin.cn/post/6844903744862175246\" target=\"_blank\" rel=\"noopener\">如何监控前端页面FPS</a></li>\n<li><a href=\"https://juejin.cn/post/6844903881390964744\" target=\"_blank\" rel=\"noopener\">从头开始，彻底理解服务端渲染原理</a><h1 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h1></li>\n<li><a href=\"/2021/03/30/%E5%89%8D%E7%AB%AF-CSP/\">CSP</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html\" target=\"_blank\" rel=\"noopener\">Cookie 的 SameSite 属性</a></li>\n</ul>\n<h1 id=\"监控\"><a href=\"#监控\" class=\"headerlink\" title=\"监控\"></a>监控</h1><ul>\n<li><a href=\"/2020/07/09/%E5%89%8D%E7%AB%AF-catch-error/\">如何优雅地处理前端异常？</a></li>\n<li><a href=\"https://juejin.cn/post/6918290580619902989\" target=\"_blank\" rel=\"noopener\">解析Sentry源码</a></li>\n<li><a href=\"https://juejin.cn/post/6844904114028019719\" target=\"_blank\" rel=\"noopener\">前端监控系统 Sentry 搭建</a></li>\n</ul>\n<h1 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h1><ul>\n<li><a href=\"https://juejin.cn/post/6844903489596833800\" target=\"_blank\" rel=\"noopener\">HTTP1.0、HTTP1.1 和 HTTP2.0 的区别</a></li>\n<li><a href=\"/2019/01/29/%E5%89%8D%E7%AB%AF-Https/\">HTTPS 使用与原理</a></li>\n<li><a href=\"https://www.jianshu.com/p/f487b940d017\" target=\"_blank\" rel=\"noopener\">图解HTTPS</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html\" target=\"_blank\" rel=\"noopener\">图解SSL/TLS协议</a></li>\n<li><a href=\"/2020/07/07/2020-POST/\">深入理解POST 和 GET 的区别</a></li>\n<li><a href=\"https://www.zhihu.com/question/32255109\" target=\"_blank\" rel=\"noopener\">TCP协议的滑动窗口具体是怎样控制流量的？</a></li>\n<li><a href=\"https://www.cnblogs.com/xiaolincoding/p/12732052.html\" target=\"_blank\" rel=\"noopener\">30张图解： TCP 重传、滑动窗口、流量控制、拥塞控制 </a></li>\n<li><a href=\"https://juejin.cn/post/6990344840181940261\" target=\"_blank\" rel=\"noopener\">字节面试被虐后，是时候搞懂 DNS 了</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzIyNDU2NTc5Mw==&mid=2247484431&idx=1&sn=02f2985817851144dfcca5805475e01e&chksm=e80c4b41df7bc257f2a4cb4c44139fc5c43d88355077c98e8514ec479090e579b9bb9c3a0af0&scene=178&cur_album_id=1486329730575450113#rd\" target=\"_blank\" rel=\"noopener\">Node.js DNS (域名服务器) 模块</a></li>\n</ul>\n<h1 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h1><ul>\n<li><a href=\"/2022/09/14/前端-浏览器的架构/\">浏览器的架构</a></li>\n<li><a href=\"/2019/01/29/前端-内存/\">V8 的内存管理</a></li>\n<li><a href=\"https://juejin.cn/post/6844903593275817998\" target=\"_blank\" rel=\"noopener\">彻底理解浏览器的缓存机制</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"工具","url":"http://jocolorful.com/2019/09/09/工具-a/","content":"<ul>\n<li><a href=\"/2021/07/06/工具-在hexo中使用数学公式/\">在 Hexo 中使用数学公式</a></li>\n<li><a href=\"/2021/06/23/%E5%B7%A5%E5%85%B7%E9%9B%86/\">工具集</a></li>\n<li><a href=\"/2020/05/23/%E5%AE%9E%E7%94%A8Demo%E6%95%B4%E7%90%86/\">实用Demo整理</a></li>\n<li><a href=\"/2020/05/11/%E5%B7%A5%E5%85%B7-iTerm2/\">iTerm2</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"晴雅集","url":"http://jocolorful.com/2019/09/09/晴雅集-a/","content":"<p><a href=\"/2022/05/29/%E6%99%B4%E9%9B%85%E9%9B%86-2022/\">晴雅集 2022</a><br><a href=\"/2021/06/20/%E6%99%B4%E9%9B%85%E9%9B%86/\">晴雅集 2021</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["晴雅集"],"tags":[]},{"title":"生活随感","url":"http://jocolorful.com/2019/09/09/生活随感-a/","content":"<ul>\n<li><a href=\"/2022/06/23/生活-集中隔离的第X个夏日/\">2022.06.23の集中隔离的第X个夏日</a></li>\n<li><a href=\"/2021/12/29/生活-关于2021的一些总结/\">2021.12.29の关于 2021 的一些总结</a></li>\n<li><a href=\"/2021/07/15/%E7%94%9F%E6%B4%BB-%E7%9B%9B%E5%A4%8F%E5%BD%92%E5%AE%B6/\">2021.07.15の盛夏归家</a></li>\n<li><a href=\"/2021/07/20/%E7%94%9F%E6%B4%BB-GoforSanya/\">2021.07.20の三亚之旅</a></li>\n<li><a href=\"/2021/06/15/%E7%94%9F%E6%B4%BB-%E6%AD%A4%E6%97%B6%E6%AD%A4%E5%88%BB/\">2021.06.15の此时此刻</a></li>\n<li><a href=\"/2020/09/06/%E7%94%9F%E6%B4%BB-Hackathon/\">2020.09.06のHackathon</a></li>\n<li><a href=\"/2020/09/27/%E7%94%9F%E6%B4%BB-%E5%85%B3%E4%BA%8E%E7%96%AF%E7%8B%82%E8%BE%93%E5%87%BA%E4%B8%8E%E6%91%B8%F0%9F%90%9F/\">2020.09.27の关于疯狂输出与摸 🐟</a></li>\n<li><a href=\"/2020/09/28/%E7%94%9F%E6%B4%BB-%E4%B8%80%E4%BB%B6%E6%82%B2%E4%BC%A4%E7%9A%84%E4%BA%8B/\">2020.09.28の一件悲伤的事</a></li>\n<li><a href=\"/2020/10/22/%E7%94%9F%E6%B4%BB-%E5%81%9A%E4%B8%80%E9%A2%97%E9%A5%B1%E6%BB%A1%E7%9A%84%E9%BA%A6%E7%A9%97/\">2020.10.22の做一颗饱满的麦穗</a></li>\n<li><a href=\"/2020/12/09/%E7%94%9F%E6%B4%BB-Pause/\">2020.12.09のPause</a></li>\n<li><a href=\"/2020/08/29/%E7%94%9F%E6%B4%BB-%E7%88%AC%E5%B1%B1/\">2020.08.29の🧗‍♀️当我爬山时，我在想什么？</a></li>\n<li><a href=\"/2020/05/28/生活-天空之城/\">2020.05.28の天空之城</a></li>\n<li><a href=\"/2020/05/11/生活-搬砖公主折腾记/\">2020.05.11の搬砖公主折腾记</a></li>\n<li><a href=\"/2020/03/05/%E7%94%9F%E6%B4%BB-%E5%8D%81%E4%B8%89%E9%99%B5/\">2020.03.05の十三陵</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"算法","url":"http://jocolorful.com/2019/09/09/算法-a/","content":"<ul>\n<li><a href=\"/2021/07/22/%E7%AE%97%E6%B3%95-%E4%BD%8D%E8%BF%90%E7%AE%97/\">位运算</a></li>\n<li><a href=\"/2021/07/08/%E7%AE%97%E6%B3%95-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/\">二进制求和</a></li>\n<li><a href=\"/2021/07/16/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93/\">递归总结</a></li>\n<li><a href=\"/2021/07/14/%E7%AE%97%E6%B3%95-%E9%95%BF%E5%BA%A6%E4%B8%BA3%E7%9A%84%E4%B8%8D%E5%90%8C%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/\">长度为3的不同回文子序列</a></li>\n<li><a href=\"/2021/07/05/%E7%AE%97%E6%B3%95-%E5%BF%AB%E9%80%9F%E5%B9%82/\">统计好数字的数目</a></li>\n<li><a href=\"/2021/07/02/%E7%AE%97%E6%B3%95-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/\">盛最多水的容器</a></li>\n<li><a href=\"/2021/06/30/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/\">动态规划</a></li>\n<li><a href=\"/2021/06/25/%E7%AE%97%E6%B3%95-%E7%BB%9F%E8%AE%A1%E5%AD%97%E5%85%B8%E5%BA%8F%E5%85%83%E9%9F%B3%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%95%B0%E7%9B%AE/\">统计字典序元音字符串的数目</a></li>\n<li><a href=\"/2021/06/23/%E7%AE%97%E6%B3%95-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/\">比特位计数</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"阅读","url":"http://jocolorful.com/2019/09/09/阅读-a/","content":"<ul>\n<li><a href=\"/2022/09/03/%E9%98%85%E8%AF%BB-%E8%9B%A4%E8%9F%86%E5%8C%BB%E7%94%9F%E5%8E%BB%E7%9C%8B%E5%BF%83%E7%90%86%E5%AD%A6/\">蛤蟆医生去看心理学</a></li>\n<li><a href=\"/2021/07/14/%E9%98%85%E8%AF%BB-%E5%92%96%E5%95%A1%E5%92%96%E5%95%A1/\">咖啡咖啡</a></li>\n<li><a href=\"/2021/07/13/%E9%98%85%E8%AF%BB-%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%A5%BD%E5%A4%A9%E6%B0%94/\">一个人的好天气</a></li>\n<li><a href=\"/2021/07/08/%E9%98%85%E8%AF%BB-PeterPan/\">Peter.Pan</a></li>\n<li><a href=\"/2021/06/29/%E9%98%85%E8%AF%BB-%E6%96%87%E6%B5%B7%E6%8B%BE%E8%B4%9D/\">匆匆</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"Node.js","url":"http://jocolorful.com/2019/09/09/Node.js-a/","content":"<ul>\n<li><a href=\"/2021/06/21/Node-debugger/\">调试：Debugger</a></li>\n<li><a href=\"/2021/06/21/Node-%E6%96%AD%E8%A8%80/\">单测：Node.js 单测框架</a></li>\n<li><a href=\"/2021/11/06/%E5%89%8D%E7%AB%AF-Next-js-V12%E7%9A%84%E7%90%86%E8%A7%A3\">框架：Next.js v12 的理解</a></li>\n<li><a href=\"/2020/12/10/Node.js-%E8%BF%9B%E5%87%BB%E7%9A%84-NPM/\">管理： 进击的 NPM</a></li>\n<li><a href=\"/2020/10/21/Node-%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9C%A8%E5%89%8D%E7%AB%AF%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/\">无头浏览器在前端的应用场景</a></li>\n<li><a href=\"/2021/11/06/package.json%20%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3/\">package.json 字段详解</a></li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"各类路由的优缺点","url":"http://jocolorful.com/2019/07/21/前端-各类路由的优缺点/","content":"<h1 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h1><ul>\n<li>路由是根据不同的 url 地址展示不同的内容或页面</li>\n<li>前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据 url 的不同返回不同的页面实现的。</li>\n</ul>\n<h1 id=\"Hash路由\"><a href=\"#Hash路由\" class=\"headerlink\" title=\"Hash路由\"></a>Hash路由</h1><p>hash 也 称作锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内。<br>hash 路由一个明显的标志是带有 #,我们主要是通过监听 url 中的 hash 变化来进行路由跳转。</p>\n<a id=\"more\"></a>\n\n<p>hash的优势就是兼容性更好,在老版IE中都有运行,问题在于url中一直存在#不够美观,而且hash路由更像是Hack而非标准,相信随着发展更加标准化的History API会逐步蚕食掉hash路由的市场。</p>\n<h1 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h1><ul>\n<li>window.history.back();       // 后退</li>\n<li>window.history.forward();    // 前进</li>\n<li>window.history.go(-3);       // 后退三个页面</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":["路由"]},{"title":"离线存储","url":"http://jocolorful.com/2019/04/19/前端-离线存储/","content":"<h1 id=\"离线存储\"><a href=\"#离线存储\" class=\"headerlink\" title=\"离线存储\"></a>离线存储</h1><p>离线存储指的是：在用户没有与网络连接时，可以正常访问站点或应用，在用户与网络连接时，更新用户机器上的缓存文件。</p>\n<h2 id=\"什么是-Cache-Manifest\"><a href=\"#什么是-Cache-Manifest\" class=\"headerlink\" title=\"什么是 Cache Manifest\"></a>什么是 Cache Manifest</h2><a id=\"more\"></a>\n<p><font size=\"bold\">原理：</font>基于一个新建的 「.appcache」 文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像 cookie 一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p>\n<h2 id=\"Manifest-的特点\"><a href=\"#Manifest-的特点\" class=\"headerlink\" title=\"Manifest 的特点\"></a>Manifest 的特点</h2><ol>\n<li>离线浏览：用户可以在离线状态下浏览网站内容。</li>\n<li>更快的速度： 因为数据被存储在本地，所以速度会更快.</li>\n<li>减轻服务器的负载：浏览器只会下载在服务器上发生改变的资源。</li>\n</ol>\n<h2 id=\"Manifest-使用方式\"><a href=\"#Manifest-使用方式\" class=\"headerlink\" title=\"Manifest 使用方式\"></a>Manifest 使用方式</h2><ol>\n<li>创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"index.manifest\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在 cache.manifest 文件中编写需要离线存储的资源：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">CACHE MANIFEST</span><br><span class=\"line\">    #v0.11</span><br><span class=\"line\">    CACHE:</span><br><span class=\"line\">    js&#x2F;app.js</span><br><span class=\"line\">    css&#x2F;style.css</span><br><span class=\"line\">    NETWORK:</span><br><span class=\"line\">    resourse&#x2F;logo.png</span><br><span class=\"line\">    FALLBACK:</span><br><span class=\"line\">    &#x2F; &#x2F;offline.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-CACHE：（必须）\"><a href=\"#1-CACHE：（必须）\" class=\"headerlink\" title=\"1. CACHE：（必须）\"></a>1. CACHE：（必须）</h3><h3 id=\"2-NETWORK\"><a href=\"#2-NETWORK\" class=\"headerlink\" title=\"2. NETWORK\"></a>2. NETWORK</h3><h3 id=\"3-FALLBACK\"><a href=\"#3-FALLBACK\" class=\"headerlink\" title=\"3. FALLBACK\"></a>3. FALLBACK</h3><p><font color=\"red\">在离线状态时，操作 window.applicationCache 进行离线缓存的操作。</font></p>\n<h2 id=\"如何更新缓存\"><a href=\"#如何更新缓存\" class=\"headerlink\" title=\"如何更新缓存\"></a>如何更新缓存</h2><ul>\n<li>更新 manifest 件</li>\n<li>通过 JavaScript 操作</li>\n<li>清除浏览器缓存</li>\n</ul>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ul>\n<li>浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</li>\n<li>如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。</li>\n<li>引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。</li>\n<li>FALLBACK 中的资源必须和 manifest 文件同源。</li>\n<li>当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</li>\n<li>站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。</li>\n<li>当 manifest 文件发生改变时，资源请求本身也会触发更新。</li>\n</ul>\n<h2 id=\"浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\"><a href=\"#浏览器是如何对-HTML5-的离线储存资源进行管理和加载？\" class=\"headerlink\" title=\"浏览器是如何对 HTML5 的离线储存资源进行管理和加载？\"></a>浏览器是如何对 HTML5 的离线储存资源进行管理和加载？</h2><ol>\n<li><p>在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件。</p>\n<ul>\n<li>如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。</li>\n<li>如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。<br><font color=\"red\">思考题：在更新资源的时候，页面会更新并且闪烁吗？</font></li>\n</ul>\n</li>\n<li><p>离线的情况下，浏览器会直接使用离线存储的资源。</p>\n</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"前端安全","url":"http://jocolorful.com/2019/03/29/前端-安全篇/","content":"<h1 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h1><a id=\"more\"></a>\n\n<h2 id=\"XSS-（Cross-Site-Script）跨站脚本攻击\"><a href=\"#XSS-（Cross-Site-Script）跨站脚本攻击\" class=\"headerlink\" title=\"XSS （Cross Site Script）跨站脚本攻击\"></a>XSS （Cross Site Script）跨站脚本攻击</h2><p>(Cascading Style Sheets, CSS)</p>\n<ol>\n<li><p>原理： 通过篡改网页，插入恶意脚本。从用户浏览网页时开始，控制用户浏览器。XSS 成功的条件：向页面注入恶意脚本；这些恶意脚本能够执行。</p>\n</li>\n<li><p>类型：</p>\n<ol>\n<li><p>反射型，诱导用户去访问一个包含恶意代码的UI了，这段恶意代码会直接在受害者主机上的浏览器执行。一次性的。前端发送恶意脚本，后端不做任何处理返回前端</p>\n<ul>\n<li>用户输入内容不包含特殊字符</li>\n<li>特殊字符转意 (小明转义URL的case，特殊字符转化为HTML实体)</li>\n<li>a 标签根据实际情况: 禁止掉：”javascript:” 、链接、非法 scheme 等</li>\n</ul>\n</li>\n<li><p>存储型XSS：把攻击存放在服务端。发表了文章之类的，加入了代码。如果过滤不严格，就会存在服务器端。</p>\n</li>\n<li><p>DOM-base型：DOM XSS 是由于浏览器解析机制导致的漏洞，服务器不参与，而存储型与反射型都需要服务器响应参与，反射型的一种。避免一些重定向的操作。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"HTTP-劫持\"><a href=\"#HTTP-劫持\" class=\"headerlink\" title=\"HTTP 劫持\"></a>HTTP 劫持</h2><p>运营商HTTP劫持，当我们使用HTTP请求请求一个网站页面的时候，网络运营商会在正常的数据流中插入精心设计的网络数据报文，让客户端（通常是浏览器）展示“错误”的数据，通常是一些弹窗，宣传性广告或者直接显示某网站的内容，大家应该都有遇到过。</p>\n<h2 id=\"DNS-劫持\"><a href=\"#DNS-劫持\" class=\"headerlink\" title=\"DNS 劫持\"></a>DNS 劫持</h2><p>重定向</p>\n<h2 id=\"CSRF-跨站请求伪造\"><a href=\"#CSRF-跨站请求伪造\" class=\"headerlink\" title=\"CSRF(跨站请求伪造)\"></a>CSRF(跨站请求伪造)</h2><p>维基百科举的例子：银行转账 image表现<br>refer头部<br>增加token校验</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"HTML 必知必会","url":"http://jocolorful.com/2019/02/27/前端-html/","content":"<h2 id=\"Doctype作用？标准模式与兼容模式各有什么区别\"><a href=\"#Doctype作用？标准模式与兼容模式各有什么区别\" class=\"headerlink\" title=\"Doctype作用？标准模式与兼容模式各有什么区别?\"></a>Doctype作用？标准模式与兼容模式各有什么区别?</h2><ul>\n<li><p><code>&lt;!DOCTYPE&gt;</code> 声明位于 HTML 文档中的第一行，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。<code>&lt;!DOCTYPE&gt;</code>不存在或格式不正确会导致文档以兼容模式呈现。</p>\n</li>\n<li><p>标准模式的排版和 JS 运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作。</p>\n</li>\n</ul>\n<h2 id=\"渐进增强、优雅降级\"><a href=\"#渐进增强、优雅降级\" class=\"headerlink\" title=\"渐进增强、优雅降级\"></a>渐进增强、优雅降级</h2><ul>\n<li>渐进增强：一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</li>\n<li>优雅降级：一开始就构建站点的完整功能，然后针对浏览器测试和修复。</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\"><a href=\"#HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？\" class=\"headerlink\" title=\"HTML5 为什么只需要写&lt;!DOCTYPE HTML&gt;？\"></a>HTML5 为什么只需要写<code>&lt;!DOCTYPE HTML&gt;</code>？</h2><ul>\n<li>HTML5 不基于 SGML（标准通用标记语言），因此不需要对 DTD 进行引用，但是需要 doctype 来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；</li>\n<li>HTML4.01 基于 SGML，所以需要对 DTD 进行引用，才能告知浏览器文档所使用的文档类型。</li>\n</ul>\n<h2 id=\"行内元素、块级元素\"><a href=\"#行内元素、块级元素\" class=\"headerlink\" title=\"行内元素、块级元素\"></a>行内元素、块级元素</h2><ul>\n<li>行内元素会在一条直线上排列（默认宽度只与内容有关），都是同一行的，水平方向排列；</li>\n<li>块级元素各占据一行（默认宽度是它本身父容器的 100% 和父元素的宽度一致，与内容无关），垂直方向排列。块级元素从新行开始，结束接着一个断行；</li>\n<li>块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素，只能包含文本或者其它行内元素；</li>\n<li>行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置 width、height无效(可以设置 line-height)，margin、padding上下无效。</li>\n</ul>\n<h2 id=\"页面导入样式时，使用-link-和-import-有什么区别？\"><a href=\"#页面导入样式时，使用-link-和-import-有什么区别？\" class=\"headerlink\" title=\"页面导入样式时，使用 link 和 @import 有什么区别？\"></a>页面导入样式时，使用 <code>link</code> 和 <code>@import</code> 有什么区别？</h2><ul>\n<li><code>link</code>属于 XHTML 标签，除了加载 CSS 外，还能用于定义 RSS, 定义 rel 连接属性等作用；而 <code>@import</code> 是 CSS 提供的，只能用于加载CSS；</li>\n<li>页面被加载的时，<code>link</code> 会同时被加载，而 <code>@import</code> 引用的 CSS 会等到页面被加载完再加载；</li>\n<li><code>@import</code>是 CSS2.1 提出的，只在 IE5 以上才能被识别，而 <code>link</code>  是 XHTML 标签，无兼容问题；</li>\n<li><code>link</code> 支持使用 JS 控制 DOM 去改变样式，而 <code>@import</code>不支持。</li>\n</ul>\n<h2 id=\"对浏览器内核的理解\"><a href=\"#对浏览器内核的理解\" class=\"headerlink\" title=\"对浏览器内核的理解\"></a>对浏览器内核的理解</h2><ul>\n<li>渲染引擎(layout engineer或Rendering Engine)和 JS 引擎；</li>\n<li>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核；</li>\n<li>JS引擎则：解析和执行 Javascript 来实现网页的动态效果。</li>\n</ul>\n<h2 id=\"iframe-有那些缺点？\"><a href=\"#iframe-有那些缺点？\" class=\"headerlink\" title=\"iframe 有那些缺点？\"></a>iframe 有那些缺点？</h2><ul>\n<li>iframe 会阻塞主页面的 onLoad 事件；</li>\n<li>搜索引擎的检索程序无法解读这种页面，不利于 SEO；</li>\n<li>iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载；</li>\n<li>如果需要使用 iframe，最好是通过 Javascript 动态给 iframe 添加 src 属性值，这样可以绕开以上问题。</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"事件循环","url":"http://jocolorful.com/2019/01/30/前端-Node/","content":"<blockquote>\n<p>Event Loop</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h1><h2 id=\"为什么是单线程\"><a href=\"#为什么是单线程\" class=\"headerlink\" title=\"为什么是单线程\"></a>为什么是单线程</h2><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>解决单线程的一些问题</p>\n<h2 id=\"任务\"><a href=\"#任务\" class=\"headerlink\" title=\"任务\"></a>任务</h2><p>单线程意味着，所有的任务都需要排队</p>\n<ul>\n<li><p>同步任务</p>\n</li>\n<li><p>异步任务,进入任务队列</p>\n<ul>\n<li><p>所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p>\n</li>\n<li><p>主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p>\n</li>\n<li><p>一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p>\n</li>\n<li><p>主线程不断重复上面的第三步。</p>\n<p>只要主线程空了，就会去读取”任务队列”，这就是JavaScript的运行机制。这个过程会不断重复。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事件和回调函数\"><a href=\"#事件和回调函数\" class=\"headerlink\" title=\"事件和回调函数\"></a>事件和回调函数</h2><ul>\n<li>所谓”回调函数”（callback），就是那些会被主线程挂起来的代码。异步任务必须指定回调函数，当主线程开始执行异步任务，就是执行对应的回调函数。</li>\n</ul>\n<h2 id=\"Event-Loop-1\"><a href=\"#Event-Loop-1\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h2><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</p>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li>process.nextTick和setImmediate。<ul>\n<li>process.nextTick: 指定的任务总是发生在所有异步任务之前</li>\n<li>setImmediate方法则是在当前”任务队列”的尾部添加事件-&gt;</li>\n</ul>\n</li>\n</ul>\n<p>简言之就是JS只有一个主线程，主线程执行完执行栈的任务后去检查异步的任务队列，如果异步事件触发，则将其加到主线程的执行栈。</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"CSS - BFC","url":"http://jocolorful.com/2019/01/29/CSS-BFC/","content":"<h1 id=\"BFC-概念\"><a href=\"#BFC-概念\" class=\"headerlink\" title=\"BFC 概念\"></a>BFC 概念</h1><p>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其<font  color=\"red\">子元素</font>将如何定位，以及<font  color=\"red\">和其他元素</font>的关系和相互作用。</p>\n<a id=\"more\"></a>\n\n<p>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</p>\n<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>\n<h1 id=\"触发-BFC\"><a href=\"#触发-BFC\" class=\"headerlink\" title=\"触发 BFC\"></a>触发 BFC</h1><p>只要元素满足下面任一条件即可触发 BFC 特性：</p>\n<ul>\n<li>body 根元素</li>\n<li>浮动元素：float 除 none 以外的值</li>\n<li>绝对定位元素：position (absolute、fixed)</li>\n<li>display 为 inline-block、table-cells、flex</li>\n<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>\n</ul>\n<h1 id=\"BFC-特性及应用\"><a href=\"#BFC-特性及应用\" class=\"headerlink\" title=\"BFC 特性及应用\"></a>BFC 特性及应用</h1><ul>\n<li><font  color=\"red\">同一个 BFC </font>下外边距会发生折叠</li>\n<li>BFC 可以包含浮动的元素（清除浮动）overflow: hidden</li>\n<li>BFC 可以阻止元素被浮动元素覆盖</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"令人迷茫的 CSS 单位","url":"http://jocolorful.com/2019/01/29/CSS-令人迷茫的px/","content":"<h1 id=\"物理像素（DP-Device-Pixels）\"><a href=\"#物理像素（DP-Device-Pixels）\" class=\"headerlink\" title=\"物理像素（DP Device Pixels）\"></a>物理像素（DP Device Pixels）</h1><p>例如 iPhone5 的分辨率是 640 x 1136px，代表屏幕由 640行 * 1136列像素点组成。</p>\n<h1 id=\"CSS-像素-逻辑像素\"><a href=\"#CSS-像素-逻辑像素\" class=\"headerlink\" title=\"CSS 像素 (逻辑像素)\"></a>CSS 像素 (逻辑像素)</h1><p>桌面浏览器的 100% 缩放情况下，CSS 的 1 个像素往往都是对应着电脑屏幕的 1 个物理像素，会让你误以为 CSS 里的 1px 就是实际屏幕像素。</p>\n<a id=\"more\"></a>\n\n<p>小结：用户的缩放比会影响单位CSS像素点对应的实际物理像素的多少。看到这里就应该知道，<font color=\"red\">CSS 像素只是一个相对单位，与物理像素并不总是等价的。</font>CSS 中的 1px 并不是总代表设备像素上的 1px，尤其是在移动设备上。</p>\n<h1 id=\"像素密度-PPI，Pixels-Per-Inch\"><a href=\"#像素密度-PPI，Pixels-Per-Inch\" class=\"headerlink\" title=\"像素密度(PPI，Pixels Per Inch)\"></a>像素密度(PPI，Pixels Per Inch)</h1><p>$\\sqrt{X平方+Y平方}$ / 尺寸</p>\n<h1 id=\"逻辑像素-dp，pt\"><a href=\"#逻辑像素-dp，pt\" class=\"headerlink\" title=\"逻辑像素 (dp，pt)\"></a>逻辑像素 (dp，pt)</h1><p>为了抹去高密度分辨率屏幕(高清屏)所带来的适配问题，iOS 与 Android 两个平台分别提出了 pt（point）与 dp(device-independent pixel 两个单位。他们的名称不一样但是意义是一样的。</p>\n<p>以 iPhone 为例：例如将 4/4s 的逻辑像素设定为 320 x 480pt（实际像素:640x960px），以物理屏幕左上角为原点，横向 X轴 320pt，纵向 Y轴 480pt。<font color=\"red\">所以 PPI 越高，1pt 的所覆盖的物理像素就越多。</font></p>\n<h1 id=\"设备像素比（DPR，Device-Pixel-Ratio）\"><a href=\"#设备像素比（DPR，Device-Pixel-Ratio）\" class=\"headerlink\" title=\"设备像素比（DPR，Device Pixel Ratio）\"></a>设备像素比（DPR，Device Pixel Ratio）</h1><blockquote>\n<p>设备像素比 ＝ 物理像素 / 设备独立像素</p>\n</blockquote>\n<p>window.devicePixelRatio</p>\n<p>iPhone6 的设备宽度和高度为 375pt * 667pt，可以理解为设备的独立像素；<br>而其 dpr为2，根据上面公式，我们可以很轻松得知其物理像素为750pt * 1334pt。</p>\n<p>之前我们已经介绍了物理像素与逻辑像素的概念，就可以很容易推导出设备像素比的公式了<br>DRP = 物理像素/dp或pt</p>\n<p>1倍：1pt=1dp=1px（iPhone 3GS）<br>2倍：1pt=1dp=2px（iPhone 4s/5/6）<br>3倍：1pt=1dp=3px（iPhone 6 plus）</p>\n<p><a href=\"https://github.com/jawil/blog/issues/21\" target=\"_blank\" rel=\"noopener\">https://github.com/jawil/blog/issues/21</a></p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"HTTPS 使用与原理","url":"http://jocolorful.com/2019/01/29/前端-Https/","content":"<h1 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h1><p>Http 和 TCP 之间多了一层(SSL/TLS)</p>\n<a id=\"more\"></a>\n<h1 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h1><h2 id=\"对称加密\"><a href=\"#对称加密\" class=\"headerlink\" title=\"对称加密\"></a>对称加密</h2><p>将加密的 内容 + 钥匙 都发送给对方，如：（DES/AES）</p>\n<h2 id=\"非对称加密\"><a href=\"#非对称加密\" class=\"headerlink\" title=\"非对称加密\"></a>非对称加密</h2><p>生成一对密钥 (k1, k2)，公/私钥匙<br>凡是 k1 加密的数据，k1 自身不能解密，而需要 k2 才能解密；<br>凡是 k2 加密的数据，k2 不能解密，需要 k1 才能解密。<br>如：(RSA、DSA)</p>\n<h2 id=\"散列加密\"><a href=\"#散列加密\" class=\"headerlink\" title=\"散列加密\"></a>散列加密</h2><p>SHA-1、MD5 (128 bit)<br>HTTPS把对称加密、非对称加密和 CA 结合起来以保证数据安全。如果想对对称加密和非对称加密以及 SSL/TLS 要更多了解可以参考下面两篇文章：</p>\n<h2 id=\"CA-证书\"><a href=\"#CA-证书\" class=\"headerlink\" title=\"CA 证书\"></a>CA 证书</h2><p>解决公钥、godaddy</p>\n<h1 id=\"HTTP-延迟因素\"><a href=\"#HTTP-延迟因素\" class=\"headerlink\" title=\"HTTP 延迟因素\"></a>HTTP 延迟因素</h1><p>影响 Http 的因素主要有两个：</p>\n<h2 id=\"带宽\"><a href=\"#带宽\" class=\"headerlink\" title=\"带宽\"></a>带宽</h2><p>这个是无法解决的</p>\n<h2 id=\"延迟\"><a href=\"#延迟\" class=\"headerlink\" title=\"延迟\"></a>延迟</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Head-of-line_blocking\" target=\"_blank\" rel=\"noopener\">HOL 浏览器的阻塞</a>，基于同一个域名，超过最大请求连接个数，请求会被阻塞。<ol>\n<li>HTTP/1.1 中 HOL 阻塞的一种形式是当浏览器中允许的<font color=\"red\">并行请求数量用完时</font>，后续请求需要等待前一个请求完成。</li>\n<li>HTTP/2 通过<font color=\"red\">多路复用</font>解决了这个问题，在应用层消除了 HOL 阻塞，但在传输 (TCP) 层仍然存在 HOL。</li>\n<li>HTTP/3 使用 QUIC 而不是 TCP 它消除了传输层中的 HOL 阻塞。</li>\n</ol>\n</li>\n<li>DNS 的查询</li>\n<li>TCP 的建立：HTTP（1/2）是基于 TCP 协议的</li>\n</ul>\n<h1 id=\"HTTP1-1\"><a href=\"#HTTP1-1\" class=\"headerlink\" title=\"HTTP1.1\"></a>HTTP1.1</h1><h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><ol>\n<li>HTTP1.0：If-Modified-Since，Expires</li>\n<li>HTTP1.1：Etag（基于 lIf-Modified ms 级别的补充），If-Unmodified-Since, If-Match, If-None-Match</li>\n</ol>\n<h2 id=\"带宽优化以及网络连接的使用\"><a href=\"#带宽优化以及网络连接的使用\" class=\"headerlink\" title=\"带宽优化以及网络连接的使用\"></a>带宽优化以及网络连接的使用</h2><p>请求头引入range头域。它允许只请求资源的某个部分.即返回码是206（Partial Content）</p>\n<h2 id=\"错误通知的管理\"><a href=\"#错误通知的管理\" class=\"headerlink\" title=\"错误通知的管理\"></a>错误通知的管理</h2><ol>\n<li>409（Conflict）表示请求的资源与资源的当前状态发生冲突。</li>\n<li>410（Gone）表示服务器上的某个资源被永久性的删除。</li>\n</ol>\n<h2 id=\"Host处理：\"><a href=\"#Host处理：\" class=\"headerlink\" title=\"Host处理：\"></a>Host处理：</h2><p>在 HTTP1.0 中认为每台服务器都绑定唯一的IP地址，因此，请求消息中的 URL 并没有（hostname）<br>虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers）共享一个IP地址。HTTP1.1 的请求消息和响应消息都应支持 Host 头域，请求消息没有 Host 头域会报告一个错误（400 Bad Request）。</p>\n<h2 id=\"长连接（PersistentConnection）Pipelining。\"><a href=\"#长连接（PersistentConnection）Pipelining。\" class=\"headerlink\" title=\"长连接（PersistentConnection）Pipelining。\"></a>长连接（PersistentConnection）Pipelining。</h2><p>一个 TCP 的连接，允许建立多个 Http 和请求和响应，减少了建立和关闭的消耗和延迟，默认开启 Connection：keep-alive。弥补 Http1.0 每次请求都要重新建立新连接的缺点。</p>\n<h2 id=\"HTTP1-0-和-1-1-现存的一些问题\"><a href=\"#HTTP1-0-和-1-1-现存的一些问题\" class=\"headerlink\" title=\"HTTP1.0 和 1.1 现存的一些问题\"></a>HTTP1.0 和 1.1 现存的一些问题</h2><ol>\n<li>明文传输</li>\n<li>keep-alive 使用过多会给服务器增加压力，单个文件不断被请求的服务，keep-alive 可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。</li>\n<li>header 内容过大</li>\n</ol>\n<h1 id=\"SPDY：HTTP1-x的优化\"><a href=\"#SPDY：HTTP1-x的优化\" class=\"headerlink\" title=\"SPDY：HTTP1.x的优化\"></a>SPDY：HTTP1.x的优化</h1><h2 id=\"多路复用（Multiplexing）\"><a href=\"#多路复用（Multiplexing）\" class=\"headerlink\" title=\"多路复用（Multiplexing）\"></a>多路复用（Multiplexing）</h2><p>二进制帧层（header + 数据体）多个请求 stream 共享一个tcp连接的方式，每个 stream 需携带一个 id（从应用层解决 HOL 问题，但 是TCP 层面没有解决，多个 stream 是串行）</p>\n<h2 id=\"请求优先级（request-Prioritization）\"><a href=\"#请求优先级（request-Prioritization）\" class=\"headerlink\" title=\"请求优先级（request Prioritization）\"></a>请求优先级（request Prioritization）</h2><p>多路复用：关键请求被阻塞。每个 request 设置优先级，比如浏览器加载首页，首页的 html 内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，保证用户看到网页内容。<br><a href=\"https://mp.weixin.qq.com/s/XKYWFzgiFizhTXdv2WmHlg\" target=\"_blank\" rel=\"noopener\">Web 性能优化：控制关键请求的优先级</a></p>\n<h2 id=\"Header压缩：（Compression）\"><a href=\"#Header压缩：（Compression）\" class=\"headerlink\" title=\"Header压缩：（Compression）\"></a>Header压缩：（Compression）</h2><p>前面提到 HTTP1.x 的 header 很多时候都是重复多余的选择合适的压缩算法可以减小包的大小和数量。</p>\n<h2 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h2><p>必须使用HTTPS的加密协议传输，大大提高了传输数据的可靠性。</p>\n<h2 id=\"服务端推送（Server-Push）\"><a href=\"#服务端推送（Server-Push）\" class=\"headerlink\" title=\"服务端推送（Server Push）\"></a>服务端推送（Server Push）</h2><p>采用了SPDY的网页，例如我的网页有一个 sytle.css 的请求，在客户端收到 sytle.css 数据的同时，服务端会将 sytle.js 的文件推送给客户端，当客户端再次尝试获取 sytle.js 时就可以直接从缓存中获取到，不用再发请求了。</p>\n<h1 id=\"HTTP2-0-的升级改造\"><a href=\"#HTTP2-0-的升级改造\" class=\"headerlink\" title=\"HTTP2.0 的升级改造\"></a>HTTP2.0 的升级改造</h1><p>HTTP2 多个请求可同时在一个连接上并行执行。某个请求任务耗时严重，不会影响到其它连接的正常执行；</p>\n<p>当你的网站已经升级HTTPS之后，那么升级HTTP2.0就简单很多。如果你使用NGINX，只要在配置文件中启动相应的协议就可以了<br>可以参考NGINX白皮书，<a href=\"https://www.nginx.com/blog/nginx-1-9-5/\" target=\"_blank\" rel=\"noopener\">NGINX 配置 HTTP2.0官方指南</a></p>\n<h2 id=\"头部压缩\"><a href=\"#头部压缩\" class=\"headerlink\" title=\"头部压缩\"></a>头部压缩</h2><p>HTT2：HPACK<br>SPDY：DEFLATE</p>\n<h2 id=\"安全-1\"><a href=\"#安全-1\" class=\"headerlink\" title=\"安全\"></a>安全</h2><p>非必需的 HTTPS的。主流浏览器：chrome，firefox 表示还是只支持基于 TLS 部署的 HTTP2.0协议。所以要想升级成 HTTP2.0 还是先升级 HTTPS 为好。</p>\n<h1 id=\"HTTP3（OUIC）\"><a href=\"#HTTP3（OUIC）\" class=\"headerlink\" title=\"HTTP3（OUIC）\"></a>HTTP3（OUIC）</h1><ol>\n<li>流量控制、传输可靠性功能</li>\n<li>集成 TLS 加密功能</li>\n<li>多路复用</li>\n<li>快速握手</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"Web 的存储","url":"http://jocolorful.com/2019/01/29/前端-Web存储/","content":"<h1 id=\"一、客户端-cookie\"><a href=\"#一、客户端-cookie\" class=\"headerlink\" title=\"一、客户端 cookie\"></a>一、客户端 cookie</h1><a id=\"more\"></a>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义:\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/cookies\" target=\"_blank\" rel=\"noopener\">定义:</a></h2><p>cookie 是小量信息，由网络服务器发送出来以存储在网络浏览器上，从而下次这位独一无二的访客又回到该网络服务器时，可从该浏览器读回此信息。浏览器可以记住这位访客的特定信息，如上次访问的位置、花费的时间或用户首选项（如样式表）。cookie 是个存储在浏览器目录的文本文件，当浏览器运行时，存储在 RAM 中。一旦你从该网站或网络服务器退出，cookie 也可存储在计算机的硬驱上。当访客结束其浏览器对话时，即终止的所有 cookie。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项:\"></a>注意事项:</h2><ol>\n<li>通过良好的编程，控制保存在 cookie 中的 session 对象的大小；</li>\n<li>通过加密和安全传输技术（SSL），减少 cookie 被破解的可能性；</li>\n<li>只在 cookie 中存放不敏感数据，即使被盗也不会有重大损失；</li>\n<li>控制 cookie 的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的 cookie。</li>\n</ol>\n<h2 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制:\"></a>限制:</h2><ol>\n<li>数量和长度的限制：每个 domain 最多只能有 20 条 cookie，每个 cookie 长度不能超过 4KB，否则会被截掉；</li>\n<li>安全性问题：如果 cookie 被人拦截，他只要原样转发 cookie 就可以达到目的了；</li>\n<li>隐私问题：隐私浏览模式，浏览器关闭之后，期间所有的  cookie 都消失。</li>\n</ol>\n<h1 id=\"二、服务器端-session\"><a href=\"#二、服务器端-session\" class=\"headerlink\" title=\"二、服务器端 session\"></a>二、服务器端 session</h1><p>session：称为「会话控制」。session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 session 对象。当会话过期或被放弃后，服务器将终止该会话。</p>\n<p>因为很多第三方可以获取到这个 cookie，服务器无法判断 cookie 是不是真实用户发送的，所以 cookie 可以伪造，伪造 cookie 实现登录进行一些 HTTP 请求。如果从安全性上来讲，session 比 cookie 安全性稍微高一些，我们先要知道一个概念– sessionID：</p>\n<h2 id=\"sessionID-定义\"><a href=\"#sessionID-定义\" class=\"headerlink\" title=\"sessionID 定义\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/sessions\" target=\"_blank\" rel=\"noopener\">sessionID 定义</a></h2><p>客户端第一次请求服务器的时候，服务器会为客户端创建一个 session，并将通过特殊算法算出一个 session 的 ID，下次请求资源时（session 未过期），浏览器会将 sessionID(实质是 cookie)放置到请求头中，服务器接收到请求后就得到该请求的 sessionID，服务器找到该 ID 的 session 返还给请求者使用。</p>\n<h1 id=\"三、Webstorage\"><a href=\"#三、Webstorage\" class=\"headerlink\" title=\"三、Webstorage\"></a>三、Webstorage</h1><h2 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义:\"></a><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\" target=\"_blank\" rel=\"noopener\">定义:</a></h2><p>使用 HTML5 可以在本地存储用户的浏览数据。早些时候，本地存储使用的是 cookie。但是 Web 存储需要更加的安全与快速，这些数据不会被保存在服务器上，但是这些数据只用于用户请求网站数据上。它也可以存储大量的数据，而不影响网站的性能。数据以 键/值 对存在, Web 网页的数据只允许该网页访问使用。</p>\n<ul>\n<li>提供一种在 C sookie 之外存储会话数据的途径。</li>\n<li>提供一种存储大量可以跨会话存在的数据的机制。</li>\n</ul>\n<h2 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h2><p>localStorage的生命周期是永久性的。假若使用 localStorage 存储数据，即使关闭浏览器，也不会让数据消失，除非主动的去删除数据，使用的方法如上所示。localStorage有length属性，可以查看其有多少条记录的数据。</p>\n<h2 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h2><p>sessionStorage 的生命周期是在浏览器关闭前。也就是说，在整个浏览器未关闭前，其数据一直都是存在的。sessionStorage 也有length属性，其基本的判断和使用方法和 localStorage 的使用是一致的。需要注意的有以下几点：</p>\n<ol>\n<li>页面刷新不会消除数据；</li>\n<li>只有在当前页面打开的链接，才可以访 sessionStorage 的数据；</li>\n<li>使用 window.open 打开页面和改变 localtion.href 方式都可以获取到 sessionStorage 内部的数据。</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"V8 的内存管理","url":"http://jocolorful.com/2019/01/29/前端-内存/","content":"<h1 id=\"一、内存是什么？\"><a href=\"#一、内存是什么？\" class=\"headerlink\" title=\"一、内存是什么？\"></a>一、内存是什么？</h1><p><strong>内存(Memory)</strong>是<a href=\"https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338?fromModule=lemma_inlink\" target=\"_blank\" rel=\"noopener\">计算机</a>的重要部件，也称<a href=\"https://baike.baidu.com/item/%E5%86%85%E5%AD%98%E5%82%A8%E5%99%A8/834392?fromModule=lemma_inlink\" target=\"_blank\" rel=\"noopener\">内存储器</a>和<a href=\"https://baike.baidu.com/item/%E4%B8%BB%E5%AD%98%E5%82%A8%E5%99%A8/10635399?fromModule=lemma_inlink\" target=\"_blank\" rel=\"noopener\">主存储器</a>，它用于暂时存放 CPU中 的运算数据，以及与<a href=\"https://baike.baidu.com/item/%E7%A1%AC%E7%9B%98/159825?fromModule=lemma_inlink\" target=\"_blank\" rel=\"noopener\">硬盘</a>等<a href=\"https://baike.baidu.com/item/%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8/4843180?fromModule=lemma_inlink\" target=\"_blank\" rel=\"noopener\">外部存储器</a>交换的数据。它是<a href=\"https://baike.baidu.com/item/%E5%A4%96%E5%AD%98/2445612?fromModule=lemma_inlink\" target=\"_blank\" rel=\"noopener\">外存</a>与<a href=\"https://baike.baidu.com/item/CPU/120556?fromModule=lemma_inlink\" target=\"_blank\" rel=\"noopener\">CPU</a>进行沟通的桥梁，计算机中所有程序的运行都在内存中进行，内存性能的强弱影响计算机整体发挥的水平。只要计算机开始运行，<a href=\"https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192?fromModule=lemma_inlink\" target=\"_blank\" rel=\"noopener\">操作系统</a> 就会把需要运算的数据从内存调到 CPU 中进行运算，当运算完成，CPU 将结果传送出来。</p>\n<p>如下图，我的电脑配置是 8G、通过「活动监视器」能够查看各个应用程序的内存占用。</p>\n<p><img src=\"/images/V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/0.png\" alt=\"Untitled\"></p>\n<h1 id=\"二、V8-内存大小以及原因？\"><a href=\"#二、V8-内存大小以及原因？\" class=\"headerlink\" title=\"二、V8 内存大小以及原因？\"></a>二、V8 内存大小以及原因？</h1><p>V8 引擎在<code>64</code>位系统下最多只能使用约<code>1.4GB</code>的内存，在<code>32</code>位系统下最多只能使用约<code>0.7GB</code>的内存。在这样的限制下，必然会导致在 Node 中无法直接操作大内存对象，比如将一个<code>2GB</code>大小的文件全部读入内存进行字符串分析处理，即使物理内存高达<code>32GB</code>也无法充分利用计算机的内存资源，那么为什么会有这种限制呢？</p>\n<ol>\n<li>V8 引擎的设计之初，起初只是作为浏览器端 JavaScript 的执行环境，在浏览器端我们其实很少会遇到使用大量内存的场景，因此也就没有必要将最大内存设置得过高；</li>\n<li><code>JS单线程机制</code>：作为浏览器的脚本语言，JS 的主要用途是与用户交互以及操作 DOM，那么这也决定了其作为单线程的本质，单线程意味着执行的代码必须按顺序执行，在同一时间只能处理一个任务。试想如果 JS 是多线程的，一个线程在删除 DOM 元素的同时，另一个线程对该元素进行修改操作，那么必然会导致复杂的同步问题。既然 JS 是单线程的，那么也就意味着在 V8 执行垃圾回收时，程序中的其他各种逻辑都要进入暂停等待阶段，直到垃圾回收结束后才会再次重新执行 JS 逻辑。因此，由于 JS 的单线程机制，垃圾回收的过程阻碍主线程逻辑的执行；</li>\n<li><code>垃圾回收机制</code>：垃圾回收本身也是一件非常耗时的操作，假设 V8 的堆内存为<code>1.5G</code>，那么V8做一次小的垃圾回收需要 50ms以上，而做一次非增量式回收甚至需要 1s 以上，可见其耗时之久，而在这 1s 的时间内，浏览器一直处于等待的状态，会失去对用户的响应，如果有动画正在运行，也会造成动画卡顿掉帧的情况，严重影响应用程序的性能。因此如果内存使用过高，那么必然会导致垃圾回收的过程缓慢，也就会导致主线程的等待时间越长，浏览器也就越长时间得不到响应。</li>\n</ol>\n<p>基于以上，V8 引擎为了减少对应用的性能造成的影响，采用了一种比较粗暴的手段，那就是直接限制堆内存的大小，毕竟在浏览器端一般也不会遇到需要操作几个 G 内存这样的场景。但是在Node 端，涉及到的 <code>I/O</code> 操作可能会比浏览器端更加复杂多样，因此更有可能出现内存溢出的情况。不过 V8 为我们提供了可配置项来让我们手动地调整内存大小， Node 初始化的时候进行配置，我们可以通过如下方式来手动设置：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置新生代内存中单个半空间的内存最小值，单位MB</span></span><br><span class=\"line\">node --min-semi-space-size=<span class=\"number\">1024</span> xxx.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置新生代内存中单个半空间的内存最大值，单位MB</span></span><br><span class=\"line\">node --max-semi-space-size=<span class=\"number\">1024</span> xxx.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置老生代内存最大值，单位MB</span></span><br><span class=\"line\">node --max-old-space-size=<span class=\"number\">2048</span> xxx.js</span><br></pre></td></tr></table></figure>\n\n<p>通过以上方法便可以手动放宽 V8 引擎所使用的内存限制，同时node也为我们提供了<code>process.memoryUsage()</code>方法来让我们可以查看当前 Node 进程所占用的实际内存大小。</p>\n<h1 id=\"三、V8-内存分配的时机？\"><a href=\"#三、V8-内存分配的时机？\" class=\"headerlink\" title=\"三、V8 内存分配的时机？\"></a>三、V8 内存分配的时机？</h1><figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; process.memoryUsage()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  rss: <span class=\"number\">27508736</span>,      <span class=\"comment\">// 表示驻留集大小，是给这个 Node 进程分配了多少物理内存，这些物理内存中包含堆，栈和代码片段。对象，闭包等存于堆内存，变量存于栈内存，实际的JavaScript源代码存于代码段内存。使用Worker线程时，rss将会是一个对整个进程有效的值，而其他字段则只针对当前线程。</span></span><br><span class=\"line\">  heapTotal: <span class=\"number\">6668288</span>, <span class=\"comment\">//表示V8当前申请到的堆内存总大小。</span></span><br><span class=\"line\">  heapUsed: <span class=\"number\">4847376</span>,  <span class=\"comment\">// 表示当前内存使用量</span></span><br><span class=\"line\">  external: <span class=\"number\">900930</span>,   <span class=\"comment\">// 表示 V8 内部的 C++ 对象所占用的内存。</span></span><br><span class=\"line\">  arrayBuffers: <span class=\"number\">11158</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>值的初始化</li>\n<li>通过函数调用分配内存</li>\n</ol>\n<h1 id=\"四、内存与-GC-理论知识\"><a href=\"#四、内存与-GC-理论知识\" class=\"headerlink\" title=\"四、内存与 GC 理论知识\"></a>四、内存与 GC 理论知识</h1><h2 id=\"4-1-内存结构概览\"><a href=\"#4-1-内存结构概览\" class=\"headerlink\" title=\"4.1 内存结构概览\"></a>4.1 内存结构概览</h2><p>V8的垃圾回收策略主要是基于<code>分代式垃圾回收机制</code>，其根据<strong>对象的存活时间</strong>将内存的垃圾回收进行不同的分代，然后对不同的分代采用不同的垃圾回收算法。</p>\n<p>在 V8 引擎的堆结构组成中，一共包含以下几个部分， 回收的过程主要出现在<code>新生代</code>和<code>老生代</code></p>\n<ul>\n<li><code>新生代(new_space)</code>：大多数的对象开始都会被分配在这里，这个区域相对较小但是垃圾回收特别频繁，该区域被分为两半：一半用来分配内存，另一半用于在垃圾回收时将需要保留的对象复制过来；</li>\n<li><code>老生代(old_space)</code>：新生代中的对象在存活一段时间后就会被转移到老生代内存区，相对于新生代该内存区域的<strong>垃圾回收频率较低</strong>。老生代又分为<code>老生代指针区</code>和<code>老生代数据区</code>，前者包含大多数可能存在指向其他对象的指针的对象，后者只保存原始数据对象，这些对象没有指向其他对象的指针；</li>\n<li>大对象区(large_object_space)：存放体积超越其他区域大小的对象，每个对象都会有自己的内存，垃圾回收不会移动大对象区；</li>\n<li>代码区(code_space)：代码对象，会被分配在这里，唯一拥有执行权限的内存区域；</li>\n<li>map区(map_space)：存放 Cell 和 Map，每个区域都是存放相同大小的元素，结构简单。</li>\n</ul>\n<p><img src=\"/images/V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/1.png\" alt=\"Untitled\"></p>\n<p>上图中的带斜纹的区域代表暂未使用的内存，新生代(new_space)被划分为了两个部分，其中一部分叫做inactive new space，表示暂未激活的内存区域，另一部分为激活状态。</p>\n<h2 id=\"4-2-新生代\"><a href=\"#4-2-新生代\" class=\"headerlink\" title=\"4.2 新生代\"></a>4.2 新生代</h2><p>在V8引擎的内存结构中，新生代主要用于存放存活时间较短的对象。新生代内存是由两个<code>semispace(半空间)</code>构成的，内存最大值在<code>64</code>位系统和<code>32</code>位系统上分别为<code>32MB</code>和<code>16MB</code>，在新生代的垃圾回收过程中主要采用了<code>Scavenge</code>算法。</p>\n<p><code>Scavange算法</code>将新生代堆分为两部分，分别叫<code>from-space</code> 和<code>to-space</code>，工作方式也很简单，就是将<code>from-space</code> 中存活的活动对象复制到<code>to-space</code> 中，并将这些对象的内存有序的排列起来，然后将<code>from-space</code> 中的非活动对象的内存进行释放，完成之后，将<code>from space</code> 和<code>to space</code>进行互换，这样可以使得新生代中的这两块区域可以重复利用。</p>\n<p><img src=\"/images/V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/2.png\" alt=\"Untitled\"></p>\n<p>具体步骤为以下4步：</p>\n<ol>\n<li>标记活动对象和非活动对象</li>\n<li>复制<code>from-space</code>的活动对象到<code>to-space</code>中并进行排序</li>\n<li>清除<code>from-space</code>中的非活动对象</li>\n<li>将<code>from-space</code>和<code>to-space</code>进行角色互换，以便下一次 <code>Scavenge算法</code> 垃圾回收</li>\n</ol>\n<p>通过以上流程，<code>Scavenge</code> 算法的垃圾回收过程主要就是将存活对象在<code>From</code>空间和<code>To</code>空间之间进行复制，同时完成两个空间之间的<strong>角色互换</strong>，因此该算法的缺点也比较明显，<strong>浪费了一半的内存用于复制。</strong></p>\n<h2 id=\"4-3-对象晋升\"><a href=\"#4-3-对象晋升\" class=\"headerlink\" title=\"4.3 对象晋升\"></a>4.3 <strong>对象晋升</strong></h2><p>当一个对象在经过多次复制之后依旧存活，那么它会被认为是一个生命周期较长的对象，在下一次进行垃圾回收时，该对象会被直接转移到老生代中，这种对象从新生代转移到老生代的过程我们称之为<code>晋升</code>。<br>对象晋升的条件主要有以下两个：</p>\n<ul>\n<li>对象是否经历过一次<code>Scavenge</code>算法；</li>\n<li><code>To</code>空间的内存占比是否已经超过<code>25%</code>，如果内存使用过高甚至溢出，则会影响后续对象的分配，因此超过这个限制之后对象会被直接转移到老生代来进行管理。</li>\n</ul>\n<h2 id=\"4-4-老生代\"><a href=\"#4-4-老生代\" class=\"headerlink\" title=\"4.4 老生代\"></a>4.4 <strong>老生代</strong></h2><p>在老生代中，因为管理着大量的存活对象，如果依旧使用<code>Scavenge</code>算法的话，会浪费一半的内存，因此已经不再使用<code>Scavenge</code>算法，而是采用新的算法<code>Mark-Sweep(标记清除)</code>和<code>Mark-Compact(标记整理)</code>来进行管理。</p>\n<h3 id=\"1-引用计数\"><a href=\"#1-引用计数\" class=\"headerlink\" title=\"1. 引用计数\"></a>1. 引用计数</h3><p>该算法的原理比较简单，就是看对象是否还有其他引用指向它，如果没有指向该对象的引用，则该对象会被视为垃圾并被垃圾回收器回收。但循环引用的场景下会出现一些问题：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = &#123;&#125;;</span><br><span class=\"line\">    a.a1 = b;</span><br><span class=\"line\">    b.b1 = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n\n<p>在<code>foo</code>函数执行完毕后，函数的作用域已经被销毁，作用域中包含的变量<code>a</code>和<code>b</code>本应该可以被回收，但是因为采用了<code>引用计数</code>的算法，两个变量均存在指向自身的引用，因此依旧无法被回收，导致内存泄漏。</p>\n<h3 id=\"2-标记清除\"><a href=\"#2-标记清除\" class=\"headerlink\" title=\"2. 标记清除\"></a>2. 标记清除</h3><p>因此为了<strong>避免循环引用导致的内存泄漏问题</strong>，截至2012年所有的现代浏览器均放弃了这种算法，转而采用新的<code>Mark-Sweep(标记清除)</code>和<code>Mark-Compact(标记整理)</code>算法。在上面循环引用的例子中，因为变量<code>a</code>和变量<code>b</code>无法从<code>window</code>全局对象访问到，因此无法对其进行标记，所以无法回收。</p>\n<p><code>Mark-Sweep(标记清除)</code>分为<code>标记</code>和<code>清除</code>两个阶段，在标记阶段会遍历堆中的所有对象，然后标记活着的对象，在清除阶段中，会将死亡的对象进行清除。<code>Mark-Sweep</code><strong>算法主要是通过判断某个对象是否可以被访问到，从而知道该对象是否应该被回收</strong>，具体步骤如下：</p>\n<p>垃圾回收器会在内部构建一个<code>根列表</code>，用于从根节点出发去寻找那些可以被访问到的变量。比如在JavaScript中，<code>window</code>全局对象可以看成一个根节点。然后，垃圾回收器从所有根节点出发，遍历其可以访问到的子节点，并将其标记为活动的，根节点不能到达的地方即为非活动的，将会被视为垃圾。最后，垃圾回收器将会释放所有非活动的内存块，并将其归还给操作系统。</p>\n<p><strong>以下几种情况都可以作为根节点：</strong></p>\n<ol>\n<li>全局对象</li>\n<li>本地函数的局部变量和参数</li>\n<li>当前嵌套调用链上的其他函数的变量和参数</li>\n</ol>\n<p>但是 Mark-Sweep 算法存在一个问题，就是在经历过一次标记清除后，内存空间可能会出现不连续的状态，因为我们所清理的对象的内存地址可能不是连续的，所以就会出现内存碎片的问题，导致后面如果需要分配一个大对象而空闲内存不足以分配，就会提前触发垃圾回收，而这次垃圾回收其实是没必要的，因为我们确实有很多空闲内存，只不过是不连续的。</p>\n<h3 id=\"3-标记整理\"><a href=\"#3-标记整理\" class=\"headerlink\" title=\"3. 标记整理\"></a>3. 标记整理</h3><p><strong>为了解决这种内存碎片的问题，</strong><code>Mark-Compact(标记整理)</code>算法被提了出来，该算法主要就是用来解决内存的碎片化问题的，回收过程中将死亡对象清除后，<strong>在整理的过程中，会将活动的对象往堆内存的一端进行移动，移动完成后再清理掉边界外的全部内存</strong>，我们可以用如下流程图来表示：</p>\n<p><img src=\"/images/V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/3.png\" alt=\"Untitled\"></p>\n<h1 id=\"五、全停顿\"><a href=\"#五、全停顿\" class=\"headerlink\" title=\"五、全停顿\"></a>五、全停顿</h1><p>JS 代码的运行要用到 JS 引擎，垃圾回收也要用到 JS 引擎，那如果这两者同时进行了，发生冲突了咋办呢？答案是，<code>垃圾回收优先于代码执行</code>，会先停止代码的执行，等到垃圾回收完毕，再执行JS代码。这个过程，称为<code>全停顿</code>；</p>\n<p>由于新生代空间小，并且存活对象少，再配合<code>Scavenge算法</code>，停顿时间较短。但是老生代就不一样了，某些情况活动对象比较多的时候，停顿时间就会较长，使得页面出现了<code>卡顿现象</code>。</p>\n<h2 id=\"Orinoco-优化\"><a href=\"#Orinoco-优化\" class=\"headerlink\" title=\"Orinoco 优化\"></a><strong><strong>Orinoco 优化</strong></strong></h2><h3 id=\"增量标记（Incremental-marking）\"><a href=\"#增量标记（Incremental-marking）\" class=\"headerlink\" title=\"增量标记（Incremental marking）\"></a>增量标记（<strong><strong>Incremental marking</strong></strong>）</h3><p>即将原本需要一次性遍历堆内存的操作改为增量标记的方式，<strong>先标记堆内存中的一部分对象，然后暂停，将执行权重新交给 JS 主线程</strong>，待主线程任务执行完毕后再从原来暂停标记的地方继续标记，直到标记完整个堆内存。这个理念其实有点像<code>React</code>框架中的<code>Fiber</code>架构，只有在浏览器的空闲时间才会去遍历<code>Fiber Tree</code>执行对应的任务，否则延迟执行，尽可能少地影响主线程的任务，避免应用卡顿，提升应用性能。</p>\n<h3 id=\"惰性清理-Lazy-sweeping\"><a href=\"#惰性清理-Lazy-sweeping\" class=\"headerlink\" title=\"惰性清理(Lazy sweeping)\"></a>惰性清理(Lazy sweeping)</h3><p>上面说了，增量标记只是针对<code>标记</code>阶段，而惰性清理就是针对<code>清除</code>阶段了。在增量标记之后，要进行清理非活动对象的时候，垃圾回收器发现了其实就算是不清理，剩余的空间也足以让JS代码跑起来，所以就<code>延迟了清理</code>，让JS代码先执行，或者<code>只清理部分垃圾</code>，而不清理全部。这个优化就叫做<code>惰性清理</code>。</p>\n<p>整理标记和惰性清理的出现，大大改善了<code>全停顿</code>现象。但是问题也来了：增量标记是<code>标记一点，JS运行一段</code>，那如果你前脚刚标记一个对象为活动对象，后脚JS代码就把此对象设置为非活动对象，或者反过来，前脚没有标记一个对象为活动对象，后脚JS代码就把此对象设置为活动对象。总结起来就是：标记和代码执行的穿插，有可能造成<code>对象引用改变，标记错误</code>现象。这就需要使用<code>写屏障</code>技术来记录这些引用关系的变化</p>\n<h3 id=\"并发-Concurrent\"><a href=\"#并发-Concurrent\" class=\"headerlink\" title=\"并发(Concurrent)\"></a>并发(Concurrent)</h3><p>并发式 GC 允许在在垃圾回收的同时不需要将主线程挂起，两者可以同时进行，只有在个别时候需要短暂停下来让垃圾回收器做一些特殊的操作。但是这种方式也要面对增量回收的问题，就是在垃圾回收过程中，由于 JavaScript 代码在执行，堆中的对象的引用关系随时可能会变化，所以也要进行<code>写屏障</code>操作。</p>\n<p><img src=\"/images/V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/4.png\" alt=\"Untitled\"></p>\n<h3 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a><strong><strong>并行</strong></strong></h3><p>并行式 GC 主线程和辅助线程同时执行同样的GC工作，这样可以让辅助线程来分担主线程的 GC ，使得垃圾回收所耗费的时间等于总时间除以参与的线程数量（加上一些同步开销）。</p>\n<h1 id=\"六、V8当前的垃圾回收机制\"><a href=\"#六、V8当前的垃圾回收机制\" class=\"headerlink\" title=\"六、V8当前的垃圾回收机制\"></a>六、<strong><strong>V8当前的垃圾回收机制</strong></strong></h1><p>2011年，V8应用了<code>增量标记机制</code>。直至2018年，Chrome64和Node.js V10启动<code>并发标记（Concurrent）</code>，同时在并发的基础上添加<code>并行（Parallel）技术</code>，使垃圾回收时间大幅度缩短。</p>\n<h2 id=\"副垃圾回收器\"><a href=\"#副垃圾回收器\" class=\"headerlink\" title=\"副垃圾回收器\"></a><strong><strong>副垃圾回收器</strong></strong></h2><p>V8 在新生代垃圾回收中，使用并行（parallel）机制，在整理排序阶段，也就是将活动对象从<code>from-to</code>复制到<code>space-to</code>的时候，启用多个辅助线程，并行的进行整理。由于多个线程竞争一个新生代的堆的内存资源，可能出现有某个活动对象被多个线程进行复制操作的问题，为了解决这个问题，V8 在第一个线程对活动对象进行复制并且复制完成后，都必须去维护复制这个活动对象后的指针转发地址，以便于其他协助线程可以找到该活动对象后可以判断该活动对象是否已被复制。</p>\n<p><img src=\"/images/V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/5.png\" alt=\"Untitled\"></p>\n<h2 id=\"主垃圾回收器\"><a href=\"#主垃圾回收器\" class=\"headerlink\" title=\"主垃圾回收器\"></a>主<strong><strong>垃圾回收器</strong></strong></h2><p>V8在老生代垃圾回收中，如果堆中的内存大小超过某个阈值之后，会启用并发（Concurrent）标记任务。每个辅助线程都会去追踪每个标记到的对象的指针以及对这个对象的引用，而在 JavaScript 代码执行时候，并发标记也在后台的辅助进程中进行，当堆中的某个对象指针被JavaScript代码修改的时候，写入屏障（<a href=\"https://link.segmentfault.com/?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdl.acm.org%2Fcitation.cfm%253Fid%253D2025255\" target=\"_blank\" rel=\"noopener\">write barriers</a>）技术会在辅助线程在进行并发标记的时候进行追踪。</p>\n<p>当并发标记完成或者动态分配的内存到达极限的时候，主线程会执行最终的快速标记步骤，这个时候主线程会挂起，主线程会再一次的扫描根集以确保所有的对象都完成了标记，由于辅助线程已经标记过活动对象，主线程的本次扫描只是进行 check 操作，确认完成之后，某些辅助线程会进行清理内存操作，某些辅助进程会进行内存整理操作，由于都是并发，并不会影响主线程 JavaScript 代码的执行。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ol>\n<li><a href=\"https://juejin.cn/post/6844904016325902344\" target=\"_blank\" rel=\"noopener\">一文搞懂V8引擎的垃圾回收</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000041218998\" target=\"_blank\" rel=\"noopener\">赠你13张图，助你20分钟打败了「V8垃圾回收机制」！！！</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/33816534\" target=\"_blank\" rel=\"noopener\">V8 内存浅析</a></li>\n<li><a href=\"http://newhtml.net/v8-garbage-collection/\" target=\"_blank\" rel=\"noopener\">V8 之旅：垃圾回收器</a></li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"跨域","url":"http://jocolorful.com/2019/01/29/前端-跨域篇/","content":"<h1 id=\"一-同源策略\"><a href=\"#一-同源策略\" class=\"headerlink\" title=\"一 同源策略\"></a>一 同源策略</h1><p>浏览器处于对安全方面的考虑，不允许跨域调用其他域下的资源。当 <font color=\"red\">协议，域名，端口</font>相同的时候才算是同一个域名，否则均认为需要做跨域的处理。<br>可以通过以下脚本开启一个运行跨域的浏览器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">open -n -a /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --args --user-data-dir=\"/tmp/chrome_dev_test\" --disable-web-security</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-CORS：\"><a href=\"#二-CORS：\" class=\"headerlink\" title=\"二 CORS：\"></a>二 CORS：</h1><h2 id=\"简单请求-simple-request\"><a href=\"#简单请求-simple-request\" class=\"headerlink\" title=\"简单请求(simple request)\"></a>简单请求(simple request)</h2><ol>\n<li>请求方法是三种之一：HEAD、GET、POST</li>\n<li>HTTP的头信息不超出以下几种字段：Accept、Accept-Language、Content-Language、Last-Event-ID</li>\n<li>Content-Type 只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ol>\n<h3 id=\"2-1-基本流程\"><a href=\"#2-1-基本流程\" class=\"headerlink\" title=\"2.1 基本流程\"></a>2.1 基本流程</h3><ol>\n<li>浏览器发现是跨域的话，会自动加上<code>Origin</code> 字段；</li>\n<li>如果 <code>Origin</code> 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含 <code>Access-Control-Allow-Origin</code>字段，会抛出一个错误，可以被 XMLHttpRequest 的 onerror 回调函数捕获。但这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200；</li>\n<li>如果 <code>Origin</code> 指定的域名在许可范围内，服务器返回的响应会多出几个头信息字段。</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://api.bob.com  //该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个 *，表示接受任意域名的请求。</span><br><span class=\"line\">Access-Control-Allow-Credentials: true // 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。服务器明确许可，可以发送 cookie</span><br><span class=\"line\">Access-Control-Expose-Headers: FooBar</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-withCredentials-属性\"><a href=\"#2-2-withCredentials-属性\" class=\"headerlink\" title=\"2.2 withCredentials 属性\"></a>2.2 withCredentials 属性</h3><p>CORS 请求默认不发送 cookie 和 HTTP 认证信息。如果要把 cookie 发到服务器，一方面要服务器同意，指定 <code>Access-Control-Allow-Credentials</code>字段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>\n<p>另一方面，开发者必须在 Ajax 请求中打开 withCredentials 属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Attention：</strong> 如果要发送 cookie，<code>Access-Control-Allow-Origin</code> 就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，cookie 依然遵循同源政策，只有用服务器域名设置的 cookie 才会上传，其他域名的 cookie 并不会上传，且（跨源）原网页代码中的 document.cookie 也无法读取服务器域名下的  cookie。</p>\n<h2 id=\"非简单请求（not-so-simple-request）\"><a href=\"#非简单请求（not-so-simple-request）\" class=\"headerlink\" title=\"非简单请求（not-so-simple request）\"></a>非简单请求（not-so-simple request）</h2><ol>\n<li>方法：PUT 或 DELETE</li>\n<li>Content-Type:application/json</li>\n</ol>\n<h3 id=\"预检请求\"><a href=\"#预检请求\" class=\"headerlink\" title=\"预检请求\"></a>预检请求</h3><p>如果浏览器发现这是一个非简单请求，就自动发出一个「预检请求（preflight）」。浏览器先询问服务器：当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 方法和头信息字段。只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest 请求否则就报错。「预检」请求用的请求方法是 OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是 <code>Origin</code>，表示请求来自哪个源。</p>\n<p>除了<code>Origin</code>字段，预检请求的头信息包括两个特殊字段：<code>Access-Control-Request-Method</code>、<code>Access-Control-Request-Headers</code></p>\n<h2 id=\"预检响应\"><a href=\"#预检响应\" class=\"headerlink\" title=\"预检响应\"></a>预检响应</h2><ol>\n<li><code>AAccess-Control-Allow-Methods</code></li>\n<li><code>Access-Control-Allow-Headers</code></li>\n<li><code>Access-Control-Allow-Credentials</code></li>\n<li><code>Access-Control-Max-Age</code></li>\n</ol>\n<h1 id=\"三-JSONP（Json-with-padding）\"><a href=\"#三-JSONP（Json-with-padding）\" class=\"headerlink\" title=\"三 JSONP（Json with padding）\"></a>三 JSONP（Json with padding）</h1><p>w3schools： <a href=\"https://www.w3schools.com/js/js_json_jsonp.asp\" target=\"_blank\" rel=\"noopener\">https://www.w3schools.com/js/js_json_jsonp.asp</a></p>\n<p>在进行 Ajax 请求时，由于同源策略不能进行跨域请求，而<code>&lt;script&gt;</code>标签的 src 属性却可以加载跨域的 JavaScript 脚本，JSONP 就是利用这一特性实现的。与普通的 Ajax 请求不同，在使用 JSONP 进行跨域请求时，服务器不再返回 JSON 格式的数据，而是返回一段调用某个函数的 JavaScript 代码，在 src 属性中调用来实现跨域。</p>\n<p>JSONP 的优点是兼容性好，在一些老旧的浏览器种也可以运行，但它的缺点也非常明显：</p>\n<ul>\n<li>只能进行 GET 请求；</li>\n<li>XSS 攻击</li>\n</ul>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"Nginx 命令记录","url":"http://jocolorful.com/2019/01/27/Nginx/","content":"<h2 id=\"重载配置文件\"><a href=\"#重载配置文件\" class=\"headerlink\" title=\"重载配置文件\"></a>重载配置文件</h2><p>./nginx -s reload</p>\n<h2 id=\"日志切割\"><a href=\"#日志切割\" class=\"headerlink\" title=\"日志切割\"></a>日志切割</h2><p>备份当前日志</p>\n<p>./nginx -s  reopen</p>\n<p> 每周执行一次，写在脚本当中</p>\n<p> crontab</p>\n<p> gzip on<br>  gzip_comp_level 2  压缩级别<br> 压缩消耗GPU</p>\n<p>autoindex_moduls</p>\n<p>autoindex_on //  文件夹</p>\n<p>set limite-rate 控制流量 以秒为单位</p>\n<p>access.log</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"混合开发-原理记录","url":"http://jocolorful.com/2019/01/27/前端-Hybrid/","content":"<h1 id=\"混合方案\"><a href=\"#混合方案\" class=\"headerlink\" title=\"混合方案\"></a>混合方案</h1><ul>\n<li>WebView</li>\n<li>Native UI</li>\n<li>小程序方案<a id=\"more\"></a>\n\n</li>\n</ul>\n<p>以上的三种方案，其实同样都是基于 JSBridge 完成的通讯层，第二三种方案，其实可以看做是在方案一的基础上，继续通过不同的新技术进一步提高了应用的混合程度。因此，JSBridge 也是整个混合应用最关键的部分，例如我们在设置微信分享时用到的 JS-SDK，wx对象 便是我们最常见的 JSBridge:</p>\n<h1 id=\"Hybrid的通信原理\"><a href=\"#Hybrid的通信原理\" class=\"headerlink\" title=\"Hybrid的通信原理\"></a>Hybrid的通信原理</h1><p>Hybrid App的本质，其实是在原生的 App 中，使用 WebView 作为容器直接承载 Web页面。因此，最核心的点就是 Native端 与 H5端 之间的双向通讯层，其实这里也可以理解为我们需要一套跨语言通讯方案，来完成 Native(Java/Objective-c/…) 与 JavaScript 的通讯。</p>\n<p>这个方案就是我们所说的 JSBridge，而实现的关键，便是作为容器的 WebView，一切的原理都是基于 WebView 的机制。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p>在 WebView 中发出的网络请求，客户端都能进行监听和捕获</p>\n<h2 id=\"协议定制\"><a href=\"#协议定制\" class=\"headerlink\" title=\"协议定制\"></a>协议定制</h2><ul>\n<li>不同的协议头代表着不同的含义，这样便能清楚知道每个协议的适用范围。</li>\n</ul>\n<h2 id=\"协议的拦截\"><a href=\"#协议的拦截\" class=\"headerlink\" title=\"协议的拦截\"></a>协议的拦截</h2><h2 id=\"协议回调\"><a href=\"#协议回调\" class=\"headerlink\" title=\"协议回调\"></a>协议回调</h2><h2 id=\"参数传递方式\"><a href=\"#参数传递方式\" class=\"headerlink\" title=\"参数传递方式\"></a>参数传递方式</h2><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"RN - 性能优化手段","url":"http://jocolorful.com/2019/01/22/前端-RN的性能瓶颈/","content":"<h1 id=\"基础优化\"><a href=\"#基础优化\" class=\"headerlink\" title=\"基础优化\"></a>基础优化</h1><a id=\"more\"></a>\n\n<ol>\n<li>比较吃性能的、耗时的操作可以放到componentDidMount中，然后再用 Interaction manager 在包裹一下，比如网络请求。</li>\n<li>无状态组件不会被实例化</li>\n<li>对于同层级的相同类型的组件，要给每个组件指定唯一的key值</li>\n<li>用 FlatList 替换 scrollView，因为在用 scrollView 的时候它会一下子把他上面的所有子组件都渲染出来，而 FlatList 可以设置首屏渲染的行数，这样就不会导致在刚进入这一页的时候出现卡顿现象。</li>\n</ol>\n<p>#<br>本地分包： 把bundle拆分成公共基础bundle和业务bundle</p>\n<p>预加载： 预加载公共基础bundle</p>\n<p>缓存一部分数据</p>\n<p>预加载</p>\n<p>处理JS Bundle包大小、文件压缩、缓存</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":["混合开发"]},{"title":"用React Hooks 搭一个 TodoList","url":"http://jocolorful.com/2019/01/22/前端-ReactHooks/","content":"<h1 id=\"用-React-Hooks-搭一个-TodoList\"><a href=\"#用-React-Hooks-搭一个-TodoList\" class=\"headerlink\" title=\"用 React Hooks 搭一个 TodoList\"></a>用 React Hooks 搭一个 TodoList</h1><p>作为一个爱折腾的前端，今天讲点新东西: React Hooks</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是Hooks\"><a href=\"#什么是Hooks\" class=\"headerlink\" title=\"什么是Hooks?\"></a>什么是Hooks?</h2><p>Hooks简单来说就是一系列的函数。你可以不用ES6的 classes component的语法；在function component(纯函数)同样可以获取到同样可以获取到React的一些特性，比如state和生命周期，excited？所以呢，我们不叫这些组件叫「无状态组件」了，「函数组件」is preferable～</p>\n<h3 id=\"Hooks类型\"><a href=\"#Hooks类型\" class=\"headerlink\" title=\"Hooks类型\"></a>Hooks类型</h3><ul>\n<li>State hooks<br>Hooks简单来说就是一系列的函数。你可以不用ES6的 classes component的语法；在function component(纯函数)同样可以获取到同样可以获取到React的一些特性，比如state和生命周期，excited？所以呢，我们不叫这些组件叫<code>无状态组件</code>了，<code>函数组件</code>is preferable～</li>\n</ul>\n<h3 id=\"Hooks类型-1\"><a href=\"#Hooks类型-1\" class=\"headerlink\" title=\"Hooks类型\"></a>Hooks类型</h3><ul>\n<li>State hooks</li>\n<li>Effect hooks</li>\n<li>Custom hooks</li>\n</ul>\n<h3 id=\"讲讲优势\"><a href=\"#讲讲优势\" class=\"headerlink\" title=\"讲讲优势\"></a>讲讲优势</h3><ul>\n<li>隔离了有状态的业务逻辑，更利于测试</li>\n<li>不用 render props 或者通过 Hoc(higher-order components) 包装，也可以共享有状态的业务逻辑</li>\n<li>函数组件没有生命周期</li>\n<li>避免了ES6 的 class 语法，jsx 的 class 很诡异，并不是真正意义上的「类」。</li>\n</ul>\n<p>更多细节请参考：<a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener\">Hooks简介</a></p>\n<h3 id=\"在-prod-环境暂不要使用\"><a href=\"#在-prod-环境暂不要使用\" class=\"headerlink\" title=\"在 prod 环境暂不要使用\"></a>在 prod 环境暂不要使用</h3><p>Hooks 还在 alpha 阶段，他们的 API 随时都有可能变。在稳定之前，你可以跑跑Demo，边缘项目玩一玩~</p>\n<h2 id=\"来-Build-一个-Todo-List\"><a href=\"#来-Build-一个-Todo-List\" class=\"headerlink\" title=\"来 Build 一个 Todo List\"></a>来 Build 一个 Todo List</h2><p>我们只要做一下事情就好了</p>\n<ul>\n<li>展示你的Todos</li>\n<li>新增一个Todo</li>\n<li>删除一个Todo</li>\n</ul>\n<p>easy?</p>\n<h3 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h3><ol>\n<li>使用「create-react-app」初始化项目</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">create-react-app todo-hooks</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>升级 package.json 的 react 和 react-dom，这里使用了 antd，让我们的 TodoUI 更加好看。Antd 的具体配置请移步<a href=\"https://ant.design/docs/react/use-with-create-react-app-cn\" target=\"_blank\" rel=\"noopener\">antd文档</a></li>\n</ol>\n<p>package.json:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"antd\": \"^3.12.4\",</span><br><span class=\"line\">  \"react\": \"16.7.0-alpha.0 - next\",</span><br><span class=\"line\">  \"react-dom\": \"16.7.0-alpha.0 - next\",</span><br><span class=\"line\">  \"react-scripts\": \"2.1.3\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>升级package.json的 react 和 react-dom，这里使用了antd，让我们的TodoUI更加好看。Antd 的具体配置请移步<a href=\"https://ant.design/docs/react/use-with-create-react-app-cn\" target=\"_blank\" rel=\"noopener\">antd文档</a></li>\n</ol>\n<p>package.json:</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">\"dependencies\": &#123;</span><br><span class=\"line\">  \"antd\": \"^3.12.4\",</span><br><span class=\"line\">  \"react\": \"16.7.0-alpha.0 - next\",</span><br><span class=\"line\">  \"react-dom\": \"16.7.0-alpha.0 - next\",</span><br><span class=\"line\">  \"react-scripts\": \"2.1.3\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"写一个-TodoForm-的组件\"><a href=\"#写一个-TodoForm-的组件\" class=\"headerlink\" title=\"写一个 TodoForm 的组件\"></a>写一个 TodoForm 的组件</h3><p>之前就说过，Hooks就是一个函数。来，开始我们的第一个Hooks：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Form, Button, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TodoForm = <span class=\"function\">(<span class=\"params\">&#123; saveTodo &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Form layout=<span class=\"string\">\"inline\"</span>&gt;</span><br><span class=\"line\">      &lt;Form.Item&gt;</span><br><span class=\"line\">        &lt;Input  style=&#123;&#123; <span class=\"attr\">width</span>: <span class=\"number\">300</span> &#125;&#125; placeholder=<span class=\"string\">\"Add todo\"</span>/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Button type=\"primary\" htmlType=\"submit\" &gt;Add&lt;/</span>Button&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Form&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoForm;</span><br></pre></td></tr></table></figure>\n\n<p>这看起来和「无状态」的组件没什么两样，接下来为这个 Hooks 添砖加瓦:</p>\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">''</span>);</span><br></pre></td></tr></table></figure>\n\n<p>useState是一个函数，它可以返回state的初始状态并且返回一个数组。数组的第一项返回了当前的state值，第二项是正在更新的函数。用ES6的解构复制为它们命名: value,和setValue。</p>\n<h3 id=\"在-Forms-中使用-useState\"><a href=\"#在-Forms-中使用-useState\" class=\"headerlink\" title=\"在 Forms 中使用 useState\"></a>在 Forms 中使用 useState</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Form, Button, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TodoForm = <span class=\"function\">(<span class=\"params\">&#123; saveTodo &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Form</span><br><span class=\"line\">      layout=<span class=\"string\">\"inline\"</span></span><br><span class=\"line\">      onSubmit=&#123;event =&gt; &#123;</span><br><span class=\"line\">        event.preventDefault();</span><br><span class=\"line\">        saveTodo(value);</span><br><span class=\"line\">    &#125;&#125;&gt;</span><br><span class=\"line\">      &lt;Form.Item&gt;</span><br><span class=\"line\">        &lt;Input</span><br><span class=\"line\">          style=&#123;&#123; <span class=\"attr\">width</span>: <span class=\"number\">300</span> &#125;&#125;</span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Add todo\"</span></span><br><span class=\"line\">          onChange=&#123;event =&gt; &#123;</span><br><span class=\"line\">            setValue(event.target.value);</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">          value=&#123;value&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Button type=\"primary\" htmlType=\"submit\" &gt;Add&lt;/</span>Button&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Form&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoForm;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-Todos中-使用useState\"><a href=\"#在-Todos中-使用useState\" class=\"headerlink\" title=\"在 Todos中 使用useState\"></a>在 Todos中 使用useState</h3><p>我们的 todos 也需要状态。在 index.js中 初始化 todo，最开始的状态应该是一个空数组：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./App.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoForm <span class=\"keyword\">from</span> <span class=\"string\">'./TodoFroms'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App =<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [todos, setTodos] = useState([]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">      &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">        &lt;TodoForm /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/header&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TodoList-组件\"><a href=\"#TodoList-组件\" class=\"headerlink\" title=\"TodoList 组件\"></a>TodoList 组件</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> TodoList = <span class=\"function\">(<span class=\"params\">&#123; todos, deleteTodo &#125;</span>) =&gt;</span> (</span><br><span class=\"line\">  &lt;div className=<span class=\"string\">\"ant-col-12 code-boxes-col-1-1\"</span>&gt;</span><br><span class=\"line\">    &lt;List</span><br><span class=\"line\">      bordered</span><br><span class=\"line\">      itemLayout=<span class=\"string\">\"horizontal\"</span></span><br><span class=\"line\">      dataSource=&#123;todos&#125;</span><br><span class=\"line\">      renderItem=&#123;(todo)=&gt; (</span><br><span class=\"line\">        &lt;List.Item&gt;</span><br><span class=\"line\">          &lt;div&gt;&#123;todo&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>List.Item&gt;)&#125;</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure>\n<p>Todo List接受两个props:</p>\n<ul>\n<li>todos: 用来展示todo的数组</li>\n<li>deleteTodo: 点击删除按钮可以触发这个函数，通过index 值来找到将要被删除的todo</li>\n</ul>\n<p>加入你的 app</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;TodoForm /&gt;</span><br><span class=\"line\">&lt;TodoList todos=&#123;todos&#125;/&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加-Todo\"><a href=\"#增加-Todo\" class=\"headerlink\" title=\"增加 Todo\"></a>增加 Todo</h3><p>在appjs文件中，为 TodoForm 增加 saveTodo 的 props</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &lt;TodoForm saveTodo=&#123;value =&gt; &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">const</span> todoText = value.trim();</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (todoText) &#123;</span><br><span class=\"line\">  \t\tsetTodos([...todos, todoText]);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除-Todo\"><a href=\"#删除-Todo\" class=\"headerlink\" title=\"删除 Todo\"></a>删除 Todo</h3><figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;todo&#125;</span><br><span class=\"line\">  &lt;Button</span><br><span class=\"line\">    onClick=&#123;() =&gt; &#123;deleteTodo(index);&#125;&#125;</span><br><span class=\"line\">    icon=<span class=\"string\">\"delete\"</span> type=<span class=\"string\">\"primary\"</span>&gt;Delete</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在父组件注册</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&lt;TodoList</span><br><span class=\"line\">  todos=&#123;todos&#125;</span><br><span class=\"line\">  deleteTodo=&#123;todoIndex =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newTodos = todos</span><br><span class=\"line\">      .filter(<span class=\"function\">(<span class=\"params\">_, index</span>) =&gt;</span> index !== todoIndex);</span><br><span class=\"line\">      setTodos(newTodos);</span><br><span class=\"line\">  &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<p>看起来和一般的组件也没什么两样?</p>\n<h3 id=\"Abstracting-Form-Input-useState\"><a href=\"#Abstracting-Form-Input-useState\" class=\"headerlink\" title=\"Abstracting Form Input useState\"></a>Abstracting Form Input useState</h3><p>开始改造我们的 form</p>\n<p>新建一个 useInputState.js 的文件</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> initialValue =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [value, setValue] = useState(initialValue);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    value,</span><br><span class=\"line\">    onChange: <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">      setValue(event.target.value);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    reset: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> setValue(<span class=\"string\">''</span>)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>现在我们的<code>TodoForm.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Form, Button, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> useInputState <span class=\"keyword\">from</span> <span class=\"string\">'./useInputState'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TodoForm = <span class=\"function\">(<span class=\"params\">&#123; saveTodo &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> &#123; value, onChange &#125; = useInputState(<span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Form</span><br><span class=\"line\">      layout=<span class=\"string\">\"inline\"</span></span><br><span class=\"line\">      onSubmit=&#123;event =&gt; &#123;</span><br><span class=\"line\">        event.preventDefault();</span><br><span class=\"line\">        saveTodo(value);</span><br><span class=\"line\">      &#125;&#125;&gt;</span><br><span class=\"line\">      &lt;Form.Item&gt;</span><br><span class=\"line\">        &lt;Input</span><br><span class=\"line\">          style=&#123;&#123; <span class=\"attr\">width</span>: <span class=\"number\">300</span> &#125;&#125;</span><br><span class=\"line\">          placeholder=<span class=\"string\">\"Add todo\"</span></span><br><span class=\"line\">          onChange=&#123;event =&gt; &#123;</span><br><span class=\"line\">            onChange(event.target.value);</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">          value=&#123;value&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Button type=\"primary\" htmlType=\"submit\" &gt;Add&lt;/</span>Button&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Form.Item&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Form&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> TodoForm;</span><br></pre></td></tr></table></figure>\n<h2 id=\"other\"><a href=\"#other\" class=\"headerlink\" title=\"other\"></a>other</h2><p>当然除了 userState，Hooks 还提供了 <code>useEffect</code>、 <code>useContext</code>、 <code>useRef</code><br>Enjoy：）</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":["React"]},{"title":"Javascript 整洁之道","url":"http://jocolorful.com/2017/08/22/前端-clean-code-javascript/","content":"<h1 id=\"Javascript整洁之道\"><a href=\"#Javascript整洁之道\" class=\"headerlink\" title=\"Javascript整洁之道\"></a>Javascript整洁之道</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ol>\n<li>使用有意义的和声明式的变量名</li>\n</ol>\n<a id=\"more\"></a>\n\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> yyyymmdstr = moment.format(<span class=\"string\">'YYYY/MM/DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> currentDate = moment.format(<span class=\"string\">'YYYY/MM/DD'</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>对同样的变量类型使用相同的词汇</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">getUserInfo();</span><br><span class=\"line\">getClientData();</span><br><span class=\"line\">getCustomerRecord();</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">getUser();</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用可检索的变量名<br>我们读的代码多于写的代码。所以代码的课可读性和可检索性非常重要。使用无意义的变量命名会为我们理解程序带来一定的困难。请确保你的变量名可搜索。类似于<a href=\"https://github.com/danielstjules/buddy.js\" target=\"_blank\" rel=\"noopener\">buddy.js</a>和<a href=\"https://github.com/eslint/eslint/blob/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md\" target=\"_blank\" rel=\"noopener\">ESLint</a>可以检查这些没有命名的常量</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//864000000到底是什么意思</span></span><br><span class=\"line\">setTimeout(blastOff, <span class=\"number\">86400000</span>);</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将它声明为常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MILLSECONDS_IN_A_DAY = <span class=\"number\">86400000</span>;</span><br><span class=\"line\">setTimeout(blastOff, MILLSECONDS_IN_A_DAY);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>使用解释性的变量</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> address = <span class=\"string\">'One Infinite Loop , Cupertino 95014'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cityZipCodeRegex = <span class=\"regexp\">/^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d&#123;5&#125;)?$/</span>;</span><br><span class=\"line\">saveCityZipCode(address.match(cityZipCodeRegex)[<span class=\"number\">1</span>], address.match(cityZipCodeRegex)[<span class=\"number\">2</span>]);</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> address = <span class=\"string\">'One Infinite Loop, Cupertino 95014'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cityZipCodeRegex = <span class=\"regexp\">/^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d&#123;5&#125;)?$/</span>;</span><br><span class=\"line\"><span class=\"comment\">//利用数组的解构，返回的变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [, city, zipCode] = address.match(cityZipCodeRegex) || [];</span><br><span class=\"line\">saveCityZipCode(city, zipCode);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>详诉优于概述</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> locations = [<span class=\"string\">'Austin'</span>, <span class=\"string\">'New York'</span>, <span class=\"string\">'San Francisco'</span>];</span><br><span class=\"line\">      locations.forEach(<span class=\"function\">(<span class=\"params\">l</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      doStuff();</span><br><span class=\"line\">      doSomeOtherStuff();</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"comment\">// Wait, what is `l` for again?</span></span><br><span class=\"line\">      dispatch(l);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> locations = [<span class=\"string\">'Austin'</span>, <span class=\"string\">'New York'</span>, <span class=\"string\">'San Francisco'</span>];</span><br><span class=\"line\">      locations.forEach(<span class=\"function\">(<span class=\"params\">location</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      doStuff();</span><br><span class=\"line\">      doSomeOtherStuff();</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      dispatch(location);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>不要增加不需要的上下文</li>\n</ol>\n<p>如果你的类或者对象已经有语义，不用在变量名中重复这些</p>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Car = &#123;</span><br><span class=\"line\">    carMake: <span class=\"string\">'Honda'</span>,</span><br><span class=\"line\">    carModel: <span class=\"string\">'Accord'</span>,</span><br><span class=\"line\">    carColor: <span class=\"string\">'Blue'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">paintCar</span>(<span class=\"params\">car</span>) </span>&#123;</span><br><span class=\"line\">    car.carColor = <span class=\"string\">'Red'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Car = &#123;</span><br><span class=\"line\">    make: <span class=\"string\">'Honda'</span>,</span><br><span class=\"line\">    model: <span class=\"string\">'Accord'</span>,</span><br><span class=\"line\">    color: <span class=\"string\">'Blue'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">paintCar</span>(<span class=\"params\">car</span>) </span>&#123;</span><br><span class=\"line\">    car.color = <span class=\"string\">'Red'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>使用默认参数代替短路判读或者条件判断</li>\n</ol>\n<blockquote>\n<p>默认的参数总是比短路赋值活着条件语句更加简洁。注意，你使用他们的时候，你的函数将会为未定义的参数提供一个默认值。其他的错误的值，类似于‘’、”“、false、null、0、and NAN将不会被默认值取代</p>\n</blockquote>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMicrobrewery</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> breweryName = name || <span class=\"string\">'Hipster Brew Co.'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMicrobrewery</span>(<span class=\"params\">breweryName = <span class=\"string\">'Hipster Brew Co.'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ol>\n<li>函数参数:</li>\n</ol>\n<p>理想情况下：两个或者更少。减少函数的参数越来越重要了，因为它会让你测试你的函数变得简单。拥有超过三个的参数会导致你的函数的测试用例爆炸式地增加（这么强=.=）.</p>\n<p>一个或者两个参数是理想的情况，三个就应该避免。超过三个就应该整合一下。通常， 如果你有超过两个以上的参数，你的函数就会尝试着做很多的事。大多数情况下，一个高阶的对象作为一个参数就满足了。</p>\n<p>因为在js中，什么都是对象。没有类的样板。如果你需要一大串参数，你可以使用对象。</p>\n<p>为了使函数期望的类型更加明显，你可以使用ES2015/ES6的解构语法，它有几点好处：</p>\n<ul>\n<li><p>当某人一旦看到这个函数声明，就会明白什么属性会被用到。</p>\n</li>\n<li><p>解构同样克隆参数对象的一些基本类型的值给函数，这个可以排除一些副作用。注意：对象和数组从函数参数对象中不会被克隆</p>\n</li>\n<li><p>Linter 也可以警告你什么属性没有被用到。哪个属性将不会被解构</p>\n</li>\n</ul>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">title, body, buttonText, cancellable</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">&#123; title, body, buttonText, cancellable &#125;</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">  body: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">  buttonText: <span class=\"string\">'Baz'</span>,</span><br><span class=\"line\">  cancellable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>函数应该只做一件事</li>\n</ol>\n<p>这是软件工程最重要的事，当函数做的事超过了一件。它们会变得越来越难以维护、测试。当你的函数从只做一件事脱离出来，它们可以轻易地被重构，你的代码可读性也会变得很高。</p>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emailClients</span>(<span class=\"params\">clients</span>) </span>&#123;</span><br><span class=\"line\">    clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> clientRecord = database.lookup(client);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (clientRecord.isActive()) &#123;</span><br><span class=\"line\">                email(client);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emailActiveClients</span>(<span class=\"params\">clients</span>) </span>&#123;</span><br><span class=\"line\">  clients.filter(isActiveClient)</span><br><span class=\"line\">  .forEach(email);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isActiveClient</span>(<span class=\"params\">client</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientRecord = database.lookup(client);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clientRecord.isActive();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>函数名应该告诉他们在做什么</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addToDate</span>(<span class=\"params\">date, month</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 难以从函数名分辨出什么被添加了</span></span><br><span class=\"line\">addToDate(date, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addMonthToDate</span>(<span class=\"params\">month, date</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">addMonthToDate(<span class=\"number\">1</span>, date);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>函数应该只有一个级别的抽象</li>\n</ol>\n<blockquote>\n<p>当函数有多个级别的抽象时，分割函数可以使代码可读和更容易测试。</p>\n</blockquote>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseBetterJSAlternative</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> REGEXES = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> statements = code.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tokens = [];</span><br><span class=\"line\">  REGEXES.forEach(<span class=\"function\">(<span class=\"params\">REGEX</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    statements.forEach(<span class=\"function\">(<span class=\"params\">statement</span>) =&gt;</span> &#123;<span class=\"comment\">// ...&#125;);</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = [];</span><br><span class=\"line\">  tokens.forEach(<span class=\"function\">(<span class=\"params\">token</span>) =&gt;</span> &#123;<span class=\"comment\">// lex...&#125;);</span></span><br><span class=\"line\">  ast.forEach(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;<span class=\"comment\">// parse...&#125;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tokenize</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> REGEXES = [<span class=\"comment\">// ...];</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> statements = code.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tokens = [];</span><br><span class=\"line\">    REGEXES.forEach(<span class=\"function\">(<span class=\"params\">REGEX</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        statements.forEach(<span class=\"function\">(<span class=\"params\">statement</span>) =&gt;</span> &#123; tokens.push( <span class=\"comment\">/* ... */</span> );&#125;);&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tokens;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lexer</span>(<span class=\"params\">tokens</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ast = [];</span><br><span class=\"line\">        tokens.forEach(<span class=\"function\">(<span class=\"params\">token</span>) =&gt;</span> &#123; ast.push( <span class=\"comment\">/* ... */</span> );&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ast;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseBetterJSAlternative</span>(<span class=\"params\">code</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tokens = tokenize(code);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = lexer(tokens);</span><br><span class=\"line\">  ast.forEach(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;<span class=\"comment\">// parse...&#125;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>去掉重复的代码</li>\n</ol>\n<p>尽量不要复制代码。复制的代码意味着当你修改一个逻辑时，需要更改多个逻辑。假设你经营着一家餐馆，你的库存有的番茄，洋葱，咖喱等等。当你的多张库存表单都有这些东西，当上了一道菜之后，所有的库存表单都需要更新。如果你只有一张表，你就只需要更新一张表。</p>\n<p>很多时候，你复制代码因为你有两个或多个不同细微的东西。他们分享了很多共同的东西，但是它们迫使你分离两个或者更多的函数，但是却做着同样的事情。删除一些重复的代码意味着创造出抽象的部分，只用函数/模块/类来解决一系列的问题。</p>\n<p>让抽象的部分做正确的工作是至关重要的。不要重复你自己，否则你会发现你自己你想改变一个地方的时候需要更新很多地方。</p>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showDeveloperList</span>(<span class=\"params\">developers&#123;developers.forEach((developer</span>) =&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> experience = developer.getExperience();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> githubLink = developer.getGithubLink();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    expectedSalary,</span><br><span class=\"line\">    experience,</span><br><span class=\"line\">    githubLink</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  render(data););</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showManagerList</span>(<span class=\"params\">managers</span>) </span>&#123;</span><br><span class=\"line\">  managers.forEach(<span class=\"function\">(<span class=\"params\">manager</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> experience = manager.getExperience();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> portfolio = manager.getMBAProjects();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">      expectedSalary,</span><br><span class=\"line\">      experience,</span><br><span class=\"line\">      portfolio</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    render(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showEmployeeList</span>(<span class=\"params\">employees</span>) </span>&#123;</span><br><span class=\"line\">    employees.forEach(<span class=\"function\">(<span class=\"params\">employee</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> experience = employee.getExperience();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">              expectedSalary,</span><br><span class=\"line\">              experience</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (employee.type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'manager'</span>:</span><br><span class=\"line\">            data.portfolio = employee.getMBAProjects();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'developer'</span>:</span><br><span class=\"line\">            data.githubLink = employee.getGithubLink();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>    ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>为 Object.assign 设置默认的对象</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> menuConfig = &#123;</span><br><span class=\"line\">    title: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    body: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">    buttonText: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    cancellable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    config.title = config.title || <span class=\"string\">'Foo'</span>;</span><br><span class=\"line\">    config.body = config.body || <span class=\"string\">'Bar'</span>;</span><br><span class=\"line\">    config.buttonText = config.buttonText || <span class=\"string\">'Baz'</span>;</span><br><span class=\"line\">    config.cancellable = config.cancellable !== <span class=\"literal\">undefined</span> ? config.cancellable : <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(menuConfig);</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> menuConfig = &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Order'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// User did not include 'body' key</span></span><br><span class=\"line\">    buttonText: <span class=\"string\">'Send'</span>,</span><br><span class=\"line\">    cancellable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    config = <span class=\"built_in\">Object</span>.assign(&#123;</span><br><span class=\"line\">        title: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">        body: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">        buttonText: <span class=\"string\">'Baz'</span>,</span><br><span class=\"line\">        cancellable: <span class=\"literal\">true</span>&#125;, config);</span><br><span class=\"line\">        <span class=\"comment\">// config now equals: &#123;title: \"Order\", body: \"Bar\", buttonText: \"Send\", cancellable: true&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createMenu(menuConfig);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>不要将flag设置为函数的参数</li>\n</ol>\n<p>flag告诉了你的用户，这个函数做了不止一件事情，函数应该只做一件事。如果像下面的代码，路径决定于不同的布尔值，就将它们拆分出来。</p>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFile</span>(<span class=\"params\">name, temp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp) &#123;</span><br><span class=\"line\">        fs.create(<span class=\"string\">`./temp/<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        fs.create(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFile</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    fs.create(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTempFile</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    createFile(<span class=\"string\">`./temp/<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>避免副作用</li>\n</ol>\n<ul>\n<li><p>一个函数接收了一个参数返回了其他的值或数组。这个副作用可能改变全局变量，或者奇怪地将你口袋里的钱给一个陌生人。</p>\n<p> 现在，你确实需要将这些副作用写进你的代码。像之前的例子，你可能会写一个文件。你需要做的是将这些集中起来。不要将几个函数或类写一个特定的文件。一个来写的工作就够了，有且只有一个。</p>\n<p> 这个主要的点是在于避免常见的陷阱，比如一些没有结构的对象共享一些状态，使用无数据类型可以被随意赋值，记住将这些副作用集中起来。</p>\n</li>\n</ul>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局的变量将被下面的函数引用</span></span><br><span class=\"line\"><span class=\"comment\">// 如果另外一个函数使用这个名字，现在它会变成一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'Ryan McDermott'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splitIntoFirstAndLastName</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    name = name.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">splitIntoFirstAndLastName();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">splitIntoFirstAndLastName</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> name.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Ryan McDermott'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newName = splitIntoFirstAndLastName(name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 'Ryan McDermott';</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newName); <span class=\"comment\">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>在JS中，基本类型的通过值传递。对象和数组通过引用传递。在这些对象和数组中，如果你改变购物车中的数组，通过购买一些商品，然后其他的函数可能使用被这些影响了的<code>cat</code> 数组。这可能很棒，但是考虑一下情况：</p>\n</li>\n<li><p>用户点击了购买的按钮, 按钮需要调用一个购买的函数。这个函数可能会发送一个网络请求，然后将购物车的数组发送给服务器。在网络极差的情况下，这个购买函数会不断地发送请求。现在在网络请求真正发送之前，用户突然点击<code>Add to Cart</code>的按钮。这个购买函数将会发送意外的数据，因为它有对这个购物车数组的引用。</p>\n</li>\n<li><p>一个好的解决思路是<code>addItemToCart</code>函数总是克隆这个<code>cart</code>，编辑它，然后返回克隆。这个保证了没有其他函数保持对这个购物车保持引用，排除了一些意外的影响。</p>\n</li>\n</ul>\n<p>注意：</p>\n<ol>\n<li><p>这里存在确实想要改变输入框对象的情况，但是当你适应了这种编程方式你会发现这种方式弥足珍贵。为了没有副作用大多数的代码可以被重构。</p>\n</li>\n<li><p>介于克隆一个大的对象在性能表现上代价非常昂贵。幸运的是在实践中，这不是一个很大的问题。因为有大量的<a href=\"https://facebook.github.io/immutable-js/\" target=\"_blank\" rel=\"noopener\">库</a>允许这种编程方式又快又好。不需要你去手动克隆对象和数组。</p>\n</li>\n<li><p>不要写全局的函数</p>\n</li>\n</ol>\n<p>污染全局是非常不好的实践，污染全局变量在JavaScript中是一个不好的做法，因为可能会与另一个库冲突，并且使用你的API用户在生产环境中遇到异常之前不会更明智。让我们来想一个例子：如果你想扩展JavaScript的原生的Array，让两个数组显示出不同的diff函数。你可以在Array.prototype上进行扩展，但是可能会与尝试执行相同操作的另一个库冲突。如果其他库只是使用diff来找到数组的第一个和最后一个元素之间的区别呢？这就是为什么只使用ES2015 / ES6类并且只是扩展Array全局更好。</p>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.diff = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diff</span>(<span class=\"params\">comparisonArray</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(comparisonArray);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperArray</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</span><br><span class=\"line\">    diff(comparisonArray) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(comparisonArray);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>面向函数编程而不要急于编程</li>\n</ol>\n<p>JavaScript不是像Haskell的函数式编程语言。但是它却有函数式的味道，函数式语言是比较容易干净和测试的。尽你的可能去尝试这种编程方式。</p>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> programmerOutput = [&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Uncle Bobby'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Suzie Q'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jimmy Gosling'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">150</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">   name: <span class=\"string\">'Gracie Hopper'</span>,</span><br><span class=\"line\">   linesOfCode: <span class=\"number\">1000</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> totalOutput = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; programmerOutput.length; i++) &#123;</span><br><span class=\"line\">    totalOutput += programmerOutput[i].linesOfCode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> programmerOutput = [&#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Uncle Bobby'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Suzie Q'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jimmy Gosling'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">150</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">   name: <span class=\"string\">'Gracie Hopper'</span>,</span><br><span class=\"line\">   linesOfCode: <span class=\"number\">1000</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">const</span> INITIAL_VALUE = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> totalOutput = programmerOutput</span><br><span class=\"line\">      .map(<span class=\"function\">(<span class=\"params\">programmer</span>) =&gt;</span> programmer.linesOfCode)</span><br><span class=\"line\">      .reduce(<span class=\"function\">(<span class=\"params\">acc, linesOfCode</span>) =&gt;</span> acc + linesOfCode, INITIAL_VALUE)；</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>概括条件</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (fsm.state === <span class=\"string\">'fetching'</span> &amp;&amp; isEmpty(listNode)) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shouldShowSpinner</span>(<span class=\"params\">fsm, listNode</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fsm.state === <span class=\"string\">'fetching'</span> &amp;&amp; isEmpty(listNode);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (shouldShowSpinner(fsmInstance, listNodeInstance)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"10\">\n<li>避免否定条件</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDOMNodeNotPresent</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isDOMNodeNotPresent(node)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDOMNodePresent</span>(<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isDOMNodePresent(node)) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"14\">\n<li>避免多条件</li>\n</ol>\n<p>这个看起来像是不可完成的任务。<br>当第一次听到这个的时候，人们都会说：「没有 <code>if</code> 我能够做什么？」。<br>这个回答是：「你可以在不同的情况下使用多态完成相同的任务」。</p>\n<p>第二个问题通常是：「听起来不错，可是为什么我被希望要求做这个？」。</p>\n<p>答案是我们之前学到过的概念：函数只应该做一件事。当你的 <code>class</code> 和 <code>function</code>    有了条件判断，你在告诉你的用户，你的函数在做不止一件事。</p>\n<p>记住，函数只做一件事。</p>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Airplane</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getCruisingAltitude() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.type) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'777'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getPassengerCount();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'Air Force One'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'Cessna'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getFuelExpenditure();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Airplane</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boeing777</span> <span class=\"keyword\">extends</span> <span class=\"title\">Airplane</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    getCruisingAltitude() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getPassengerCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AirForceOne</span> <span class=\"keyword\">extends</span> <span class=\"title\">Airplane</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    getCruisingAltitude() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cessna</span> <span class=\"keyword\">extends</span> <span class=\"title\">Airplane</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    getCruisingAltitude() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getFuelExpenditure();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"15\">\n<li>避免多条件地查询</li>\n</ol>\n<ul>\n<li>JavaScript是无类型的语言，这意味着你可以使用任何类型来作为参数。有时候你会被这种自由反咬一口，然后尝试着在函数中做类型检测。这里有很多方法去避免这种情况，首先要考虑的是现有的API</li>\n</ul>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">travelToTexas</span>(<span class=\"params\">vehicle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vehicle <span class=\"keyword\">instanceof</span> Bicycle) &#123;</span><br><span class=\"line\">        vehicle.pedal(<span class=\"keyword\">this</span>.currentLocation, <span class=\"keyword\">new</span> Location(<span class=\"string\">'texas'</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vehicle <span class=\"keyword\">instanceof</span> Car) &#123;</span><br><span class=\"line\">        vehicle.drive(<span class=\"keyword\">this</span>.currentLocation, <span class=\"keyword\">new</span> Location(<span class=\"string\">'texas'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Good :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">travelToTexas</span>(<span class=\"params\">vehicle</span>) </span>&#123;</span><br><span class=\"line\">      vehicle.move(<span class=\"keyword\">this</span>.currentLocation, <span class=\"keyword\">new</span> Location(<span class=\"string\">'texas'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果你使用的是像字符串和整数这种基本类型的值，但是你不使用多态但是依旧感觉到做类型检测很有必要，你可以考虑 <code>TypeScript</code>。他是<code>JavaScript</code>非常卓越的替代品。它提供了在JS语法基础上的静态类型检测。手动检查普通类型的 JavaScript，需要额外多的代码，这种人造的类型安全使代码丧失了可读性。让代码整洁，书写好的测试用例，才会有好的 code  review。否则，用 TypeScript 来弥补这个缺失。</li>\n</ul>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">val1, val2</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val1 === <span class=\"string\">'number'</span> &amp;&amp; <span class=\"keyword\">typeof</span> val2 === <span class=\"string\">'number'</span> ||</span><br><span class=\"line\">          <span class=\"keyword\">typeof</span> val1 === <span class=\"string\">'string'</span> &amp;&amp; <span class=\"keyword\">typeof</span> val2 === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> val1 + val2;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Must be of type String or Number'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">val1, val2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val1 + val2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"16\">\n<li>不要过度优化<br>现代浏览器在底层运行时做了很多的优化。很多时候你在优化代码只是在浪费时间。这里有很多好的<a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers\" target=\"_blank\" rel=\"noopener\">资源</a>来查看哪些底层的优化是缺失的。</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// On old browsers, each iteration with uncached `list.length` would be costly</span></span><br><span class=\"line\"><span class=\"comment\">// because of `list.length` recomputation. In modern browsers, this is optimized.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"17\">\n<li>移除无用的代码<br>无用的代码和复制来的代码一样不好，你的代码库没有理由去保留它。如果没有被调用过，清除它。如果你始终需要它就让它存在在历史版本中。</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">oldRequestModule</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newRequestModule</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> req = newRequestModule;</span><br><span class=\"line\">inventoryTracker(<span class=\"string\">'apples'</span>, req, <span class=\"string\">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newRequestModule</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> req = newRequestModule;</span><br><span class=\"line\">inventoryTracker(<span class=\"string\">'apples'</span>, req, <span class=\"string\">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象和数据结构\"><a href=\"#对象和数据结构\" class=\"headerlink\" title=\"对象和数据结构\"></a>对象和数据结构</h2><ol>\n<li>使用 getter 和 setter</li>\n</ol>\n<p><font style=\"font-weight:bold\">Bad:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeBankAccount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">  \tbalance: <span class=\"number\">0</span>,</span><br><span class=\"line\">  \t<span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> account = makeBankAccount();</span><br><span class=\"line\">account.balance = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n<p><font style=\"font-weight:bold;\">Good:</font></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeBankAccount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//这是一个私有的属性</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> balance = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"comment\">// a \"getter\",通过下面的返回对象使之成为公有。</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBalance</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">    <span class=\"comment\">// a \"setter\", 通过下面的返回对象使之成为公有。</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setBalance</span>(<span class=\"params\">amount</span>) </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// ... validate before updating the balance</span></span><br><span class=\"line\">    \tbalance = amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">   \t <span class=\"comment\">// ...</span></span><br><span class=\"line\">    \tgetBalance,</span><br><span class=\"line\">      setBalance,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> account = makeBankAccount();</span><br><span class=\"line\">account.setBalance(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>使用 getter 和 setter</li>\n</ol>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["前端"],"tags":[]},{"title":"category","url":"http://jocolorful.com/category/index.html","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"link","url":"http://jocolorful.com/link/index.html","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"","url":"http://jocolorful.com/css/personal-style.css","content":"* {\n  scroll-behavior: smooth;\n}\n\nhtml {\n  width: 100vw;\n  height: 100vh;\n}\n\nbody {\n  background: rgba(150, 220, 230, 0.9);\n}\n\n.content {\n  min-height: 80vh;\n  background: #FFF;\n  margin-top: 0 !important;\n  border-radius: 4px;\n}\n\n@media screen and (min-width: 768px) {\n  .content {\n    width: 900px !important;\n    padding: 50px !important;\n  }\n  .toc-article {\n    margin-left: 500px;\n  }\n}\n\n.article-content h1 {\n  font-size: 22px;\n  margin-top: 52px;\n}\n.article-content h2 {\n  font-size: 18px;\n  margin-top: 32px;\n}\n\n.article-content blockquote {\n  background: rgba(0, 0, 0, 0.02);\n  border-left: 6px solid #6190e8;\n  padding: 1px 10px;\n  border-radius: 5px;\n  margin: 0 14px 14px;\n  opacity: 0.9;\n}\n\n.article-content blockquote  p {\n  line-height: 24px;\n  border-radius: 5px;\n  font-size: 14px;\n}\n.article-content li {\n  margin-bottom: 10px;\n}\n\n\n.layout {\n  overflow: hidden;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  width: 100vw;\n  height: 100vh;\n  background: url(https://img.zcool.cn/community/01c9905b858a3ca8012126ce7c37c0.jpg@1280w_1l_0o_100sh.jpg);\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n}\n.layout .category-box{\n  margin-top: 100px;\n}\n\n\n.layout .content-category-wrap .item-post .post-title {\n  font-size: 12px;\n  text-overflow: ellipsis;\n}\n\n.layout .content-category {\n  font-size: 12px;\n  width: 100%;\n}\n\n.layout .content-category-wrap {\n  position: relative;\n  padding-left: 20px;\n  width: 600px;\n  height: 100vh;\n  overflow: hidden scroll;\n}\n\n.content-category-wrap::-webkit-scrollbar {\n  display: none;\n}\n\n.layout .content-home {\n  position: relative;\n}\n\n.content-home .slogan,\n.content-home .name {\n  margin: 12px 0;\n  color: #333333;\n}\n\n.article-content a {\n  color: rgba(0,132,255, 0.9);\n}\n\n.page-header {\n  margin-bottom: 0px !important;\n}\n\n.page-header .list-toolbox {\n  display: block !important;\n}\n\na:hover {\n\tcolor: rgba(0,132,255, 0.9) !important;\n}\n\n.pagination .next,\n.pagination .prev {\n  display: none !important;\n}\n\ncode, kbd, pre, samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n/* code,\n\ncode, kbd, pre, samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n  color: #abb2bf;\n}\n\n.highlight .html, .gutter{\n  display: none\n}\n\n.highlight {\n  background: black;\n}\nfigure.highlight {\n  padding-top: 40px;\n  background: rgba(255, 255, 255, 0.7) !important;\n  background: rgba(0, 0, 0, 1) !important;\n  position: relative;\n}\n\ncode {\n  padding: 2px 4px;\n  position: relative;\n}\n\n.highlight pre {\n  white-space: pre !important;\n}\n\n.highlight::after {\n  top: 12px;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  background: rgb(255, 95, 86);\n  content: '';\n}\n\n\n.highlight::before {\n  top: 12px;\n  left: 40px;\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  background: rgb(255, 189, 46);\n  content: '';\n} */\n\n.box-blog-info {\n  display: flex !important;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.toolbox-list {\n  display: flex;\n  align-items: center;\n  margin: 0px 15px;\n}\n\n.item-toolbox a {\n  display: inline-block;\n  font-size: 12px;\n  line-height: 40px;\n  width: 40px;\n  display: inline-block;\n  height: 40px;\n  margin-right: 12px;\n  transition-duration: .5s;\n  text-align: center;\n  color: #555;\n  border-radius: 20px;\n  background: #f0f0f0;\n  transition: box-shadow .3s ease-in-out\n}\n\n.item-toolbox a:hover {\n  box-shadow: 0 0 0 3px #e6f7ff;\n  background: #e6f7ff !important;\n  color: #1890ff !important;\n}\n\n.gt-btn {\n  background: #0084ff !important;\n  opacity: 0.9;\n}\n.gt-btn:hover {\n  opacity: 1;\n  transition-duration: .5s;\n}\n\n.gt-btn-text {\n  color: #FFF;\n}\n\n\n.content.content-search .wrap-search-box {\n  margin-top: 20px;\n}\n\n.content.content-link .link-list .link-item .link-url {\n  display: flex;\n}\n\n.content.content-link .link-list .link-item .wrap-info {\n  margin-left: 12px;\n  flex-direction: column;\n  display: flex !important;\n  justify-content: space-between !important;\n}\n\n.content.content-link .link-list .link-item {\n  padding: 12px 0;\n}\n\n.link-list .link-item .info {\n  font-size: 12px !important;\n}\n\n\n.box-prev-next {\n  margin-top: 20px;\n}\n\n.layout .category-box {\n  width: 70%;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.category-box .category-list {\n  margin-left: 0;\n}\n\n.layout .category-box .category-list .category-item .category-size {\n  font-family: serif;\n  font-weight: bold;\n}\n\n.category-box--top {\n  margin-bottom: 15px;\n}\n\n@media screen and (max-width: 450px) {\n  .layout {\n    overflow: hidden;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    width: 100vw;\n    height: 100vh;\n    background: url(https://img.zcool.cn/community/01c9905b858a3ca8012126ce7c37c0.jpg@1280w_1l_0o_100sh.jpg);\n    background-repeat: no-repeat;\n    background-size: 100% 100%;\n  }\n\n  .layout .category-box,\n  .layout .content-category-wrap {\n    display: none;\n  }\n}\n\n// Custom styles.\n.hider_title{\n  font-family: \"Microsoft Yahei\";\n  cursor: pointer;\n}\n\nsummary {\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.summary::after {\n  content: \"▼\";\n}\n\n.open:after {\n  content: \"▲\";\n}<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"search","url":"http://jocolorful.com/search/index.html","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"tag","url":"http://jocolorful.com/tag/index.html","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"","url":"http://jocolorful.com/images/浏览器的原理/rename.js","content":"#!/bin/bash\n\nconst fs = require('fs');\n\nfunction getCurrentFilenames() {\n  console.log(\"Current filenames:\");\n  fs.readdirSync(__dirname).forEach(file => {\n\n    const newFile = file.replace('Untitled ', '')\n    fs.rename(file, newFile, () => {\n      console.log(\"\\nFile Renamed!\\n\");\n      getCurrentFilenames();\n    })\n  })\n}\ngetCurrentFilenames();<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]}]